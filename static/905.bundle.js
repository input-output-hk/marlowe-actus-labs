"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[905],{1905:(t,_,r)=>{r.a(t,(async(t,e)=>{try{r.r(_),r.d(_,{AddrAttributes:()=>n.I9m,Address:()=>n.kLt,AddressContent:()=>n.i3H,AddressHeaderKind:()=>n.Nqm,AddressId:()=>n.o1T,AddrtypeKind:()=>n.QqL,AssetName:()=>n.JfL,AssetNames:()=>n.Tbl,Assets:()=>n.deM,AuxiliaryData:()=>n.TOz,AuxiliaryDataHash:()=>n.c1W,AuxiliaryDataSet:()=>n.HRv,BaseAddress:()=>n.pv,BigInt:()=>n.tkx,BigNum:()=>n.WbW,Bip32PrivateKey:()=>n.BSq,Bip32PublicKey:()=>n.JFy,Block:()=>n.gOu,BlockBodyHash:()=>n.HJh,BlockHeaderHash:()=>n.SKr,BootstrapEraDistr:()=>n.J_m,BootstrapWitness:()=>n.zvN,BootstrapWitnesses:()=>n.lcw,ByronAddrType:()=>n.dU2,ByronAddress:()=>n.jZ5,ByronScript:()=>n.uOP,ByronTxout:()=>n._r1,Certificate:()=>n.KBB,CertificateBuilderResult:()=>n.Vit,CertificateKind:()=>n.Z96,Certificates:()=>n.wAL,ChangeSelectionAlgo:()=>n.KCG,CoinSelectionStrategyCIP2:()=>n.Bj5,ConstrPlutusData:()=>n.LvZ,CostModel:()=>n.aNQ,Costmdls:()=>n.oCb,Crc32:()=>n.Biy,DNSRecordAorAAAA:()=>n.KcK,DNSRecordSRV:()=>n.vRL,DataHash:()=>n.y0L,Datum:()=>n.yqI,DatumKind:()=>n.cnO,Ed25519KeyHash:()=>n._Wl,Ed25519KeyHashes:()=>n.YLW,Ed25519Signature:()=>n.AoU,EnterpriseAddress:()=>n.Z0E,ExUnitPrices:()=>n.wJb,ExUnits:()=>n.Yw6,GeneralTransactionMetadata:()=>n.y2O,GenesisDelegateHash:()=>n.r26,GenesisHash:()=>n.Gyx,GenesisHashes:()=>n.JSu,GenesisKeyDelegation:()=>n.GC9,HDAddressPayload:()=>n.x5p,Header:()=>n.h4i,HeaderBody:()=>n.Q4I,InputBuilderResult:()=>n.DQ2,Int:()=>n.J7n,Ipv4:()=>n.sE,Ipv6:()=>n.UfF,KESSignature:()=>n.w5E,KESVKey:()=>n.CpY,Language:()=>n.SQ0,LanguageKind:()=>n.$PN,Languages:()=>n.lIE,LegacyDaedalusPrivateKey:()=>n.XeG,LinearFee:()=>n.H8G,MIRKind:()=>n.pWD,MIRPot:()=>n.pj,MIRToStakeCredentials:()=>n.Y9,MetadataJsonSchema:()=>n.Qe3,MetadataList:()=>n.aKO,MetadataMap:()=>n.RoI,Mint:()=>n.y1,MintAssets:()=>n.Vq6,MintBuilderResult:()=>n.GQo,MoveInstantaneousReward:()=>n.ZkT,MoveInstantaneousRewardsCert:()=>n.v$C,MultiAsset:()=>n.MLF,MultiHostName:()=>n.Ado,NativeScript:()=>n.$xJ,NativeScriptKind:()=>n.Awt,NativeScriptWitnessInfo:()=>n.mM8,NativeScripts:()=>n.a5u,NetworkId:()=>n.B9l,NetworkIdKind:()=>n.rff,NetworkInfo:()=>n.JlX,Nonce:()=>n.pXc,OperationalCert:()=>n.QBC,PartialPlutusWitness:()=>n.tTm,PlutusData:()=>n.$zK,PlutusDataKind:()=>n.WDl,PlutusDatumSchema:()=>n.moL,PlutusList:()=>n.hSQ,PlutusMap:()=>n.FRj,PlutusScript:()=>n.qPp,PlutusScriptWitness:()=>n.Zmg,PlutusV1Script:()=>n.Z1S,PlutusV1Scripts:()=>n.iBp,PlutusV2Script:()=>n.$hr,PlutusV2Scripts:()=>n.Oyn,Pointer:()=>n.gbg,PointerAddress:()=>n.gdK,PoolMetadata:()=>n.y4p,PoolMetadataHash:()=>n.kYo,PoolParams:()=>n.Wuc,PoolRegistration:()=>n.M0e,PoolRetirement:()=>n.UtT,PrivateKey:()=>n._q4,ProposedProtocolParameterUpdates:()=>n.HIc,ProtocolMagic:()=>n.VGe,ProtocolParamUpdate:()=>n.qdJ,ProtocolVersion:()=>n.Qeo,PublicKey:()=>n.nhX,PublicKeys:()=>n.prR,Redeemer:()=>n.OJH,RedeemerTag:()=>n.QSL,RedeemerTagKind:()=>n.abK,RedeemerWitnessKey:()=>n.p6y,Redeemers:()=>n.F5E,Relay:()=>n.ZD6,RelayKind:()=>n.dp1,Relays:()=>n.FQ9,RequiredWitnessSet:()=>n.n31,RewardAddress:()=>n.mf5,RewardAddresses:()=>n.SYV,Script:()=>n.XfO,ScriptAll:()=>n._6O,ScriptAny:()=>n.f_G,ScriptDataHash:()=>n.uZr,ScriptHash:()=>n.nJe,ScriptHashNamespace:()=>n.Mnn,ScriptHashes:()=>n.kB,ScriptKind:()=>n.hVH,ScriptNOfK:()=>n.eBP,ScriptPubkey:()=>n.EuU,ScriptRef:()=>n.EQY,ScriptSchema:()=>n.$9y,SignedTxBuilder:()=>n.Jom,SingleCertificateBuilder:()=>n.vJ3,SingleHostAddr:()=>n.hAB,SingleHostName:()=>n.efI,SingleInputBuilder:()=>n.ph5,SingleKeyDistr:()=>n.o34,SingleMintBuilder:()=>n.Pvg,SingleOutputBuilderResult:()=>n.Yt6,SingleWithdrawalBuilder:()=>n.Ooy,SpendingData:()=>n.Qsb,SpendingDataKind:()=>n.oDh,SpendingDataPubKeyASD:()=>n.oYm,SpendingDataRedeemASD:()=>n.DY_,SpendingDataScriptASD:()=>n.s5W,StakeCredKind:()=>n.V9C,StakeCredential:()=>n.qop,StakeCredentials:()=>n.hP7,StakeDelegation:()=>n.YhN,StakeDeregistration:()=>n.CFw,StakeDistribution:()=>n.qMZ,StakeDistributionKind:()=>n.HTE,StakeRegistration:()=>n.XNw,StakeholderId:()=>n.ETx,Strings:()=>n.eI0,TimelockExpiry:()=>n.Gwp,TimelockStart:()=>n.Yx7,Transaction:()=>n.YW8,TransactionBodies:()=>n.HlM,TransactionBody:()=>n.r$i,TransactionBuilder:()=>n.hKc,TransactionBuilderConfig:()=>n.PzD,TransactionBuilderConfigBuilder:()=>n.szC,TransactionHash:()=>n.wf_,TransactionIndexes:()=>n.XaV,TransactionInput:()=>n.XRW,TransactionInputs:()=>n.TGD,TransactionMetadatum:()=>n.T01,TransactionMetadatumKind:()=>n.jUN,TransactionMetadatumLabels:()=>n.dxt,TransactionOutput:()=>n.HZd,TransactionOutputAmountBuilder:()=>n.AOx,TransactionOutputBuilder:()=>n.eVX,TransactionOutputs:()=>n.YyL,TransactionUnspentOutput:()=>n.ZAD,TransactionUnspentOutputs:()=>n.dV5,TransactionWitnessSet:()=>n.XgB,TransactionWitnessSetBuilder:()=>n.S__,TransactionWitnessSets:()=>n.jmH,TxRedeemerBuilder:()=>n.$vw,URL:()=>n.Jx4,UnitInterval:()=>n.rwR,UntaggedRedeemer:()=>n.t7r,Update:()=>n.BNo,VRFCert:()=>n.Nn,VRFKeyHash:()=>n.$LP,VRFVKey:()=>n.uHB,Value:()=>n.B4R,Vkey:()=>n.stS,Vkeys:()=>n.qte,Vkeywitness:()=>n.AF1,Vkeywitnesses:()=>n.VLl,WithdrawalBuilderResult:()=>n.x09,Withdrawals:()=>n.fjg,__wbg_buffer_34f5ec9f8a838ba0:()=>n.eAr,__wbg_call_33d7bcddbbfa394a:()=>n.Jmo,__wbg_call_65af9f665ab6ade5:()=>n.PZ2,__wbg_crypto_8fd02d72c4ba6c5c:()=>n.NLb,__wbg_getRandomValues_f308e7233e5601b7:()=>n.Anh,__wbg_globalThis_3348936ac49df00a:()=>n.lHB,__wbg_global_67175caf56f55ca9:()=>n.qNE,__wbg_length_51f19f73d6d9eff3:()=>n.YwE,__wbg_msCrypto_7e1e6014bddd75de:()=>n.IJU,__wbg_new_cda198d9dbc6d7ea:()=>n.G0U,__wbg_newnoargs_971e9a5abe185139:()=>n._f4,__wbg_newwithlength_66e5530e7079ea1b:()=>n._JX,__wbg_node_0091cdf1ffa73e4d:()=>n.tKO,__wbg_process_bd02d71a65cf734c:()=>n.e58,__wbg_randomFillSync_f20541303a990429:()=>n.bXi,__wbg_require_b06abd91965488c8:()=>n.qtV,__wbg_self_fd00a1ef86d1b2ed:()=>n.Ath,__wbg_set_1a930cfcda1a8067:()=>n.FS1,__wbg_subarray_270ff8dd5582c1ac:()=>n.Kms,__wbg_versions_1d70d407cb23129d:()=>n.DVm,__wbg_window_6f6e346d8bbd61d7:()=>n.Hcj,__wbindgen_debug_string:()=>n.fYP,__wbindgen_is_function:()=>n.o$X,__wbindgen_is_object:()=>n.WlW,__wbindgen_is_string:()=>n.eYF,__wbindgen_is_undefined:()=>n.XP4,__wbindgen_json_parse:()=>n.t$0,__wbindgen_memory:()=>n.oHO,__wbindgen_object_clone_ref:()=>n.m_1,__wbindgen_object_drop_ref:()=>n.ug$,__wbindgen_string_get:()=>n.qtq,__wbindgen_string_new:()=>n.h4u,__wbindgen_throw:()=>n.Or8,calc_script_data_hash:()=>n.mhD,compatible_min_ada_required:()=>n.FAY,decode_arbitrary_bytes_from_metadatum:()=>n.gw7,decode_metadatum_to_json_str:()=>n.rQY,decode_plutus_datum_to_json_str:()=>n.H10,decrypt_with_password:()=>n._Kj,encode_arbitrary_bytes_as_metadatum:()=>n.JTq,encode_json_str_to_metadatum:()=>n.soC,encode_json_str_to_native_script:()=>n.YVv,encode_json_str_to_plutus_datum:()=>n.TL3,encrypt_with_password:()=>n.uXl,get_deposit:()=>n.fgc,get_implicit_input:()=>n._P3,hash_auxiliary_data:()=>n.ZIS,hash_plutus_data:()=>n.SZC,hash_script_data:()=>n.e$S,hash_transaction:()=>n.o28,make_daedalus_bootstrap_witness:()=>n.arV,make_icarus_bootstrap_witness:()=>n.DKW,make_vkey_witness:()=>n.i4D,min_ada_required:()=>n.Ajc,min_fee:()=>n.QP_,min_no_script_fee:()=>n.I2v,min_script_fee:()=>n.Rdl});var n=r(3866),a=t([n]);n=(a.then?(await a)():a)[0],e()}catch(t){e(t)}}))},3866:(t,_,r)=>{r.a(t,(async(e,n)=>{try{r.d(_,{$9y:()=>wt,$LP:()=>Te,$PN:()=>it,$hr:()=>tr,$vw:()=>xe,$xJ:()=>V_,$zK:()=>F_,AF1:()=>ze,AOx:()=>ye,Ado:()=>I_,Ajc:()=>I,Anh:()=>Qe,AoU:()=>i_,Ath:()=>rn,Awt:()=>at,B4R:()=>De,B9l:()=>L_,BNo:()=>Ae,BSq:()=>Ht,Biy:()=>t_,Bj5:()=>kt,CFw:()=>Xr,CpY:()=>x_,DKW:()=>D,DQ2:()=>h_,DVm:()=>Ye,DY_:()=>Jr,EQY:()=>Rr,ETx:()=>Gr,EuU:()=>Dr,F5E:()=>hr,FAY:()=>C,FQ9:()=>mr,FRj:()=>U_,FS1:()=>pn,G0U:()=>cn,GC9:()=>u_,GQo:()=>q_,Gwp:()=>_e,Gyx:()=>l_,H10:()=>K,H8G:()=>A_,HIc:()=>cr,HJh:()=>Vt,HRv:()=>Dt,HTE:()=>ut,HZd:()=>ue,Hcj:()=>en,HlM:()=>ne,I2v:()=>E,I9m:()=>jt,IJU:()=>Xe,J7n:()=>k_,JFy:()=>Ct,JSu:()=>b_,JTq:()=>R,J_m:()=>Nt,JfL:()=>Pt,JlX:()=>E_,Jmo:()=>_n,Jom:()=>qr,Jx4:()=>Oe,KBB:()=>$t,KCG:()=>mt,KcK:()=>__,Kms:()=>bn,LvZ:()=>Qt,M0e:()=>ir,MLF:()=>C_,Mnn:()=>vt,NLb:()=>Ee,Nn:()=>Ke,Nqm:()=>ht,OJH:()=>yr,Ooy:()=>Lr,Or8:()=>gn,Oyn:()=>_r,PZ2:()=>on,Pvg:()=>Mr,PzD:()=>ie,Q4I:()=>f_,QBC:()=>J_,QP_:()=>W,QSL:()=>gr,Qe3:()=>bt,Qeo:()=>lr,QqL:()=>yt,Qsb:()=>Er,Rdl:()=>L,RoI:()=>B_,SKr:()=>Mt,SQ0:()=>O_,SYV:()=>xr,SZC:()=>F,S__:()=>ve,T01:()=>le,TGD:()=>we,TL3:()=>A,TOz:()=>Tt,Tbl:()=>At,UfF:()=>v_,UtT:()=>or,V9C:()=>ft,VGe:()=>pr,VLl:()=>He,Vit:()=>Ut,Vq6:()=>R_,WDl:()=>ot,WbW:()=>zt,WlW:()=>We,Wuc:()=>sr,XNw:()=>Zr,XP4:()=>sn,XRW:()=>pe,XaV:()=>ce,XeG:()=>P_,XfO:()=>Or,XgB:()=>me,Y9:()=>K_,YLW:()=>s_,YVv:()=>T,YW8:()=>ee,YhN:()=>Ur,Yt6:()=>Nr,Yw6:()=>c_,YwE:()=>wn,Yx7:()=>re,YyL:()=>fe,Z0E:()=>o_,Z1S:()=>Z_,Z96:()=>_t,ZAD:()=>he,ZD6:()=>kr,ZIS:()=>J,ZkT:()=>z_,Zmg:()=>Q_,_6O:()=>Sr,_JX:()=>ln,_Kj:()=>N,_P3:()=>X,_Wl:()=>a_,_f4:()=>tn,_q4:()=>dr,_r1:()=>Ft,a5u:()=>N_,aKO:()=>T_,aNQ:()=>Zt,abK:()=>dt,arV:()=>B,bXi:()=>Ze,c1W:()=>Bt,cnO:()=>tt,dU2:()=>Wt,dV5:()=>ke,deM:()=>Kt,dp1:()=>nt,dxt:()=>be,e$S:()=>$,e58:()=>Je,eAr:()=>dn,eBP:()=>Br,eI0:()=>te,eVX:()=>ge,eYF:()=>$e,efI:()=>Cr,fYP:()=>yn,f_G:()=>Pr,fgc:()=>Q,fjg:()=>Ie,gOu:()=>It,gbg:()=>rr,gdK:()=>er,gw7:()=>q,h4i:()=>g_,h4u:()=>Me,hAB:()=>Hr,hKc:()=>se,hP7:()=>$r,hSQ:()=>$_,hVH:()=>ct,i3H:()=>Ot,i4D:()=>Z,iBp:()=>G_,jUN:()=>lt,jZ5:()=>Jt,jmH:()=>je,kB:()=>Tr,kLt:()=>xt,kYo:()=>ar,lHB:()=>nn,lIE:()=>S_,lcw:()=>Et,mM8:()=>M_,m_1:()=>un,mf5:()=>jr,mhD:()=>U,moL:()=>pt,n31:()=>vr,nJe:()=>Kr,nhX:()=>br,o$X:()=>Ge,o1T:()=>St,o28:()=>Y,o34:()=>Vr,oCb:()=>Gt,oDh:()=>gt,oHO:()=>fn,oYm:()=>Wr,p6y:()=>fr,pWD:()=>et,pXc:()=>W_,ph5:()=>Ir,pj:()=>rt,prR:()=>ur,pv:()=>Rt,qMZ:()=>Qr,qNE:()=>an,qPp:()=>X_,qdJ:()=>wr,qop:()=>Fr,qtV:()=>Ue,qte:()=>qe,qtq:()=>Ne,r$i:()=>ae,r26:()=>w_,rQY:()=>H,rff:()=>st,rwR:()=>Se,s5W:()=>Yr,sE:()=>m_,soC:()=>z,stS:()=>Re,szC:()=>oe,t$0:()=>Le,t7r:()=>Pe,tKO:()=>Fe,tTm:()=>Y_,tkx:()=>qt,uHB:()=>Be,uOP:()=>Yt,uXl:()=>M,uZr:()=>Ar,ug$:()=>Ve,v$C:()=>H_,vJ3:()=>zr,vRL:()=>r_,w5E:()=>j_,wAL:()=>Xt,wJb:()=>d_,wf_:()=>de,x09:()=>Ce,x5p:()=>y_,y0L:()=>e_,y1:()=>D_,y2O:()=>p_,y4p:()=>nr,yqI:()=>n_,zvN:()=>Lt});var a=r(3791);t=r.hmd(t);var s=e([a]);a=(s.then?(await s)():s)[0];const i=new Array(32).fill(void 0);function o(t){return i[t]}i.push(void 0,null,!0,!1);let d=i.length;function c(t){t<36||(i[t]=d,d=t)}function p(t){const _=o(t);return c(t),_}let w=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});w.decode();let l=new Uint8Array;function b(){return 0===l.byteLength&&(l=new Uint8Array(a.memory.buffer)),l}function u(t,_){return w.decode(b().subarray(t,t+_))}function y(t){d===i.length&&i.push(i.length+1);const _=d;return d=i[_],i[_]=t,_}let g=0,f=new("undefined"==typeof TextEncoder?(0,t.require)("util").TextEncoder:TextEncoder)("utf-8");const h="function"==typeof f.encodeInto?function(t,_){return f.encodeInto(t,_)}:function(t,_){const r=f.encode(t);return _.set(r),{read:t.length,written:r.length}};function k(t,_,r){if(void 0===r){const r=f.encode(t),e=_(r.length);return b().subarray(e,e+r.length).set(r),g=r.length,e}let e=t.length,n=_(e);const a=b();let s=0;for(;s<e;s++){const _=t.charCodeAt(s);if(_>127)break;a[n+s]=_}if(s!==e){0!==s&&(t=t.slice(s)),n=r(n,e,e=s+3*t.length);const _=b().subarray(n+s,n+e);s+=h(t,_).written}return g=s,n}function m(t){return null==t}let v=new Int32Array;function j(){return 0===v.byteLength&&(v=new Int32Array(a.memory.buffer)),v}function x(t){const _=typeof t;if("number"==_||"boolean"==_||null==t)return`${t}`;if("string"==_)return`"${t}"`;if("symbol"==_){const _=t.description;return null==_?"Symbol":`Symbol(${_})`}if("function"==_){const _=t.name;return"string"==typeof _&&_.length>0?`Function(${_})`:"Function"}if(Array.isArray(t)){const _=t.length;let r="[";_>0&&(r+=x(t[0]));for(let e=1;e<_;e++)r+=", "+x(t[e]);return r+="]",r}const r=/\[object ([^\]]+)\]/.exec(toString.call(t));let e;if(!(r.length>1))return toString.call(t);if(e=r[1],"Object"==e)try{return"Object("+JSON.stringify(t)+")"}catch(t){return"Object"}return t instanceof Error?`${t.name}: ${t.message}\n${t.stack}`:e}function O(t,_){return b().subarray(t/1,t/1+_)}function S(t,_){const r=_(1*t.length);return b().set(t,r/1),g=t.length,r}function P(t,_){if(!(t instanceof _))throw new Error(`expected instance of ${_.name}`);return t.ptr}function A(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16),s=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),i=g;a.encode_json_str_to_plutus_datum(n,s,i,_);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return F_.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function K(t,_){try{const d=a.__wbindgen_add_to_stack_pointer(-16);P(t,F_),a.decode_plutus_datum_to_json_str(d,t.ptr,_);var r=j()[d/4+0],e=j()[d/4+1],n=j()[d/4+2],s=j()[d/4+3],i=r,o=e;if(s)throw i=0,o=0,p(n);return u(i,o)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(i,o)}}function T(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16),i=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),o=g,d=k(_,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.encode_json_str_to_native_script(s,i,o,d,c,r);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return V_.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function B(t,_,r){P(t,de),P(_,Jt),P(r,P_);const e=a.make_daedalus_bootstrap_witness(t.ptr,_.ptr,r.ptr);return Lt.__wrap(e)}function D(t,_,r){P(t,de),P(_,Jt),P(r,Ht);const e=a.make_icarus_bootstrap_witness(t.ptr,_.ptr,r.ptr);return Lt.__wrap(e)}function R(t){const _=S(t,a.__wbindgen_malloc),r=g,e=a.encode_arbitrary_bytes_as_metadatum(_,r);return le.__wrap(e)}function q(t){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,le),a.decode_arbitrary_bytes_from_metadatum(s,t.ptr);var _=j()[s/4+0],r=j()[s/4+1],e=j()[s/4+2];if(j()[s/4+3])throw p(e);var n=O(_,r).slice();return a.__wbindgen_free(_,1*r),n}finally{a.__wbindgen_add_to_stack_pointer(16)}}function z(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16),s=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),i=g;a.encode_json_str_to_metadatum(n,s,i,_);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return le.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function H(t,_){try{const d=a.__wbindgen_add_to_stack_pointer(-16);P(t,le),a.decode_metadatum_to_json_str(d,t.ptr,_);var r=j()[d/4+0],e=j()[d/4+1],n=j()[d/4+2],s=j()[d/4+3],i=r,o=e;if(s)throw i=0,o=0,p(n);return u(i,o)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(i,o)}}function C(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,ue),P(_,zt),P(r,zt),a.compatible_min_ada_required(s,t.ptr,_.ptr,r.ptr);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return zt.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function I(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,ue),P(_,zt),a.min_ada_required(n,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return zt.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}let V=new Uint32Array;function M(t,_,r,e){try{const w=a.__wbindgen_add_to_stack_pointer(-16),l=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),b=g,y=k(_,a.__wbindgen_malloc,a.__wbindgen_realloc),f=g,h=k(r,a.__wbindgen_malloc,a.__wbindgen_realloc),m=g,v=k(e,a.__wbindgen_malloc,a.__wbindgen_realloc),x=g;a.encrypt_with_password(w,l,b,y,f,h,m,v,x);var n=j()[w/4+0],s=j()[w/4+1],i=j()[w/4+2],o=j()[w/4+3],d=n,c=s;if(o)throw d=0,c=0,p(i);return u(d,c)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(d,c)}}function N(t,_){try{const d=a.__wbindgen_add_to_stack_pointer(-16),c=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),w=g,l=k(_,a.__wbindgen_malloc,a.__wbindgen_realloc),b=g;a.decrypt_with_password(d,c,w,l,b);var r=j()[d/4+0],e=j()[d/4+1],n=j()[d/4+2],s=j()[d/4+3],i=r,o=e;if(s)throw i=0,o=0,p(n);return u(i,o)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(i,o)}}function L(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,ee),P(_,d_),a.min_script_fee(n,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return zt.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function E(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,ee),P(_,A_),a.min_no_script_fee(n,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return zt.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function W(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,ee),P(_,A_),P(r,d_),a.min_fee(s,t.ptr,_.ptr,r.ptr);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return zt.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function J(t){P(t,Tt);const _=a.hash_auxiliary_data(t.ptr);return Bt.__wrap(_)}function Y(t){P(t,ae);const _=a.hash_transaction(t.ptr);return de.__wrap(_)}function F(t){P(t,F_);const _=a.hash_plutus_data(t.ptr);return e_.__wrap(_)}function $(t,_,r){P(t,hr),P(_,Gt);let e=0;m(r)||(P(r,$_),e=r.ptr,r.ptr=0);const n=a.hash_script_data(t.ptr,_.ptr,e);return Ar.__wrap(n)}function U(t,_,r,e){try{const i=a.__wbindgen_add_to_stack_pointer(-16);P(t,hr),P(_,$_),P(r,Gt),P(e,S_),a.calc_script_data_hash(i,t.ptr,_.ptr,r.ptr,e.ptr);var n=j()[i/4+0],s=j()[i/4+1];if(j()[i/4+2])throw p(s);return 0===n?void 0:Ar.__wrap(n)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function X(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,ae),P(_,zt),P(r,zt),a.get_implicit_input(s,t.ptr,_.ptr,r.ptr);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return De.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function Q(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,ae),P(_,zt),P(r,zt),a.get_deposit(s,t.ptr,_.ptr,r.ptr);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return zt.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}function Z(t,_){P(t,de),P(_,dr);const r=a.make_vkey_witness(t.ptr,_.ptr);return ze.__wrap(r)}function G(t,_){try{return t.apply(this,_)}catch(t){a.__wbindgen_exn_store(y(t))}}const tt=Object.freeze({Hash:0,0:"Hash",Inline:1,1:"Inline"}),_t=Object.freeze({StakeRegistration:0,0:"StakeRegistration",StakeDeregistration:1,1:"StakeDeregistration",StakeDelegation:2,2:"StakeDelegation",PoolRegistration:3,3:"PoolRegistration",PoolRetirement:4,4:"PoolRetirement",GenesisKeyDelegation:5,5:"GenesisKeyDelegation",MoveInstantaneousRewardsCert:6,6:"MoveInstantaneousRewardsCert"}),rt=Object.freeze({Reserves:0,0:"Reserves",Treasury:1,1:"Treasury"}),et=Object.freeze({ToOtherPot:0,0:"ToOtherPot",ToStakeCredentials:1,1:"ToStakeCredentials"}),nt=Object.freeze({SingleHostAddr:0,0:"SingleHostAddr",SingleHostName:1,1:"SingleHostName",MultiHostName:2,2:"MultiHostName"}),at=Object.freeze({ScriptPubkey:0,0:"ScriptPubkey",ScriptAll:1,1:"ScriptAll",ScriptAny:2,2:"ScriptAny",ScriptNOfK:3,3:"ScriptNOfK",TimelockStart:4,4:"TimelockStart",TimelockExpiry:5,5:"TimelockExpiry"}),st=Object.freeze({Testnet:0,0:"Testnet",Mainnet:1,1:"Mainnet"}),it=Object.freeze({PlutusV1:0,0:"PlutusV1",PlutusV2:1,1:"PlutusV2"}),ot=Object.freeze({ConstrPlutusData:0,0:"ConstrPlutusData",Map:1,1:"Map",List:2,2:"List",Integer:3,3:"Integer",Bytes:4,4:"Bytes"}),dt=Object.freeze({Spend:0,0:"Spend",Mint:1,1:"Mint",Cert:2,2:"Cert",Reward:3,3:"Reward"}),ct=Object.freeze({NativeScript:0,0:"NativeScript",PlutusScriptV1:1,1:"PlutusScriptV1",PlutusScriptV2:2,2:"PlutusScriptV2"}),pt=Object.freeze({BasicConversions:0,0:"BasicConversions",DetailedSchema:1,1:"DetailedSchema"}),wt=Object.freeze({Wallet:0,0:"Wallet",Node:1,1:"Node"}),lt=Object.freeze({MetadataMap:0,0:"MetadataMap",MetadataList:1,1:"MetadataList",Int:2,2:"Int",Bytes:3,3:"Bytes",Text:4,4:"Text"}),bt=Object.freeze({NoConversions:0,0:"NoConversions",BasicConversions:1,1:"BasicConversions",DetailedSchema:2,2:"DetailedSchema"}),ut=Object.freeze({BootstrapEraDistr:0,0:"BootstrapEraDistr",SingleKeyDistr:1,1:"SingleKeyDistr"}),yt=Object.freeze({ATPubKey:0,0:"ATPubKey",ATScript:1,1:"ATScript",ATRedeem:2,2:"ATRedeem"}),gt=Object.freeze({SpendingDataPubKeyASD:0,0:"SpendingDataPubKeyASD",SpendingDataScriptASD:1,1:"SpendingDataScriptASD",SpendingDataRedeemASD:2,2:"SpendingDataRedeemASD"}),ft=Object.freeze({Key:0,0:"Key",Script:1,1:"Script"}),ht=Object.freeze({BasePaymentKeyStakeKey:0,0:"BasePaymentKeyStakeKey",BasePaymentScriptStakeKey:1,1:"BasePaymentScriptStakeKey",BasePaymentKeyStakeScript:2,2:"BasePaymentKeyStakeScript",BasePaymentScriptStakeScript:3,3:"BasePaymentScriptStakeScript",PointerKey:4,4:"PointerKey",PointerScript:5,5:"PointerScript",EnterpriseKey:6,6:"EnterpriseKey",EnterpriseScript:7,7:"EnterpriseScript",Byron:8,8:"Byron",RewardKey:14,14:"RewardKey",RewardScript:15,15:"RewardScript"}),kt=Object.freeze({LargestFirst:0,0:"LargestFirst",RandomImprove:1,1:"RandomImprove",LargestFirstMultiAsset:2,2:"LargestFirstMultiAsset",RandomImproveMultiAsset:3,3:"RandomImproveMultiAsset"}),mt=Object.freeze({Default:0,0:"Default"}),vt=Object.freeze({NativeScript:0,0:"NativeScript",PlutusV1:1,1:"PlutusV1",PlutusV2:2,2:"PlutusV2"});class jt{static __wrap(t){const _=Object.create(jt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_addrattributes_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.addrattributes_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.addrattributes_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return jt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.addrattributes_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.addrattributes_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.addrattributes_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return jt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_stake_distribution(t){P(t,Qr),a.addrattributes_set_stake_distribution(this.ptr,t.ptr)}stake_distribution(){const t=a.addrattributes_stake_distribution(this.ptr);return 0===t?void 0:Qr.__wrap(t)}set_derivation_path(t){P(t,y_);var _=t.ptr;t.ptr=0,a.addrattributes_set_derivation_path(this.ptr,_)}derivation_path(){const t=a.addrattributes_derivation_path(this.ptr);return 0===t?void 0:y_.__wrap(t)}set_protocol_magic(t){P(t,pr);var _=t.ptr;t.ptr=0,a.addrattributes_set_protocol_magic(this.ptr,_)}protocol_magic(){const t=a.addrattributes_protocol_magic(this.ptr);return 0===t?void 0:pr.__wrap(t)}static new(){const t=a.addrattributes_new();return jt.__wrap(t)}static new_bootstrap_era(t,_){let r=0;m(t)||(P(t,y_),r=t.ptr,t.ptr=0);let e=0;m(_)||(P(_,pr),e=_.ptr,_.ptr=0);const n=a.addrattributes_new_bootstrap_era(r,e);return jt.__wrap(n)}static new_single_key(t,_,r){P(t,Ct);let e=0;m(_)||(P(_,y_),e=_.ptr,_.ptr=0),P(r,pr);var n=r.ptr;r.ptr=0;const s=a.addrattributes_new_single_key(t.ptr,e,n);return jt.__wrap(s)}}class xt{static __wrap(t){const _=Object.create(xt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_address_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.address_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return xt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.address_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.address_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.address_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return xt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}header(){return a.address_header(this.ptr)}static header_matches_kind(t,_){return 0!==a.address_header_matches_kind(t,_)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.address_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=a.__wbindgen_add_to_stack_pointer(-16);var _=m(t)?0:k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),r=g;a.address_to_bech32(c,this.ptr,_,r);var e=j()[c/4+0],n=j()[c/4+1],s=j()[c/4+2],i=j()[c/4+3],o=e,d=n;if(i)throw o=0,d=0,p(s);return u(o,d)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(o,d)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.address_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return xt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static is_valid_bech32(t){const _=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),r=g;return 0!==a.address_is_valid_bech32(_,r)}static is_valid_byron(t){const _=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),r=g;return 0!==a.address_is_valid_byron(_,r)}static is_valid(t){const _=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),r=g;return 0!==a.address_is_valid(_,r)}network_id(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.address_network_id(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return t}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_byron(){const t=a.address_as_byron(this.ptr);return 0===t?void 0:Jt.__wrap(t)}as_reward(){const t=a.address_as_reward(this.ptr);return 0===t?void 0:jr.__wrap(t)}as_pointer(){const t=a.address_as_pointer(this.ptr);return 0===t?void 0:er.__wrap(t)}as_enterprise(){const t=a.address_as_enterprise(this.ptr);return 0===t?void 0:o_.__wrap(t)}as_base(){const t=a.address_as_base(this.ptr);return 0===t?void 0:Rt.__wrap(t)}payment_cred(){const t=a.address_payment_cred(this.ptr);return 0===t?void 0:Fr.__wrap(t)}staking_cred(){const t=a.address_staking_cred(this.ptr);return 0===t?void 0:Fr.__wrap(t)}}class Ot{static __wrap(t){const _=Object.create(Ot.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_addresscontent_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.addresscontent_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.addresscontent_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ot.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.addresscontent_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.addresscontent_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.addresscontent_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ot.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}address_id(){const t=a.addresscontent_address_id(this.ptr);return St.__wrap(t)}addr_attr(){const t=a.addresscontent_addr_attr(this.ptr);return jt.__wrap(t)}addr_type(){const t=a.addresscontent_addr_type(this.ptr);return Wt.__wrap(t)}static new(t,_,r){P(t,St),P(_,jt),P(r,Wt);const e=a.addresscontent_new(t.ptr,_.ptr,r.ptr);return Ot.__wrap(e)}static hash_and_create(t,_,r){P(t,Wt),P(_,Er),P(r,jt);const e=a.addresscontent_hash_and_create(t.ptr,_.ptr,r.ptr);return Ot.__wrap(e)}static new_redeem(t,_){P(t,br);let r=0;m(_)||(P(_,pr),r=_.ptr,_.ptr=0);const e=a.addresscontent_new_redeem(t.ptr,r);return Ot.__wrap(e)}static new_simple(t,_){P(t,Ct);let r=0;m(_)||(P(_,pr),r=_.ptr,_.ptr=0);const e=a.addresscontent_new_simple(t.ptr,r);return Ot.__wrap(e)}to_address(){const t=a.addresscontent_to_address(this.ptr);return Jt.__wrap(t)}byron_protocol_magic(){return a.addresscontent_byron_protocol_magic(this.ptr)>>>0}network_id(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.addresscontent_network_id(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return t}finally{a.__wbindgen_add_to_stack_pointer(16)}}static icarus_from_key(t,_){P(t,Ct);const r=a.addresscontent_icarus_from_key(t.ptr,_);return Ot.__wrap(r)}identical_with_pubkey(t){return P(t,Ct),0!==a.addresscontent_identical_with_pubkey(this.ptr,t.ptr)}}class St{static __wrap(t){const _=Object.create(St.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_addressid_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.addressid_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return St.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.addressid_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.addressid_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.addressid_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return St.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.addressid_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.addressid_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return St.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t,_,r){P(t,Wt),P(_,Er),P(r,jt);const e=a.addressid_new(t.ptr,_.ptr,r.ptr);return St.__wrap(e)}}class Pt{static __wrap(t){const _=Object.create(Pt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_assetname_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.assetname_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.assetname_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Pt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.assetname_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.assetname_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.assetname_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Pt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.assetname_new(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Pt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}name(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.assetname_name(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class At{static __wrap(t){const _=Object.create(At.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_assetnames_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.assetnames_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.assetnames_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return At.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.assetnames_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.assetnames_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.assetnames_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return At.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.assetnames_new();return At.__wrap(t)}len(){return a.assetnames_len(this.ptr)>>>0}get(t){const _=a.assetnames_get(this.ptr,t);return Pt.__wrap(_)}add(t){P(t,Pt),a.assetnames_add(this.ptr,t.ptr)}}class Kt{static __wrap(t){const _=Object.create(Kt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_assets_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.assets_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.assets_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Kt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.assets_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.assets_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.assets_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Kt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.assets_new();return Kt.__wrap(t)}len(){return a.assets_len(this.ptr)>>>0}insert(t,_){P(t,Pt),P(_,zt);const r=a.assets_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:zt.__wrap(r)}get(t){P(t,Pt);const _=a.assets_get(this.ptr,t.ptr);return 0===_?void 0:zt.__wrap(_)}keys(){const t=a.assets_keys(this.ptr);return At.__wrap(t)}}class Tt{static __wrap(t){const _=Object.create(Tt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_auxiliarydata_free(t)}add_metadatum(t,_){P(t,zt),P(_,le),a.auxiliarydata_add_metadatum(this.ptr,t.ptr,_.ptr)}add_json_metadatum_with_schema(t,_,r){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt);const s=k(_,a.__wbindgen_malloc,a.__wbindgen_realloc),i=g;a.auxiliarydata_add_json_metadatum_with_schema(n,this.ptr,t.ptr,s,i,r);var e=j()[n/4+0];if(j()[n/4+1])throw p(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}add(t){P(t,Tt),a.auxiliarydata_add(this.ptr,t.ptr)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.auxiliarydata_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.auxiliarydata_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Tt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.auxiliarydata_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.auxiliarydata_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.auxiliarydata_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Tt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.auxiliarydata_new();return Tt.__wrap(t)}metadata(){const t=a.auxiliarydata_metadata(this.ptr);return 0===t?void 0:p_.__wrap(t)}set_metadata(t){P(t,p_),a.auxiliarydata_set_metadata(this.ptr,t.ptr)}native_scripts(){const t=a.auxiliarydata_native_scripts(this.ptr);return 0===t?void 0:N_.__wrap(t)}set_native_scripts(t){P(t,N_),a.auxiliarydata_set_native_scripts(this.ptr,t.ptr)}plutus_v1_scripts(){const t=a.auxiliarydata_plutus_v1_scripts(this.ptr);return 0===t?void 0:G_.__wrap(t)}set_plutus_v1_scripts(t){P(t,G_),a.auxiliarydata_set_plutus_v1_scripts(this.ptr,t.ptr)}plutus_v2_scripts(){const t=a.auxiliarydata_plutus_v2_scripts(this.ptr);return 0===t?void 0:_r.__wrap(t)}set_plutus_v2_scripts(t){P(t,_r),a.auxiliarydata_set_plutus_v2_scripts(this.ptr,t.ptr)}}class Bt{static __wrap(t){const _=Object.create(Bt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_auxiliarydatahash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.auxiliarydatahash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Bt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.auxiliarydatahash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.auxiliarydatahash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.auxiliarydatahash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Bt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.auxiliarydatahash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.auxiliarydatahash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Bt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Dt{static __wrap(t){const _=Object.create(Dt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_auxiliarydataset_free(t)}static new(){const t=a.auxiliarydataset_new();return Dt.__wrap(t)}len(){return a.auxiliarydataset_len(this.ptr)>>>0}insert(t,_){P(t,zt),P(_,Tt);const r=a.auxiliarydataset_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:Tt.__wrap(r)}get(t){P(t,zt);const _=a.auxiliarydataset_get(this.ptr,t.ptr);return 0===_?void 0:Tt.__wrap(_)}indices(){const t=a.auxiliarydataset_indices(this.ptr);return ce.__wrap(t)}}class Rt{static __wrap(t){const _=Object.create(Rt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_baseaddress_free(t)}static new(t,_,r){P(_,Fr),P(r,Fr);const e=a.baseaddress_new(t,_.ptr,r.ptr);return Rt.__wrap(e)}payment_cred(){const t=a.baseaddress_payment_cred(this.ptr);return Fr.__wrap(t)}stake_cred(){const t=a.baseaddress_stake_cred(this.ptr);return Fr.__wrap(t)}to_address(){const t=a.baseaddress_to_address(this.ptr);return xt.__wrap(t)}static from_address(t){P(t,xt);const _=a.baseaddress_from_address(t.ptr);return 0===_?void 0:Rt.__wrap(_)}}class qt{static __wrap(t){const _=Object.create(qt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bigint_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bigint_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bigint_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return qt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_u64(){const t=a.bigint_as_u64(this.ptr);return 0===t?void 0:zt.__wrap(t)}as_int(){const t=a.bigint_as_int(this.ptr);return 0===t?void 0:k_.__wrap(t)}static from_str(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.bigint_from_str(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return qt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_str(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bigint_to_str(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}}class zt{static __wrap(t){const _=Object.create(zt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bignum_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bignum_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bignum_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_str(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.bignum_from_str(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_str(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bignum_to_str(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static zero(){const t=a.bignum_zero();return zt.__wrap(t)}is_zero(){return 0!==a.bignum_is_zero(this.ptr)}checked_mul(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt),a.bignum_checked_mul(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}checked_add(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt),a.bignum_checked_add(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}checked_sub(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt),a.bignum_checked_sub(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}clamped_sub(t){P(t,zt);const _=a.bignum_clamped_sub(this.ptr,t.ptr);return zt.__wrap(_)}checked_div(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt),a.bignum_checked_div(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}checked_div_ceil(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt),a.bignum_checked_div_ceil(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}compare(t){return P(t,zt),a.bignum_compare(this.ptr,t.ptr)}}class Ht{static __wrap(t){const _=Object.create(Ht.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bip32privatekey_free(t)}derive(t){const _=a.bip32privatekey_derive(this.ptr,t);return Ht.__wrap(_)}static from_128_xprv(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bip32privatekey_from_128_xprv(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ht.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_128_xprv(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bip32privatekey_to_128_xprv(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static generate_ed25519_bip32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bip32privatekey_generate_ed25519_bip32(r);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return Ht.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_raw_key(){const t=a.bip32privatekey_to_raw_key(this.ptr);return dr.__wrap(t)}to_public(){const t=a.bip32privatekey_to_public(this.ptr);return Ct.__wrap(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bip32privatekey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ht.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bip32privatekey_as_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.bip32privatekey_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ht.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bip32privatekey_to_bech32(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_bip39_entropy(t,_){const r=S(t,a.__wbindgen_malloc),e=g,n=S(_,a.__wbindgen_malloc),s=g,i=a.bip32privatekey_from_bip39_entropy(r,e,n,s);return Ht.__wrap(i)}chaincode(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bip32privatekey_chaincode(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Ct{static __wrap(t){const _=Object.create(Ct.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bip32publickey_free(t)}derive(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bip32publickey_derive(e,this.ptr,t);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ct.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_raw_key(){const t=a.bip32publickey_to_raw_key(this.ptr);return br.__wrap(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bip32publickey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ct.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bip32publickey_as_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.bip32publickey_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ct.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bip32publickey_to_bech32(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}chaincode(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bip32publickey_chaincode(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class It{static __wrap(t){const _=Object.create(It.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_block_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.block_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.block_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return It.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.block_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.block_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.block_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return It.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}header(){const t=a.block_header(this.ptr);return g_.__wrap(t)}transaction_bodies(){const t=a.block_transaction_bodies(this.ptr);return ne.__wrap(t)}transaction_witness_sets(){const t=a.block_transaction_witness_sets(this.ptr);return je.__wrap(t)}auxiliary_data_set(){const t=a.block_auxiliary_data_set(this.ptr);return Dt.__wrap(t)}invalid_transactions(){const t=a.block_invalid_transactions(this.ptr);return ce.__wrap(t)}static new(t,_,r,e,n){P(t,g_),P(_,ne),P(r,je),P(e,Dt),P(n,ce);const s=a.block_new(t.ptr,_.ptr,r.ptr,e.ptr,n.ptr);return It.__wrap(s)}}class Vt{static __wrap(t){const _=Object.create(Vt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_blockbodyhash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.blockbodyhash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Vt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.blockbodyhash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.blockbodyhash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.blockbodyhash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Vt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.blockbodyhash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.blockbodyhash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Vt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Mt{static __wrap(t){const _=Object.create(Mt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_blockheaderhash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.blockheaderhash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Mt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.blockheaderhash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.blockheaderhash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.blockheaderhash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Mt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.blockheaderhash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.blockheaderhash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Mt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Nt{static __wrap(t){const _=Object.create(Nt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bootstraperadistr_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bootstraperadistr_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bootstraperadistr_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Nt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.bootstraperadistr_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bootstraperadistr_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.bootstraperadistr_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Nt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.bootstraperadistr_new();return Nt.__wrap(t)}}class Lt{static __wrap(t){const _=Object.create(Lt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bootstrapwitness_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bootstrapwitness_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.bootstrapwitness_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Lt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.bootstrapwitness_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bootstrapwitness_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.bootstrapwitness_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Lt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}vkey(){const t=a.bootstrapwitness_vkey(this.ptr);return Re.__wrap(t)}signature(){const t=a.bootstrapwitness_signature(this.ptr);return i_.__wrap(t)}chain_code(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.bootstrapwitness_chain_code(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}attributes(){const t=a.bootstrapwitness_attributes(this.ptr);return jt.__wrap(t)}static new(t,_,r,e){P(t,Re),P(_,i_);const n=S(r,a.__wbindgen_malloc),s=g;P(e,jt);const i=a.bootstrapwitness_new(t.ptr,_.ptr,n,s,e.ptr);return Lt.__wrap(i)}to_public_key(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bootstrapwitness_to_public_key(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return Ct.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_address(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.bootstrapwitness_to_address(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return Ot.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Et{static __wrap(t){const _=Object.create(Et.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_bootstrapwitnesses_free(t)}static new(){const t=a.bootstrapwitnesses_new();return Et.__wrap(t)}len(){return a.bootstrapwitnesses_len(this.ptr)>>>0}get(t){const _=a.bootstrapwitnesses_get(this.ptr,t);return Lt.__wrap(_)}add(t){P(t,Lt),a.bootstrapwitnesses_add(this.ptr,t.ptr)}}class Wt{static __wrap(t){const _=Object.create(Wt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_byronaddrtype_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddrtype_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.byronaddrtype_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Wt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddrtype_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddrtype_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.byronaddrtype_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Wt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_ATPubKey(){const t=a.byronaddrtype_new_ATPubKey();return Wt.__wrap(t)}static new_ATScript(){const t=a.byronaddrtype_new_ATScript();return Wt.__wrap(t)}static new_ATRedeem(){const t=a.byronaddrtype_new_ATRedeem();return Wt.__wrap(t)}kind(){return a.byronaddrtype_kind(this.ptr)>>>0}}class Jt{static __wrap(t){const _=Object.create(Jt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_byronaddress_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddress_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.byronaddress_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Jt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddress_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddress_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.byronaddress_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Jt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}addr(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddress_addr(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}crc32(){const t=a.byronaddress_crc32(this.ptr);return t_.__wrap(t)}static checksum_from_bytes(t){const _=S(t,a.__wbindgen_malloc),r=g,e=a.byronaddress_checksum_from_bytes(_,r);return Jt.__wrap(e)}static new(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16),s=S(t,a.__wbindgen_malloc),i=g;P(_,t_),a.byronaddress_new(n,s,i,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return Jt.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_base58(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.byronaddress_to_base58(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_base58(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.byronaddress_from_base58(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Jt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}address_content(){const t=a.byronaddress_address_content(this.ptr);return Ot.__wrap(t)}static is_valid(t){const _=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),r=g;return 0!==a.byronaddress_is_valid(_,r)}to_address(){const t=a.byronaddress_to_address(this.ptr);return xt.__wrap(t)}static from_address(t){P(t,xt);const _=a.byronaddress_from_address(t.ptr);return 0===_?void 0:Jt.__wrap(_)}}class Yt{static __wrap(t){const _=Object.create(Yt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_byronscript_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.byronscript_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.byronscript_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Yt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Ft{static __wrap(t){const _=Object.create(Ft.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_byrontxout_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.byrontxout_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.byrontxout_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ft.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.byrontxout_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.byrontxout_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.byrontxout_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ft.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}address(){const t=a.byrontxout_address(this.ptr);return Jt.__wrap(t)}amount(){const t=a.byrontxout_amount(this.ptr);return zt.__wrap(t)}static new(t,_){P(t,Jt),P(_,zt);const r=a.byrontxout_new(t.ptr,_.ptr);return Ft.__wrap(r)}}class $t{static __wrap(t){const _=Object.create($t.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_certificate_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.certificate_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.certificate_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return $t.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.certificate_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.certificate_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.certificate_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return $t.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_stake_registration(t){P(t,Zr);const _=a.certificate_new_stake_registration(t.ptr);return $t.__wrap(_)}static new_stake_deregistration(t){P(t,Xr);const _=a.certificate_new_stake_deregistration(t.ptr);return $t.__wrap(_)}static new_stake_delegation(t){P(t,Ur);const _=a.certificate_new_stake_delegation(t.ptr);return $t.__wrap(_)}static new_pool_registration(t){P(t,ir);const _=a.certificate_new_pool_registration(t.ptr);return $t.__wrap(_)}static new_pool_retirement(t){P(t,or);const _=a.certificate_new_pool_retirement(t.ptr);return $t.__wrap(_)}static new_genesis_key_delegation(t){P(t,u_);const _=a.certificate_new_genesis_key_delegation(t.ptr);return $t.__wrap(_)}static new_move_instantaneous_rewards_cert(t){P(t,H_);const _=a.certificate_new_move_instantaneous_rewards_cert(t.ptr);return $t.__wrap(_)}kind(){return a.certificate_kind(this.ptr)>>>0}as_stake_registration(){const t=a.certificate_as_stake_registration(this.ptr);return 0===t?void 0:Zr.__wrap(t)}as_stake_deregistration(){const t=a.certificate_as_stake_deregistration(this.ptr);return 0===t?void 0:Xr.__wrap(t)}as_stake_delegation(){const t=a.certificate_as_stake_delegation(this.ptr);return 0===t?void 0:Ur.__wrap(t)}as_pool_registration(){const t=a.certificate_as_pool_registration(this.ptr);return 0===t?void 0:ir.__wrap(t)}as_pool_retirement(){const t=a.certificate_as_pool_retirement(this.ptr);return 0===t?void 0:or.__wrap(t)}as_genesis_key_delegation(){const t=a.certificate_as_genesis_key_delegation(this.ptr);return 0===t?void 0:u_.__wrap(t)}as_move_instantaneous_rewards_cert(){const t=a.certificate_as_move_instantaneous_rewards_cert(this.ptr);return 0===t?void 0:H_.__wrap(t)}}class Ut{static __wrap(t){const _=Object.create(Ut.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_certificatebuilderresult_free(t)}}class Xt{static __wrap(t){const _=Object.create(Xt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_certificates_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.certificates_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.certificates_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Xt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.certificates_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.certificates_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.certificates_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Xt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.certificates_new();return Xt.__wrap(t)}len(){return a.certificates_len(this.ptr)>>>0}get(t){const _=a.certificates_get(this.ptr,t);return $t.__wrap(_)}add(t){P(t,$t),a.certificates_add(this.ptr,t.ptr)}}class Qt{static __wrap(t){const _=Object.create(Qt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_constrplutusdata_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.constrplutusdata_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.constrplutusdata_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Qt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}alternative(){const t=a.constrplutusdata_alternative(this.ptr);return zt.__wrap(t)}data(){const t=a.constrplutusdata_data(this.ptr);return $_.__wrap(t)}static new(t,_){P(t,zt),P(_,$_);const r=a.constrplutusdata_new(t.ptr,_.ptr);return Qt.__wrap(r)}}class Zt{static __wrap(t){const _=Object.create(Zt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_costmodel_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.costmodel_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.costmodel_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.costmodel_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.costmodel_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.costmodel_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static empty_model(t){P(t,O_);const _=a.costmodel_empty_model(t.ptr);return Zt.__wrap(_)}set(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(_,k_),a.costmodel_set(n,this.ptr,t,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return k_.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.costmodel_get(e,this.ptr,t);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return k_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}language(){const t=a.costmodel_language(this.ptr);return O_.__wrap(t)}}class Gt{static __wrap(t){const _=Object.create(Gt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_costmdls_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.costmdls_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.costmdls_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Gt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.costmdls_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.costmdls_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.costmdls_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Gt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.costmdls_new();return Gt.__wrap(t)}len(){return a.costmdls_len(this.ptr)>>>0}insert(t){P(t,Zt);const _=a.costmdls_insert(this.ptr,t.ptr);return 0===_?void 0:Zt.__wrap(_)}get(t){P(t,O_);const _=a.costmdls_get(this.ptr,t.ptr);return 0===_?void 0:Zt.__wrap(_)}keys(){const t=a.costmdls_keys(this.ptr);return S_.__wrap(t)}}class t_{static __wrap(t){const _=Object.create(t_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_crc32_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.crc32_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.crc32_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return t_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.crc32_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.crc32_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.crc32_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return t_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_val(t){const _=a.crc32_from_val(t);return t_.__wrap(_)}val(){return a.crc32_val(this.ptr)>>>0}}class __{static __wrap(t){const _=Object.create(__.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_dnsrecordaoraaaa_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.dnsrecordaoraaaa_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.dnsrecordaoraaaa_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return __.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.dnsrecordaoraaaa_new(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return __.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}record(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.dnsrecordaoraaaa_record(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}}class r_{static __wrap(t){const _=Object.create(r_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_dnsrecordsrv_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.dnsrecordsrv_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.dnsrecordsrv_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return r_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.dnsrecordsrv_new(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return r_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}record(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.dnsrecordsrv_record(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}}class e_{static __wrap(t){const _=Object.create(e_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_datahash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.datahash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return e_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.datahash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.datahash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.datahash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return e_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.datahash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.datahash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return e_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class n_{static __wrap(t){const _=Object.create(n_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_datum_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.datum_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.datum_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return n_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.datum_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.datum_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.datum_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return n_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_data_hash(t){P(t,e_);const _=a.datum_new_data_hash(t.ptr);return n_.__wrap(_)}static new_data(t){P(t,F_);const _=a.datum_new_data(t.ptr);return n_.__wrap(_)}kind(){return a.datum_kind(this.ptr)>>>0}as_data_hash(){const t=a.datum_as_data_hash(this.ptr);return 0===t?void 0:e_.__wrap(t)}as_inline_data(){const t=a.datum_as_inline_data(this.ptr);return 0===t?void 0:F_.__wrap(t)}}class a_{static __wrap(t){const _=Object.create(a_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_ed25519keyhash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ed25519keyhash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return a_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519keyhash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.ed25519keyhash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ed25519keyhash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return a_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519keyhash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ed25519keyhash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return a_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class s_{static __wrap(t){const _=Object.create(s_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_ed25519keyhashes_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519keyhashes_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ed25519keyhashes_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return s_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519keyhashes_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519keyhashes_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ed25519keyhashes_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return s_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.ed25519keyhashes_new();return s_.__wrap(t)}len(){return a.ed25519keyhashes_len(this.ptr)>>>0}get(t){const _=a.ed25519keyhashes_get(this.ptr,t);return a_.__wrap(_)}add(t){P(t,a_),a.ed25519keyhashes_add(this.ptr,t.ptr)}}class i_{static __wrap(t){const _=Object.create(i_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_ed25519signature_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519signature_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519signature_to_bech32(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.ed25519signature_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ed25519signature_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return i_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ed25519signature_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return i_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ed25519signature_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return i_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class o_{static __wrap(t){const _=Object.create(o_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_enterpriseaddress_free(t)}static new(t,_){P(_,Fr);const r=a.enterpriseaddress_new(t,_.ptr);return o_.__wrap(r)}payment_cred(){const t=a.enterpriseaddress_payment_cred(this.ptr);return Fr.__wrap(t)}to_address(){const t=a.enterpriseaddress_to_address(this.ptr);return xt.__wrap(t)}static from_address(t){P(t,xt);const _=a.enterpriseaddress_from_address(t.ptr);return 0===_?void 0:o_.__wrap(_)}}class d_{static __wrap(t){const _=Object.create(d_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_exunitprices_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.exunitprices_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.exunitprices_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return d_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.exunitprices_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.exunitprices_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.exunitprices_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return d_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}mem_price(){const t=a.exunitprices_mem_price(this.ptr);return Se.__wrap(t)}step_price(){const t=a.exunitprices_step_price(this.ptr);return Se.__wrap(t)}static new(t,_){P(t,Se),P(_,Se);const r=a.exunitprices_new(t.ptr,_.ptr);return d_.__wrap(r)}}class c_{static __wrap(t){const _=Object.create(c_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_exunits_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.exunits_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.exunits_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return c_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.exunits_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.exunits_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.exunits_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return c_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}mem(){const t=a.exunits_mem(this.ptr);return zt.__wrap(t)}steps(){const t=a.exunits_steps(this.ptr);return zt.__wrap(t)}static new(t,_){P(t,zt),P(_,zt);const r=a.exunits_new(t.ptr,_.ptr);return c_.__wrap(r)}checked_add(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,c_),a.exunits_checked_add(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return c_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static dummy(){const t=a.exunits_dummy();return c_.__wrap(t)}}class p_{static __wrap(t){const _=Object.create(p_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_generaltransactionmetadata_free(t)}add(t){P(t,p_),a.generaltransactionmetadata_add(this.ptr,t.ptr)}add_json_metadatum_with_schema(t,_,r){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,zt);const s=k(_,a.__wbindgen_malloc,a.__wbindgen_realloc),i=g;a.generaltransactionmetadata_add_json_metadatum_with_schema(n,this.ptr,t.ptr,s,i,r);var e=j()[n/4+0];if(j()[n/4+1])throw p(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.generaltransactionmetadata_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.generaltransactionmetadata_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return p_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.generaltransactionmetadata_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.generaltransactionmetadata_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.generaltransactionmetadata_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return p_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.generaltransactionmetadata_new();return p_.__wrap(t)}len(){return a.generaltransactionmetadata_len(this.ptr)>>>0}insert(t,_){P(t,zt),P(_,le);const r=a.generaltransactionmetadata_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:le.__wrap(r)}get(t){P(t,zt);const _=a.generaltransactionmetadata_get(this.ptr,t.ptr);return 0===_?void 0:le.__wrap(_)}keys(){const t=a.generaltransactionmetadata_keys(this.ptr);return be.__wrap(t)}}class w_{static __wrap(t){const _=Object.create(w_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_genesisdelegatehash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.genesisdelegatehash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return w_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.genesisdelegatehash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.genesisdelegatehash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.genesisdelegatehash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return w_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.genesisdelegatehash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.genesisdelegatehash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return w_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class l_{static __wrap(t){const _=Object.create(l_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_genesishash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.genesishash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return l_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.genesishash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.genesishash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.genesishash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return l_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.genesishash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.genesishash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return l_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class b_{static __wrap(t){const _=Object.create(b_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_genesishashes_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.genesishashes_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.genesishashes_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return b_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.genesishashes_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.genesishashes_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.genesishashes_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return b_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.genesishashes_new();return b_.__wrap(t)}len(){return a.genesishashes_len(this.ptr)>>>0}get(t){const _=a.genesishashes_get(this.ptr,t);return l_.__wrap(_)}add(t){P(t,l_),a.genesishashes_add(this.ptr,t.ptr)}}class u_{static __wrap(t){const _=Object.create(u_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_genesiskeydelegation_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.genesiskeydelegation_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.genesiskeydelegation_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return u_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.genesiskeydelegation_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.genesiskeydelegation_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.genesiskeydelegation_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return u_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}genesishash(){const t=a.genesiskeydelegation_genesishash(this.ptr);return l_.__wrap(t)}genesis_delegate_hash(){const t=a.genesiskeydelegation_genesis_delegate_hash(this.ptr);return w_.__wrap(t)}vrf_keyhash(){const t=a.genesiskeydelegation_vrf_keyhash(this.ptr);return Te.__wrap(t)}static new(t,_,r){P(t,l_),P(_,w_),P(r,Te);const e=a.genesiskeydelegation_new(t.ptr,_.ptr,r.ptr);return u_.__wrap(e)}}class y_{static __wrap(t){const _=Object.create(y_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_hdaddresspayload_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.hdaddresspayload_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.hdaddresspayload_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return y_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class g_{static __wrap(t){const _=Object.create(g_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_header_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.header_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.header_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return g_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.header_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.header_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.header_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return g_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}header_body(){const t=a.header_header_body(this.ptr);return f_.__wrap(t)}body_signature(){const t=a.header_body_signature(this.ptr);return j_.__wrap(t)}static new(t,_){P(t,f_),P(_,j_);const r=a.header_new(t.ptr,_.ptr);return g_.__wrap(r)}}class f_{static __wrap(t){const _=Object.create(f_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_headerbody_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.headerbody_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.headerbody_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return f_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.headerbody_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.headerbody_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.headerbody_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return f_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}block_number(){return a.headerbody_block_number(this.ptr)>>>0}slot(){const t=a.headerbody_slot(this.ptr);return zt.__wrap(t)}prev_hash(){const t=a.headerbody_prev_hash(this.ptr);return 0===t?void 0:Mt.__wrap(t)}issuer_vkey(){const t=a.headerbody_issuer_vkey(this.ptr);return Re.__wrap(t)}vrf_vkey(){const t=a.headerbody_vrf_vkey(this.ptr);return Be.__wrap(t)}vrf_result(){const t=a.headerbody_vrf_result(this.ptr);return 0===t?void 0:Ke.__wrap(t)}leader_vrf(){const t=a.headerbody_leader_vrf(this.ptr);return 0===t?void 0:Ke.__wrap(t)}nonce_vrf(){const t=a.headerbody_nonce_vrf(this.ptr);return 0===t?void 0:Ke.__wrap(t)}block_body_size(){return a.headerbody_block_body_size(this.ptr)>>>0}block_body_hash(){const t=a.headerbody_block_body_hash(this.ptr);return Vt.__wrap(t)}operational_cert(){const t=a.headerbody_operational_cert(this.ptr);return J_.__wrap(t)}protocol_version(){const t=a.headerbody_protocol_version(this.ptr);return lr.__wrap(t)}static new(t,_,r,e,n,s,i,o,d,c){P(_,zt);let p=0;m(r)||(P(r,Mt),p=r.ptr,r.ptr=0),P(e,Re),P(n,Be),P(s,Ke),P(o,Vt),P(d,J_),P(c,lr);const w=a.headerbody_new(t,_.ptr,p,e.ptr,n.ptr,s.ptr,i,o.ptr,d.ptr,c.ptr);return f_.__wrap(w)}}class h_{static __wrap(t){const _=Object.create(h_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_inputbuilderresult_free(t)}}class k_{static __wrap(t){const _=Object.create(k_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_int_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.int_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.int_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return k_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){P(t,zt);const _=a.int_new(t.ptr);return k_.__wrap(_)}static new_negative(t){P(t,zt);const _=a.int_new_negative(t.ptr);return k_.__wrap(_)}static new_i32(t){const _=a.int_new_i32(t);return k_.__wrap(_)}is_positive(){return 0!==a.int_is_positive(this.ptr)}as_positive(){const t=a.int_as_positive(this.ptr);return 0===t?void 0:zt.__wrap(t)}as_negative(){const t=a.int_as_negative(this.ptr);return 0===t?void 0:zt.__wrap(t)}as_i32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.int_as_i32(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_i32_or_nothing(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.int_as_i32_or_nothing(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_i32_or_fail(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.int_as_i32_or_fail(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return t}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_str(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.int_to_str(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_str(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.int_from_str(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return k_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class m_{static __wrap(t){const _=Object.create(m_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_ipv4_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ipv4_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ipv4_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return m_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.ipv4_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.ipv4_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ipv4_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return m_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ipv4_new(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return m_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}ip(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ipv4_ip(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class v_{static __wrap(t){const _=Object.create(v_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_ipv6_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ipv6_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ipv6_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return v_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.ipv6_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.ipv6_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.ipv6_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return v_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.ipv6_new(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return v_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}ip(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.ipv6_ip(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class j_{static __wrap(t){const _=Object.create(j_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_kessignature_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.kessignature_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.kessignature_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return j_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class x_{static __wrap(t){const _=Object.create(x_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_kesvkey_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.kesvkey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return x_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.kesvkey_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.kesvkey_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.kesvkey_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return x_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.kesvkey_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.kesvkey_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return x_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class O_{static __wrap(t){const _=Object.create(O_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_language_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.language_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.language_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return O_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_plutus_v1(){const t=a.language_new_plutus_v1();return O_.__wrap(t)}static new_plutus_v2(){const t=a.language_new_plutus_v2();return O_.__wrap(t)}kind(){return a.language_kind(this.ptr)>>>0}}class S_{static __wrap(t){const _=Object.create(S_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_languages_free(t)}static new(){const t=a.languages_new();return S_.__wrap(t)}len(){return a.languages_len(this.ptr)>>>0}get(t){const _=a.languages_get(this.ptr,t);return O_.__wrap(_)}add(t){P(t,O_);var _=t.ptr;t.ptr=0,a.languages_add(this.ptr,_)}}class P_{static __wrap(t){const _=Object.create(P_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_legacydaedalusprivatekey_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.legacydaedalusprivatekey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return P_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.legacydaedalusprivatekey_as_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}chaincode(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.legacydaedalusprivatekey_chaincode(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class A_{static __wrap(t){const _=Object.create(A_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_linearfee_free(t)}constant(){const t=a.linearfee_constant(this.ptr);return zt.__wrap(t)}coefficient(){const t=a.linearfee_coefficient(this.ptr);return zt.__wrap(t)}static new(t,_){P(t,zt),P(_,zt);const r=a.linearfee_new(t.ptr,_.ptr);return A_.__wrap(r)}}class K_{static __wrap(t){const _=Object.create(K_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_mirtostakecredentials_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.mirtostakecredentials_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.mirtostakecredentials_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return K_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.mirtostakecredentials_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.mirtostakecredentials_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.mirtostakecredentials_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return K_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.mirtostakecredentials_new();return K_.__wrap(t)}len(){return a.mirtostakecredentials_len(this.ptr)>>>0}insert(t,_){P(t,Fr),P(_,k_);const r=a.mirtostakecredentials_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:k_.__wrap(r)}get(t){P(t,Fr);const _=a.mirtostakecredentials_get(this.ptr,t.ptr);return 0===_?void 0:k_.__wrap(_)}keys(){const t=a.mirtostakecredentials_keys(this.ptr);return $r.__wrap(t)}}class T_{static __wrap(t){const _=Object.create(T_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_metadatalist_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.metadatalist_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.metadatalist_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return T_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.metadatalist_new();return T_.__wrap(t)}len(){return a.metadatalist_len(this.ptr)>>>0}get(t){const _=a.metadatalist_get(this.ptr,t);return le.__wrap(_)}add(t){P(t,le),a.metadatalist_add(this.ptr,t.ptr)}}class B_{static __wrap(t){const _=Object.create(B_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_metadatamap_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.metadatamap_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.metadatamap_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return B_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.metadatamap_new();return B_.__wrap(t)}len(){return a.metadatamap_len(this.ptr)>>>0}insert(t,_){P(t,le),P(_,le);const r=a.metadatamap_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:le.__wrap(r)}insert_str(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16),s=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),i=g;P(_,le),a.metadatamap_insert_str(n,this.ptr,s,i,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return 0===r?void 0:le.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}insert_i32(t,_){P(_,le);const r=a.metadatamap_insert_i32(this.ptr,t,_.ptr);return 0===r?void 0:le.__wrap(r)}get(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,le),a.metadatamap_get(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return le.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_str(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.metadatamap_get_str(e,this.ptr,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return le.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_i32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.metadatamap_get_i32(e,this.ptr,t);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return le.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}has(t){return P(t,le),0!==a.metadatamap_has(this.ptr,t.ptr)}keys(){const t=a.metadatamap_keys(this.ptr);return T_.__wrap(t)}}class D_{static __wrap(t){const _=Object.create(D_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_mint_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.mint_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.mint_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return D_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.mint_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.mint_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.mint_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return D_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.mint_new();return D_.__wrap(t)}static new_from_entry(t,_){P(t,Kr),P(_,R_);const r=a.mint_new_from_entry(t.ptr,_.ptr);return D_.__wrap(r)}len(){return a.mint_len(this.ptr)>>>0}insert(t,_){P(t,Kr),P(_,R_);const r=a.mint_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:R_.__wrap(r)}get(t){P(t,Kr);const _=a.mint_get(this.ptr,t.ptr);return 0===_?void 0:R_.__wrap(_)}keys(){const t=a.mint_keys(this.ptr);return Tr.__wrap(t)}as_positive_multiasset(){const t=a.mint_as_positive_multiasset(this.ptr);return C_.__wrap(t)}as_negative_multiasset(){const t=a.mint_as_negative_multiasset(this.ptr);return C_.__wrap(t)}}class R_{static __wrap(t){const _=Object.create(R_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_mintassets_free(t)}static new(){const t=a.mintassets_new();return R_.__wrap(t)}static new_from_entry(t,_){P(t,Pt),P(_,k_);var r=_.ptr;_.ptr=0;const e=a.mintassets_new_from_entry(t.ptr,r);return R_.__wrap(e)}len(){return a.mintassets_len(this.ptr)>>>0}insert(t,_){P(t,Pt),P(_,k_);var r=_.ptr;_.ptr=0;const e=a.mintassets_insert(this.ptr,t.ptr,r);return 0===e?void 0:k_.__wrap(e)}get(t){P(t,Pt);const _=a.mintassets_get(this.ptr,t.ptr);return 0===_?void 0:k_.__wrap(_)}keys(){const t=a.mintassets_keys(this.ptr);return At.__wrap(t)}}class q_{static __wrap(t){const _=Object.create(q_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_mintbuilderresult_free(t)}}class z_{static __wrap(t){const _=Object.create(z_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_moveinstantaneousreward_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.moveinstantaneousreward_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.moveinstantaneousreward_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return z_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.moveinstantaneousreward_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.moveinstantaneousreward_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.moveinstantaneousreward_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return z_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_to_other_pot(t,_){P(_,zt);const r=a.moveinstantaneousreward_new_to_other_pot(t,_.ptr);return z_.__wrap(r)}static new_to_stake_creds(t,_){P(_,K_);const r=a.moveinstantaneousreward_new_to_stake_creds(t,_.ptr);return z_.__wrap(r)}pot(){return a.moveinstantaneousreward_pot(this.ptr)>>>0}kind(){return a.moveinstantaneousreward_kind(this.ptr)>>>0}as_to_other_pot(){const t=a.moveinstantaneousreward_as_to_other_pot(this.ptr);return 0===t?void 0:zt.__wrap(t)}as_to_stake_creds(){const t=a.moveinstantaneousreward_as_to_stake_creds(this.ptr);return 0===t?void 0:K_.__wrap(t)}}class H_{static __wrap(t){const _=Object.create(H_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_moveinstantaneousrewardscert_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.moveinstantaneousrewardscert_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.moveinstantaneousrewardscert_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return H_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.moveinstantaneousrewardscert_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.moveinstantaneousrewardscert_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.moveinstantaneousrewardscert_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return H_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}move_instantaneous_reward(){const t=a.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);return z_.__wrap(t)}static new(t){P(t,z_);const _=a.moveinstantaneousrewardscert_new(t.ptr);return H_.__wrap(_)}}class C_{static __wrap(t){const _=Object.create(C_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_multiasset_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.multiasset_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.multiasset_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return C_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.multiasset_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.multiasset_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.multiasset_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return C_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.multiasset_new();return C_.__wrap(t)}len(){return a.multiasset_len(this.ptr)>>>0}insert(t,_){P(t,Kr),P(_,Kt);const r=a.multiasset_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:Kt.__wrap(r)}get(t){P(t,Kr);const _=a.multiasset_get(this.ptr,t.ptr);return 0===_?void 0:Kt.__wrap(_)}set_asset(t,_,r){P(t,Kr),P(_,Pt),P(r,zt);const e=a.multiasset_set_asset(this.ptr,t.ptr,_.ptr,r.ptr);return 0===e?void 0:zt.__wrap(e)}get_asset(t,_){P(t,Kr),P(_,Pt);const r=a.multiasset_get_asset(this.ptr,t.ptr,_.ptr);return zt.__wrap(r)}keys(){const t=a.multiasset_keys(this.ptr);return Tr.__wrap(t)}sub(t){P(t,C_);const _=a.multiasset_sub(this.ptr,t.ptr);return C_.__wrap(_)}}class I_{static __wrap(t){const _=Object.create(I_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_multihostname_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.multihostname_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.multihostname_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return I_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.multihostname_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.multihostname_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.multihostname_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return I_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}dns_name(){const t=a.multihostname_dns_name(this.ptr);return r_.__wrap(t)}static new(t){P(t,r_);const _=a.multihostname_new(t.ptr);return I_.__wrap(_)}}class V_{static __wrap(t){const _=Object.create(V_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_nativescript_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.nativescript_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.nativescript_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return V_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.nativescript_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.nativescript_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.nativescript_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return V_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}hash(){const t=a.nativescript_hash(this.ptr);return Kr.__wrap(t)}static new_script_pubkey(t){P(t,Dr);const _=a.nativescript_new_script_pubkey(t.ptr);return V_.__wrap(_)}static new_script_all(t){P(t,Sr);const _=a.nativescript_new_script_all(t.ptr);return V_.__wrap(_)}static new_script_any(t){P(t,Pr);const _=a.nativescript_new_script_any(t.ptr);return V_.__wrap(_)}static new_script_n_of_k(t){P(t,Br);const _=a.nativescript_new_script_n_of_k(t.ptr);return V_.__wrap(_)}static new_timelock_start(t){P(t,re);const _=a.nativescript_new_timelock_start(t.ptr);return V_.__wrap(_)}static new_timelock_expiry(t){P(t,_e);const _=a.nativescript_new_timelock_expiry(t.ptr);return V_.__wrap(_)}kind(){return a.nativescript_kind(this.ptr)>>>0}as_script_pubkey(){const t=a.nativescript_as_script_pubkey(this.ptr);return 0===t?void 0:Dr.__wrap(t)}as_script_all(){const t=a.nativescript_as_script_all(this.ptr);return 0===t?void 0:Sr.__wrap(t)}as_script_any(){const t=a.nativescript_as_script_any(this.ptr);return 0===t?void 0:Pr.__wrap(t)}as_script_n_of_k(){const t=a.nativescript_as_script_n_of_k(this.ptr);return 0===t?void 0:Br.__wrap(t)}as_timelock_start(){const t=a.nativescript_as_timelock_start(this.ptr);return 0===t?void 0:re.__wrap(t)}as_timelock_expiry(){const t=a.nativescript_as_timelock_expiry(this.ptr);return 0===t?void 0:_e.__wrap(t)}get_required_signers(){const t=a.nativescript_get_required_signers(this.ptr);return s_.__wrap(t)}}class M_{static __wrap(t){const _=Object.create(M_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_nativescriptwitnessinfo_free(t)}static num_signatures(t){const _=a.nativescriptwitnessinfo_num_signatures(t);return M_.__wrap(_)}static vkeys(t){P(t,s_);const _=a.nativescriptwitnessinfo_vkeys(t.ptr);return M_.__wrap(_)}static assume_signature_count(){const t=a.nativescriptwitnessinfo_assume_signature_count();return M_.__wrap(t)}}class N_{static __wrap(t){const _=Object.create(N_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_nativescripts_free(t)}static new(){const t=a.nativescripts_new();return N_.__wrap(t)}len(){return a.nativescripts_len(this.ptr)>>>0}get(t){const _=a.nativescripts_get(this.ptr,t);return V_.__wrap(_)}add(t){P(t,V_),a.nativescripts_add(this.ptr,t.ptr)}}class L_{static __wrap(t){const _=Object.create(L_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_networkid_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.networkid_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.networkid_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return L_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.networkid_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.networkid_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.networkid_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return L_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static testnet(){const t=a.networkid_testnet();return L_.__wrap(t)}static mainnet(){const t=a.networkid_mainnet();return L_.__wrap(t)}kind(){return a.networkid_kind(this.ptr)>>>0}}class E_{static __wrap(t){const _=Object.create(E_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_networkinfo_free(t)}static new(t,_){const r=a.networkinfo_new(t,_);return E_.__wrap(r)}network_id(){return a.networkinfo_network_id(this.ptr)}protocol_magic(){return a.networkinfo_protocol_magic(this.ptr)>>>0}static testnet(){const t=a.networkinfo_testnet();return E_.__wrap(t)}static mainnet(){const t=a.networkinfo_mainnet();return E_.__wrap(t)}}class W_{static __wrap(t){const _=Object.create(W_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_nonce_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.nonce_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.nonce_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return W_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_identity(){const t=a.nonce_new_identity();return W_.__wrap(t)}static new_from_hash(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.nonce_new_from_hash(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return W_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_hash(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.nonce_get_hash(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];let e;return 0!==t&&(e=O(t,_).slice(),a.__wbindgen_free(t,1*_)),e}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class J_{static __wrap(t){const _=Object.create(J_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_operationalcert_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.operationalcert_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.operationalcert_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return J_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.operationalcert_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.operationalcert_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.operationalcert_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return J_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}hot_vkey(){const t=a.operationalcert_hot_vkey(this.ptr);return x_.__wrap(t)}sequence_number(){return a.operationalcert_sequence_number(this.ptr)>>>0}kes_period(){return a.operationalcert_kes_period(this.ptr)>>>0}sigma(){const t=a.operationalcert_sigma(this.ptr);return i_.__wrap(t)}static new(t,_,r,e){P(t,x_),P(e,i_);const n=a.operationalcert_new(t.ptr,_,r,e.ptr);return J_.__wrap(n)}}class Y_{static __wrap(t){const _=Object.create(Y_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_partialplutuswitness_free(t)}static new(t,_){P(t,Q_),P(_,F_);const r=a.partialplutuswitness_new(t.ptr,_.ptr);return Y_.__wrap(r)}script(){const t=a.partialplutuswitness_script(this.ptr);return Q_.__wrap(t)}data(){const t=a.partialplutuswitness_data(this.ptr);return F_.__wrap(t)}}class F_{static __wrap(t){const _=Object.create(F_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusdata_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusdata_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutusdata_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return F_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_constr_plutus_data(t){P(t,Qt);const _=a.plutusdata_new_constr_plutus_data(t.ptr);return F_.__wrap(_)}static new_map(t){P(t,U_);const _=a.plutusdata_new_map(t.ptr);return F_.__wrap(_)}static new_list(t){P(t,$_);const _=a.plutusdata_new_list(t.ptr);return F_.__wrap(_)}static new_integer(t){P(t,qt);const _=a.plutusdata_new_integer(t.ptr);return F_.__wrap(_)}static new_bytes(t){const _=S(t,a.__wbindgen_malloc),r=g,e=a.plutusdata_new_bytes(_,r);return F_.__wrap(e)}kind(){return a.plutusdata_kind(this.ptr)>>>0}as_constr_plutus_data(){const t=a.plutusdata_as_constr_plutus_data(this.ptr);return 0===t?void 0:Qt.__wrap(t)}as_map(){const t=a.plutusdata_as_map(this.ptr);return 0===t?void 0:U_.__wrap(t)}as_list(){const t=a.plutusdata_as_list(this.ptr);return 0===t?void 0:$_.__wrap(t)}as_integer(){const t=a.plutusdata_as_integer(this.ptr);return 0===t?void 0:qt.__wrap(t)}as_bytes(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.plutusdata_as_bytes(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];let e;return 0!==t&&(e=O(t,_).slice(),a.__wbindgen_free(t,1*_)),e}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class $_{static __wrap(t){const _=Object.create($_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutuslist_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutuslist_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutuslist_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return $_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.plutuslist_new();return $_.__wrap(t)}len(){return a.plutuslist_len(this.ptr)>>>0}get(t){const _=a.plutuslist_get(this.ptr,t);return F_.__wrap(_)}add(t){P(t,F_),a.plutuslist_add(this.ptr,t.ptr)}}class U_{static __wrap(t){const _=Object.create(U_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusmap_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusmap_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutusmap_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return U_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.plutusmap_new();return U_.__wrap(t)}len(){return a.plutusmap_len(this.ptr)>>>0}insert(t,_){P(t,F_),P(_,F_);const r=a.plutusmap_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:F_.__wrap(r)}get(t){P(t,F_);const _=a.plutusmap_get(this.ptr,t.ptr);return 0===_?void 0:F_.__wrap(_)}keys(){const t=a.plutusmap_keys(this.ptr);return $_.__wrap(t)}}class X_{static __wrap(t){const _=Object.create(X_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusscript_free(t)}static from_v1(t){P(t,Z_);const _=a.plutusscript_from_v1(t.ptr);return X_.__wrap(_)}static from_v2(t){P(t,tr);const _=a.plutusscript_from_v2(t.ptr);return X_.__wrap(_)}hash(){const t=a.plutusscript_hash(this.ptr);return Kr.__wrap(t)}}class Q_{static __wrap(t){const _=Object.create(Q_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusscriptwitness_free(t)}static from_script(t){P(t,X_);var _=t.ptr;t.ptr=0;const r=a.plutusscriptwitness_from_script(_);return Q_.__wrap(r)}static from_ref(t){P(t,Kr);var _=t.ptr;t.ptr=0;const r=a.plutusscriptwitness_from_ref(_);return Q_.__wrap(r)}script(){const t=a.plutusscriptwitness_script(this.ptr);return 0===t?void 0:X_.__wrap(t)}hash(){const t=a.plutusscriptwitness_hash(this.ptr);return Kr.__wrap(t)}}class Z_{static __wrap(t){const _=Object.create(Z_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusv1script_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1script_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutusv1script_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Z_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1script_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1script_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.plutusv1script_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Z_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}hash(){const t=a.plutusv1script_hash(this.ptr);return Kr.__wrap(t)}static new(t){const _=S(t,a.__wbindgen_malloc),r=g,e=a.plutusv1script_new(_,r);return Z_.__wrap(e)}bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1script_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class G_{static __wrap(t){const _=Object.create(G_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusv1scripts_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1scripts_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutusv1scripts_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return G_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1scripts_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv1scripts_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.plutusv1scripts_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return G_.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.plutusv1scripts_new();return G_.__wrap(t)}len(){return a.plutusv1scripts_len(this.ptr)>>>0}get(t){const _=a.plutusv1scripts_get(this.ptr,t);return Z_.__wrap(_)}add(t){P(t,Z_),a.plutusv1scripts_add(this.ptr,t.ptr)}}class tr{static __wrap(t){const _=Object.create(tr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusv2script_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2script_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutusv2script_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return tr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2script_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2script_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.plutusv2script_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return tr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}hash(){const t=a.plutusv2script_hash(this.ptr);return Kr.__wrap(t)}static new(t){const _=S(t,a.__wbindgen_malloc),r=g,e=a.plutusv2script_new(_,r);return tr.__wrap(e)}bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2script_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class _r{static __wrap(t){const _=Object.create(_r.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_plutusv2scripts_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2scripts_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.plutusv2scripts_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return _r.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2scripts_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.plutusv2scripts_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.plutusv2scripts_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return _r.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.plutusv2scripts_new();return _r.__wrap(t)}len(){return a.plutusv2scripts_len(this.ptr)>>>0}get(t){const _=a.plutusv2scripts_get(this.ptr,t);return tr.__wrap(_)}add(t){P(t,tr),a.plutusv2scripts_add(this.ptr,t.ptr)}}class rr{static __wrap(t){const _=Object.create(rr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_pointer_free(t)}static new(t,_,r){P(t,zt),P(_,zt),P(r,zt);const e=a.pointer_new(t.ptr,_.ptr,r.ptr);return rr.__wrap(e)}slot(){const t=a.pointer_slot(this.ptr);return zt.__wrap(t)}tx_index(){const t=a.pointer_tx_index(this.ptr);return zt.__wrap(t)}cert_index(){const t=a.pointer_cert_index(this.ptr);return zt.__wrap(t)}}class er{static __wrap(t){const _=Object.create(er.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_pointeraddress_free(t)}static new(t,_,r){P(_,Fr),P(r,rr);const e=a.pointeraddress_new(t,_.ptr,r.ptr);return er.__wrap(e)}payment_cred(){const t=a.pointeraddress_payment_cred(this.ptr);return Fr.__wrap(t)}stake_pointer(){const t=a.pointeraddress_stake_pointer(this.ptr);return rr.__wrap(t)}to_address(){const t=a.pointeraddress_to_address(this.ptr);return xt.__wrap(t)}static from_address(t){P(t,xt);const _=a.pointeraddress_from_address(t.ptr);return 0===_?void 0:er.__wrap(_)}}class nr{static __wrap(t){const _=Object.create(nr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_poolmetadata_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.poolmetadata_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.poolmetadata_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return nr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.poolmetadata_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.poolmetadata_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.poolmetadata_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return nr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}url(){const t=a.poolmetadata_url(this.ptr);return Oe.__wrap(t)}pool_metadata_hash(){const t=a.poolmetadata_pool_metadata_hash(this.ptr);return ar.__wrap(t)}static new(t,_){P(t,Oe),P(_,ar);const r=a.poolmetadata_new(t.ptr,_.ptr);return nr.__wrap(r)}}class ar{static __wrap(t){const _=Object.create(ar.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_poolmetadatahash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.poolmetadatahash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ar.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.poolmetadatahash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.poolmetadatahash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.poolmetadatahash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ar.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.poolmetadatahash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.poolmetadatahash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ar.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class sr{static __wrap(t){const _=Object.create(sr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_poolparams_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.poolparams_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.poolparams_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return sr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.poolparams_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.poolparams_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.poolparams_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return sr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}operator(){const t=a.poolparams_operator(this.ptr);return a_.__wrap(t)}vrf_keyhash(){const t=a.poolparams_vrf_keyhash(this.ptr);return Te.__wrap(t)}pledge(){const t=a.poolparams_pledge(this.ptr);return zt.__wrap(t)}cost(){const t=a.poolparams_cost(this.ptr);return zt.__wrap(t)}margin(){const t=a.poolparams_margin(this.ptr);return Se.__wrap(t)}reward_account(){const t=a.poolparams_reward_account(this.ptr);return jr.__wrap(t)}pool_owners(){const t=a.poolparams_pool_owners(this.ptr);return s_.__wrap(t)}relays(){const t=a.poolparams_relays(this.ptr);return mr.__wrap(t)}pool_metadata(){const t=a.poolparams_pool_metadata(this.ptr);return 0===t?void 0:nr.__wrap(t)}static new(t,_,r,e,n,s,i,o,d){P(t,a_),P(_,Te),P(r,zt),P(e,zt),P(n,Se),P(s,jr),P(i,s_),P(o,mr);let c=0;m(d)||(P(d,nr),c=d.ptr,d.ptr=0);const p=a.poolparams_new(t.ptr,_.ptr,r.ptr,e.ptr,n.ptr,s.ptr,i.ptr,o.ptr,c);return sr.__wrap(p)}}class ir{static __wrap(t){const _=Object.create(ir.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_poolregistration_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.poolregistration_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.poolregistration_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ir.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.poolregistration_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.poolregistration_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.poolregistration_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ir.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}pool_params(){const t=a.poolregistration_pool_params(this.ptr);return sr.__wrap(t)}static new(t){P(t,sr);const _=a.poolregistration_new(t.ptr);return ir.__wrap(_)}}class or{static __wrap(t){const _=Object.create(or.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_poolretirement_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.poolretirement_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.poolretirement_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return or.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.poolretirement_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.poolretirement_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.poolretirement_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return or.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}pool_keyhash(){const t=a.poolretirement_pool_keyhash(this.ptr);return a_.__wrap(t)}epoch(){return a.poolretirement_epoch(this.ptr)>>>0}static new(t,_){P(t,a_);const r=a.poolretirement_new(t.ptr,_);return or.__wrap(r)}}class dr{static __wrap(t){const _=Object.create(dr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_privatekey_free(t)}to_public(){const t=a.privatekey_to_public(this.ptr);return br.__wrap(t)}static generate_ed25519(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.privatekey_generate_ed25519(r);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return dr.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static generate_ed25519extended(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.privatekey_generate_ed25519extended(r);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return dr.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.privatekey_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return dr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.privatekey_to_bech32(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}as_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.privatekey_as_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_extended_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.privatekey_from_extended_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return dr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_normal_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.privatekey_from_normal_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return dr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}sign(t){const _=S(t,a.__wbindgen_malloc),r=g,e=a.privatekey_sign(this.ptr,_,r);return i_.__wrap(e)}}class cr{static __wrap(t){const _=Object.create(cr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_proposedprotocolparameterupdates_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.proposedprotocolparameterupdates_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.proposedprotocolparameterupdates_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return cr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.proposedprotocolparameterupdates_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.proposedprotocolparameterupdates_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.proposedprotocolparameterupdates_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return cr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.proposedprotocolparameterupdates_new();return cr.__wrap(t)}len(){return a.proposedprotocolparameterupdates_len(this.ptr)>>>0}insert(t,_){P(t,l_),P(_,wr);const r=a.proposedprotocolparameterupdates_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:wr.__wrap(r)}get(t){P(t,l_);const _=a.proposedprotocolparameterupdates_get(this.ptr,t.ptr);return 0===_?void 0:wr.__wrap(_)}keys(){const t=a.proposedprotocolparameterupdates_keys(this.ptr);return b_.__wrap(t)}}class pr{static __wrap(t){const _=Object.create(pr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_protocolmagic_free(t)}static new(t){const _=a.protocolmagic_new(t);return pr.__wrap(_)}value(){return a.protocolmagic_value(this.ptr)>>>0}}class wr{static __wrap(t){const _=Object.create(wr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_protocolparamupdate_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.protocolparamupdate_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return wr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.protocolparamupdate_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return wr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_minfee_a(t){P(t,zt),a.protocolparamupdate_set_minfee_a(this.ptr,t.ptr)}minfee_a(){const t=a.protocolparamupdate_minfee_a(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_minfee_b(t){P(t,zt),a.protocolparamupdate_set_minfee_b(this.ptr,t.ptr)}minfee_b(){const t=a.protocolparamupdate_minfee_b(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_max_block_body_size(t){a.protocolparamupdate_set_max_block_body_size(this.ptr,t)}max_block_body_size(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_max_block_body_size(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_max_tx_size(t){a.protocolparamupdate_set_max_tx_size(this.ptr,t)}max_tx_size(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_max_tx_size(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_max_block_header_size(t){a.protocolparamupdate_set_max_block_header_size(this.ptr,t)}max_block_header_size(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_max_block_header_size(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_key_deposit(t){P(t,zt),a.protocolparamupdate_set_key_deposit(this.ptr,t.ptr)}key_deposit(){const t=a.protocolparamupdate_key_deposit(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_pool_deposit(t){P(t,zt),a.protocolparamupdate_set_pool_deposit(this.ptr,t.ptr)}pool_deposit(){const t=a.protocolparamupdate_pool_deposit(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_max_epoch(t){a.protocolparamupdate_set_max_epoch(this.ptr,t)}max_epoch(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_max_epoch(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_n_opt(t){a.protocolparamupdate_set_n_opt(this.ptr,t)}n_opt(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_n_opt(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_pool_pledge_influence(t){P(t,Se),a.protocolparamupdate_set_pool_pledge_influence(this.ptr,t.ptr)}pool_pledge_influence(){const t=a.protocolparamupdate_pool_pledge_influence(this.ptr);return 0===t?void 0:Se.__wrap(t)}set_expansion_rate(t){P(t,Se),a.protocolparamupdate_set_expansion_rate(this.ptr,t.ptr)}expansion_rate(){const t=a.protocolparamupdate_expansion_rate(this.ptr);return 0===t?void 0:Se.__wrap(t)}set_treasury_growth_rate(t){P(t,Se),a.protocolparamupdate_set_treasury_growth_rate(this.ptr,t.ptr)}treasury_growth_rate(){const t=a.protocolparamupdate_treasury_growth_rate(this.ptr);return 0===t?void 0:Se.__wrap(t)}set_d(t){P(t,Se),a.protocolparamupdate_set_d(this.ptr,t.ptr)}d(){const t=a.protocolparamupdate_d(this.ptr);return 0===t?void 0:Se.__wrap(t)}set_extra_entropy(t){P(t,W_),a.protocolparamupdate_set_extra_entropy(this.ptr,t.ptr)}extra_entropy(){const t=a.protocolparamupdate_extra_entropy(this.ptr);return 0===t?void 0:W_.__wrap(t)}set_protocol_version(t){P(t,lr),a.protocolparamupdate_set_protocol_version(this.ptr,t.ptr)}protocol_version(){const t=a.protocolparamupdate_protocol_version(this.ptr);return 0===t?void 0:lr.__wrap(t)}set_min_pool_cost(t){P(t,zt),a.protocolparamupdate_set_min_pool_cost(this.ptr,t.ptr)}min_pool_cost(){const t=a.protocolparamupdate_min_pool_cost(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_ada_per_utxo_byte(t){P(t,zt),a.protocolparamupdate_set_ada_per_utxo_byte(this.ptr,t.ptr)}ada_per_utxo_byte(){const t=a.protocolparamupdate_ada_per_utxo_byte(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_cost_models(t){P(t,Gt),a.protocolparamupdate_set_cost_models(this.ptr,t.ptr)}cost_models(){const t=a.protocolparamupdate_cost_models(this.ptr);return 0===t?void 0:Gt.__wrap(t)}set_execution_costs(t){P(t,d_),a.protocolparamupdate_set_execution_costs(this.ptr,t.ptr)}execution_costs(){const t=a.protocolparamupdate_execution_costs(this.ptr);return 0===t?void 0:d_.__wrap(t)}set_max_tx_ex_units(t){P(t,c_),a.protocolparamupdate_set_max_tx_ex_units(this.ptr,t.ptr)}max_tx_ex_units(){const t=a.protocolparamupdate_max_tx_ex_units(this.ptr);return 0===t?void 0:c_.__wrap(t)}set_max_block_ex_units(t){P(t,c_),a.protocolparamupdate_set_max_block_ex_units(this.ptr,t.ptr)}max_block_ex_units(){const t=a.protocolparamupdate_max_block_ex_units(this.ptr);return 0===t?void 0:c_.__wrap(t)}set_max_value_size(t){a.protocolparamupdate_set_max_value_size(this.ptr,t)}max_value_size(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_max_value_size(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_collateral_percentage(t){a.protocolparamupdate_set_collateral_percentage(this.ptr,t)}collateral_percentage(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_collateral_percentage(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_max_collateral_inputs(t){a.protocolparamupdate_set_max_collateral_inputs(this.ptr,t)}max_collateral_inputs(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolparamupdate_max_collateral_inputs(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return 0===t?void 0:_>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.protocolparamupdate_new();return wr.__wrap(t)}}class lr{static __wrap(t){const _=Object.create(lr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_protocolversion_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.protocolversion_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.protocolversion_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return lr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.protocolversion_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.protocolversion_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.protocolversion_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return lr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}major(){return a.protocolversion_major(this.ptr)>>>0}minor(){return a.protocolversion_minor(this.ptr)>>>0}static new(t,_){const r=a.protocolversion_new(t,_);return lr.__wrap(r)}}class br{static __wrap(t){const _=Object.create(br.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_publickey_free(t)}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.publickey_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return br.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.publickey_to_bech32(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}as_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.publickey_as_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.publickey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return br.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}verify(t,_){const r=S(t,a.__wbindgen_malloc),e=g;return P(_,i_),0!==a.publickey_verify(this.ptr,r,e,_.ptr)}hash(){const t=a.publickey_hash(this.ptr);return a_.__wrap(t)}}class ur{static __wrap(t){const _=Object.create(ur.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_publickeys_free(t)}constructor(){const t=a.publickeys_new();return ur.__wrap(t)}size(){return a.publickeys_size(this.ptr)>>>0}get(t){const _=a.publickeys_get(this.ptr,t);return br.__wrap(_)}add(t){P(t,br),a.publickeys_add(this.ptr,t.ptr)}}class yr{static __wrap(t){const _=Object.create(yr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_redeemer_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.redeemer_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.redeemer_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return yr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}tag(){const t=a.redeemer_tag(this.ptr);return gr.__wrap(t)}index(){const t=a.redeemer_index(this.ptr);return zt.__wrap(t)}data(){const t=a.redeemer_data(this.ptr);return F_.__wrap(t)}ex_units(){const t=a.redeemer_ex_units(this.ptr);return c_.__wrap(t)}static new(t,_,r,e){P(t,gr),P(_,zt),P(r,F_),P(e,c_);const n=a.redeemer_new(t.ptr,_.ptr,r.ptr,e.ptr);return yr.__wrap(n)}}class gr{static __wrap(t){const _=Object.create(gr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_redeemertag_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.redeemertag_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.redeemertag_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return gr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_spend(){const t=a.redeemertag_new_spend();return gr.__wrap(t)}static new_mint(){const t=a.redeemertag_new_mint();return gr.__wrap(t)}static new_cert(){const t=a.redeemertag_new_cert();return gr.__wrap(t)}static new_reward(){const t=a.redeemertag_new_reward();return gr.__wrap(t)}kind(){return a.redeemertag_kind(this.ptr)>>>0}}class fr{static __wrap(t){const _=Object.create(fr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_redeemerwitnesskey_free(t)}tag(){const t=a.redeemerwitnesskey_tag(this.ptr);return gr.__wrap(t)}index(){const t=a.redeemerwitnesskey_index(this.ptr);return zt.__wrap(t)}static new(t,_){P(t,gr),P(_,zt);const r=a.redeemerwitnesskey_new(t.ptr,_.ptr);return fr.__wrap(r)}}class hr{static __wrap(t){const _=Object.create(hr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_redeemers_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.redeemers_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.redeemers_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return hr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.redeemers_new();return hr.__wrap(t)}len(){return a.redeemers_len(this.ptr)>>>0}get(t){const _=a.redeemers_get(this.ptr,t);return yr.__wrap(_)}add(t){P(t,yr),a.redeemers_add(this.ptr,t.ptr)}get_total_ex_units(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.redeemers_get_total_ex_units(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return c_.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class kr{static __wrap(t){const _=Object.create(kr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_relay_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.relay_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.relay_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return kr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.relay_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.relay_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.relay_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return kr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_single_host_addr(t){P(t,Hr);const _=a.relay_new_single_host_addr(t.ptr);return kr.__wrap(_)}static new_single_host_name(t){P(t,Cr);const _=a.relay_new_single_host_name(t.ptr);return kr.__wrap(_)}static new_multi_host_name(t){P(t,I_);const _=a.relay_new_multi_host_name(t.ptr);return kr.__wrap(_)}kind(){return a.relay_kind(this.ptr)>>>0}as_single_host_addr(){const t=a.relay_as_single_host_addr(this.ptr);return 0===t?void 0:Hr.__wrap(t)}as_single_host_name(){const t=a.relay_as_single_host_name(this.ptr);return 0===t?void 0:Cr.__wrap(t)}as_multi_host_name(){const t=a.relay_as_multi_host_name(this.ptr);return 0===t?void 0:I_.__wrap(t)}}class mr{static __wrap(t){const _=Object.create(mr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_relays_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.relays_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.relays_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return mr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.relays_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.relays_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.relays_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return mr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.relays_new();return mr.__wrap(t)}len(){return a.relays_len(this.ptr)>>>0}get(t){const _=a.relays_get(this.ptr,t);return kr.__wrap(_)}add(t){P(t,kr),a.relays_add(this.ptr,t.ptr)}}class vr{static __wrap(t){const _=Object.create(vr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_requiredwitnessset_free(t)}add_vkey(t){P(t,ze),a.requiredwitnessset_add_vkey(this.ptr,t.ptr)}add_vkey_key(t){P(t,Re),a.requiredwitnessset_add_vkey_key(this.ptr,t.ptr)}add_vkey_key_hash(t){P(t,a_),a.requiredwitnessset_add_vkey_key_hash(this.ptr,t.ptr)}add_bootstrap(t){P(t,Jt),a.requiredwitnessset_add_bootstrap(this.ptr,t.ptr)}add_script_ref(t){P(t,Kr),a.requiredwitnessset_add_script_ref(this.ptr,t.ptr)}add_native_script(t){P(t,V_),a.requiredwitnessset_add_native_script(this.ptr,t.ptr)}add_script_hash(t){P(t,Kr),a.requiredwitnessset_add_script_hash(this.ptr,t.ptr)}add_plutus_script(t){P(t,X_),a.requiredwitnessset_add_plutus_script(this.ptr,t.ptr)}add_plutus_datum(t){P(t,F_),a.requiredwitnessset_add_plutus_datum(this.ptr,t.ptr)}add_plutus_datum_hash(t){P(t,e_),a.requiredwitnessset_add_plutus_datum_hash(this.ptr,t.ptr)}add_redeemer(t){P(t,yr),a.requiredwitnessset_add_redeemer(this.ptr,t.ptr)}add_redeemer_tag(t){P(t,fr),a.requiredwitnessset_add_redeemer_tag(this.ptr,t.ptr)}add_all(t){P(t,vr),a.requiredwitnessset_add_all(this.ptr,t.ptr)}static new(){const t=a.requiredwitnessset_new();return vr.__wrap(t)}}class jr{static __wrap(t){const _=Object.create(jr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rewardaddress_free(t)}static new(t,_){P(_,Fr);const r=a.rewardaddress_new(t,_.ptr);return jr.__wrap(r)}payment_cred(){const t=a.rewardaddress_payment_cred(this.ptr);return Fr.__wrap(t)}to_address(){const t=a.rewardaddress_to_address(this.ptr);return xt.__wrap(t)}static from_address(t){P(t,xt);const _=a.rewardaddress_from_address(t.ptr);return 0===_?void 0:jr.__wrap(_)}}class xr{static __wrap(t){const _=Object.create(xr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rewardaddresses_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.rewardaddresses_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.rewardaddresses_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return xr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rewardaddresses_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.rewardaddresses_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.rewardaddresses_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return xr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.rewardaddresses_new();return xr.__wrap(t)}len(){return a.rewardaddresses_len(this.ptr)>>>0}get(t){const _=a.rewardaddresses_get(this.ptr,t);return jr.__wrap(_)}add(t){P(t,jr),a.rewardaddresses_add(this.ptr,t.ptr)}}class Or{static __wrap(t){const _=Object.create(Or.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_script_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.script_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.script_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Or.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.script_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.script_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.script_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Or.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_native(t){P(t,V_);const _=a.script_new_native(t.ptr);return Or.__wrap(_)}static new_plutus_v1(t){P(t,Z_);const _=a.script_new_plutus_v1(t.ptr);return Or.__wrap(_)}static new_plutus_v2(t){P(t,tr);const _=a.script_new_plutus_v2(t.ptr);return Or.__wrap(_)}kind(){return a.script_kind(this.ptr)>>>0}as_native(){const t=a.script_as_native(this.ptr);return 0===t?void 0:V_.__wrap(t)}as_plutus_v1(){const t=a.script_as_plutus_v1(this.ptr);return 0===t?void 0:Z_.__wrap(t)}as_plutus_v2(){const t=a.script_as_plutus_v2(this.ptr);return 0===t?void 0:tr.__wrap(t)}hash(){const t=a.script_hash(this.ptr);return Kr.__wrap(t)}}class Sr{static __wrap(t){const _=Object.create(Sr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scriptall_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scriptall_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scriptall_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Sr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.scriptall_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scriptall_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptall_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Sr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}native_scripts(){const t=a.scriptall_native_scripts(this.ptr);return N_.__wrap(t)}static new(t){P(t,N_);const _=a.scriptall_new(t.ptr);return Sr.__wrap(_)}}class Pr{static __wrap(t){const _=Object.create(Pr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scriptany_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scriptany_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scriptany_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Pr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.scriptany_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scriptany_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptany_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Pr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}native_scripts(){const t=a.scriptany_native_scripts(this.ptr);return N_.__wrap(t)}static new(t){P(t,N_);const _=a.scriptany_new(t.ptr);return Pr.__wrap(_)}}class Ar{static __wrap(t){const _=Object.create(Ar.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scriptdatahash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scriptdatahash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ar.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scriptdatahash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.scriptdatahash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptdatahash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ar.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scriptdatahash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptdatahash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ar.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Kr{static __wrap(t){const _=Object.create(Kr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scripthash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scripthash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Kr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scripthash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.scripthash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scripthash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Kr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scripthash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scripthash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Kr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Tr{static __wrap(t){const _=Object.create(Tr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scripthashes_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scripthashes_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scripthashes_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Tr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.scripthashes_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scripthashes_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scripthashes_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Tr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.scripthashes_new();return Tr.__wrap(t)}len(){return a.scripthashes_len(this.ptr)>>>0}get(t){const _=a.scripthashes_get(this.ptr,t);return Kr.__wrap(_)}add(t){P(t,Kr),a.scripthashes_add(this.ptr,t.ptr)}}class Br{static __wrap(t){const _=Object.create(Br.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scriptnofk_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scriptnofk_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scriptnofk_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Br.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.scriptnofk_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scriptnofk_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptnofk_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Br.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}n(){return a.scriptnofk_n(this.ptr)>>>0}native_scripts(){const t=a.scriptnofk_native_scripts(this.ptr);return N_.__wrap(t)}static new(t,_){P(_,N_);const r=a.scriptnofk_new(t,_.ptr);return Br.__wrap(r)}}class Dr{static __wrap(t){const _=Object.create(Dr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scriptpubkey_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scriptpubkey_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scriptpubkey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Dr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.scriptpubkey_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scriptpubkey_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptpubkey_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Dr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}addr_keyhash(){const t=a.scriptpubkey_addr_keyhash(this.ptr);return a_.__wrap(t)}static new(t){P(t,a_);const _=a.scriptpubkey_new(t.ptr);return Dr.__wrap(_)}}class Rr{static __wrap(t){const _=Object.create(Rr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_scriptref_free(t)}static new(t){P(t,Or);const _=a.scriptref_new(t.ptr);return Rr.__wrap(_)}script(){const t=a.scriptref_script(this.ptr);return Or.__wrap(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.scriptref_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.scriptref_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Rr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.scriptref_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.scriptref_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.scriptref_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Rr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class qr{static __wrap(t){const _=Object.create(qr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_signedtxbuilder_free(t)}static new_with_data(t,_,r,e){P(t,ae),P(_,ve),P(e,Tt);const n=a.signedtxbuilder_new_with_data(t.ptr,_.ptr,r,e.ptr);return qr.__wrap(n)}static new_without_data(t,_,r){P(t,ae),P(_,ve);const e=a.signedtxbuilder_new_without_data(t.ptr,_.ptr,r);return qr.__wrap(e)}build_checked(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.signedtxbuilder_build_checked(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return ee.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}build_unchecked(){const t=a.signedtxbuilder_build_unchecked(this.ptr);return ee.__wrap(t)}add_vkey(t){P(t,ze),a.signedtxbuilder_add_vkey(this.ptr,t.ptr)}add_bootstrap(t){P(t,Lt),a.signedtxbuilder_add_bootstrap(this.ptr,t.ptr)}body(){const t=a.signedtxbuilder_body(this.ptr);return ae.__wrap(t)}witness_set(){const t=a.signedtxbuilder_witness_set(this.ptr);return ve.__wrap(t)}is_valid(){return 0!==a.signedtxbuilder_is_valid(this.ptr)}auxiliary_data(){const t=a.signedtxbuilder_auxiliary_data(this.ptr);return 0===t?void 0:Tt.__wrap(t)}}class zr{static __wrap(t){const _=Object.create(zr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singlecertificatebuilder_free(t)}static new(t){P(t,$t);const _=a.singlecertificatebuilder_new(t.ptr);return zr.__wrap(_)}skip_witness(){const t=a.singlecertificatebuilder_skip_witness(this.ptr);return Ut.__wrap(t)}payment_key(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.singlecertificatebuilder_payment_key(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return Ut.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}native_script(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,V_),P(_,M_),a.singlecertificatebuilder_native_script(n,this.ptr,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return Ut.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}plutus_script(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,Y_),P(_,s_),a.singlecertificatebuilder_plutus_script(n,this.ptr,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return Ut.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Hr{static __wrap(t){const _=Object.create(Hr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singlehostaddr_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.singlehostaddr_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.singlehostaddr_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Hr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.singlehostaddr_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.singlehostaddr_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.singlehostaddr_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Hr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}port(){const t=a.singlehostaddr_port(this.ptr);return 16777215===t?void 0:t}ipv4(){const t=a.singlehostaddr_ipv4(this.ptr);return 0===t?void 0:m_.__wrap(t)}ipv6(){const t=a.singlehostaddr_ipv6(this.ptr);return 0===t?void 0:v_.__wrap(t)}static new(t,_,r){let e=0;m(_)||(P(_,m_),e=_.ptr,_.ptr=0);let n=0;m(r)||(P(r,v_),n=r.ptr,r.ptr=0);const s=a.singlehostaddr_new(m(t)?16777215:t,e,n);return Hr.__wrap(s)}}class Cr{static __wrap(t){const _=Object.create(Cr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singlehostname_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.singlehostname_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.singlehostname_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Cr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.singlehostname_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.singlehostname_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.singlehostname_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Cr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}port(){const t=a.singlehostname_port(this.ptr);return 16777215===t?void 0:t}dns_name(){const t=a.singlehostname_dns_name(this.ptr);return __.__wrap(t)}static new(t,_){P(_,__);const r=a.singlehostname_new(m(t)?16777215:t,_.ptr);return Cr.__wrap(r)}}class Ir{static __wrap(t){const _=Object.create(Ir.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singleinputbuilder_free(t)}static new(t,_){P(t,pe),P(_,ue);const r=a.singleinputbuilder_new(t.ptr,_.ptr);return Ir.__wrap(r)}payment_key(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.singleinputbuilder_payment_key(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return h_.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}native_script(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,V_),P(_,M_),a.singleinputbuilder_native_script(n,this.ptr,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return h_.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}plutus_script(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,Y_),P(_,s_),P(r,F_),a.singleinputbuilder_plutus_script(s,this.ptr,t.ptr,_.ptr,r.ptr);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return h_.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Vr{static __wrap(t){const _=Object.create(Vr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singlekeydistr_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.singlekeydistr_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.singlekeydistr_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Vr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.singlekeydistr_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.singlekeydistr_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.singlekeydistr_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Vr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}stakeholder_id(){const t=a.singlekeydistr_stakeholder_id(this.ptr);return Gr.__wrap(t)}static new(t){P(t,Gr);const _=a.singlekeydistr_new(t.ptr);return Vr.__wrap(_)}}class Mr{static __wrap(t){const _=Object.create(Mr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singlemintbuilder_free(t)}static new(t){P(t,R_);const _=a.singlemintbuilder_new(t.ptr);return Mr.__wrap(_)}native_script(t,_){P(t,V_),P(_,M_);const r=a.singlemintbuilder_native_script(this.ptr,t.ptr,_.ptr);return q_.__wrap(r)}plutus_script(t,_){P(t,Y_),P(_,s_);const r=a.singlemintbuilder_plutus_script(this.ptr,t.ptr,_.ptr);return q_.__wrap(r)}}class Nr{static __wrap(t){const _=Object.create(Nr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singleoutputbuilderresult_free(t)}static new(t){P(t,ue);const _=a.singleoutputbuilderresult_new(t.ptr);return Nr.__wrap(_)}set_communication_datum(t){P(t,F_),a.singleoutputbuilderresult_set_communication_datum(this.ptr,t.ptr)}output(){const t=a.singleoutputbuilderresult_output(this.ptr);return ue.__wrap(t)}communication_datum(){const t=a.singleoutputbuilderresult_communication_datum(this.ptr);return 0===t?void 0:F_.__wrap(t)}}class Lr{static __wrap(t){const _=Object.create(Lr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_singlewithdrawalbuilder_free(t)}static new(t,_){P(t,jr),P(_,zt);const r=a.singlewithdrawalbuilder_new(t.ptr,_.ptr);return Lr.__wrap(r)}payment_key(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.singlewithdrawalbuilder_payment_key(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return Ce.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}native_script(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,V_),P(_,M_),a.singlewithdrawalbuilder_native_script(n,this.ptr,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return Ce.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}plutus_script(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(t,Y_),P(_,s_),a.singlewithdrawalbuilder_plutus_script(n,this.ptr,t.ptr,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return Ce.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Er{static __wrap(t){const _=Object.create(Er.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_spendingdata_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdata_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.spendingdata_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Er.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdata_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdata_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.spendingdata_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Er.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_spending_data_pub_key(t){P(t,Ct);const _=a.spendingdata_new_spending_data_pub_key(t.ptr);return Er.__wrap(_)}static new_spending_data_script(t){P(t,Yt);const _=a.spendingdata_new_spending_data_script(t.ptr);return Er.__wrap(_)}static new_spending_data_redeem(t){P(t,br);const _=a.spendingdata_new_spending_data_redeem(t.ptr);return Er.__wrap(_)}kind(){return a.spendingdata_kind(this.ptr)>>>0}as_spending_data_pub_key(){const t=a.spendingdata_as_spending_data_pub_key(this.ptr);return 0===t?void 0:Wr.__wrap(t)}as_spending_data_script(){const t=a.spendingdata_as_spending_data_script(this.ptr);return 0===t?void 0:Yr.__wrap(t)}as_spending_data_redeem(){const t=a.spendingdata_as_spending_data_redeem(this.ptr);return 0===t?void 0:Jr.__wrap(t)}}class Wr{static __wrap(t){const _=Object.create(Wr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_spendingdatapubkeyasd_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdatapubkeyasd_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.spendingdatapubkeyasd_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Wr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdatapubkeyasd_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdatapubkeyasd_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.spendingdatapubkeyasd_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Wr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}public_ed25519_bip32(){const t=a.spendingdatapubkeyasd_public_ed25519_bip32(this.ptr);return Ct.__wrap(t)}static new(t){P(t,Ct);const _=a.spendingdatapubkeyasd_new(t.ptr);return Wr.__wrap(_)}}class Jr{static __wrap(t){const _=Object.create(Jr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_spendingdataredeemasd_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdataredeemasd_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.spendingdataredeemasd_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Jr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdataredeemasd_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdataredeemasd_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.spendingdataredeemasd_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Jr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}public_ed25519(){const t=a.spendingdataredeemasd_public_ed25519(this.ptr);return br.__wrap(t)}static new(t){P(t,br);const _=a.spendingdataredeemasd_new(t.ptr);return Jr.__wrap(_)}}class Yr{static __wrap(t){const _=Object.create(Yr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_spendingdatascriptasd_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdatascriptasd_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.spendingdatascriptasd_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Yr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdatascriptasd_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.spendingdatascriptasd_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.spendingdatascriptasd_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Yr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}script(){const t=a.spendingdatascriptasd_script(this.ptr);return Yt.__wrap(t)}static new(t){P(t,Yt);const _=a.spendingdatascriptasd_new(t.ptr);return Yr.__wrap(_)}}class Fr{static __wrap(t){const _=Object.create(Fr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakecredential_free(t)}static from_keyhash(t){P(t,a_);const _=a.stakecredential_from_keyhash(t.ptr);return Fr.__wrap(_)}static from_scripthash(t){P(t,Kr);const _=a.stakecredential_from_scripthash(t.ptr);return Fr.__wrap(_)}to_keyhash(){const t=a.stakecredential_to_keyhash(this.ptr);return 0===t?void 0:a_.__wrap(t)}to_scripthash(){const t=a.stakecredential_to_scripthash(this.ptr);return 0===t?void 0:Kr.__wrap(t)}kind(){return a.stakecredential_kind(this.ptr)>>>0}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakecredential_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakecredential_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Fr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.stakecredential_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakecredential_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakecredential_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Fr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class $r{static __wrap(t){const _=Object.create($r.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakecredentials_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakecredentials_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakecredentials_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return $r.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.stakecredentials_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakecredentials_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakecredentials_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return $r.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.stakecredentials_new();return $r.__wrap(t)}len(){return a.stakecredentials_len(this.ptr)>>>0}get(t){const _=a.stakecredentials_get(this.ptr,t);return Fr.__wrap(_)}add(t){P(t,Fr),a.stakecredentials_add(this.ptr,t.ptr)}}class Ur{static __wrap(t){const _=Object.create(Ur.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakedelegation_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakedelegation_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakedelegation_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ur.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.stakedelegation_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakedelegation_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakedelegation_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ur.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}stake_credential(){const t=a.stakedelegation_stake_credential(this.ptr);return Fr.__wrap(t)}pool_keyhash(){const t=a.stakedelegation_pool_keyhash(this.ptr);return a_.__wrap(t)}static new(t,_){P(t,Fr),P(_,a_);const r=a.stakedelegation_new(t.ptr,_.ptr);return Ur.__wrap(r)}}class Xr{static __wrap(t){const _=Object.create(Xr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakederegistration_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakederegistration_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakederegistration_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Xr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.stakederegistration_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakederegistration_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakederegistration_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Xr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}stake_credential(){const t=a.stakederegistration_stake_credential(this.ptr);return Fr.__wrap(t)}static new(t){P(t,Fr);const _=a.stakederegistration_new(t.ptr);return Xr.__wrap(_)}}class Qr{static __wrap(t){const _=Object.create(Qr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakedistribution_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakedistribution_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakedistribution_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Qr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.stakedistribution_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakedistribution_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakedistribution_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Qr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_bootstrap_era_distr(){const t=a.stakedistribution_new_bootstrap_era_distr();return Qr.__wrap(t)}static new_single_key_distr(t){P(t,Gr);const _=a.stakedistribution_new_single_key_distr(t.ptr);return Qr.__wrap(_)}kind(){return a.stakedistribution_kind(this.ptr)>>>0}as_bootstrap_era_distr(){const t=a.stakedistribution_as_bootstrap_era_distr(this.ptr);return 0===t?void 0:Nt.__wrap(t)}as_single_key_distr(){const t=a.stakedistribution_as_single_key_distr(this.ptr);return 0===t?void 0:Vr.__wrap(t)}static new_single_key(t){P(t,Ct);const _=a.stakedistribution_new_single_key(t.ptr);return Qr.__wrap(_)}}class Zr{static __wrap(t){const _=Object.create(Zr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakeregistration_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakeregistration_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakeregistration_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Zr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.stakeregistration_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakeregistration_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakeregistration_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Zr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}stake_credential(){const t=a.stakeregistration_stake_credential(this.ptr);return Fr.__wrap(t)}static new(t){P(t,Fr);const _=a.stakeregistration_new(t.ptr);return Zr.__wrap(_)}}class Gr{static __wrap(t){const _=Object.create(Gr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_stakeholderid_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.stakeholderid_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Gr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.stakeholderid_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.stakeholderid_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakeholderid_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Gr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.stakeholderid_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.stakeholderid_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Gr.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){P(t,Ct);const _=a.stakeholderid_new(t.ptr);return Gr.__wrap(_)}}class te{static __wrap(t){const _=Object.create(te.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_strings_free(t)}static new(){const t=a.strings_new();return te.__wrap(t)}len(){return a.strings_len(this.ptr)>>>0}get(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.strings_get(e,this.ptr,t);var _=j()[e/4+0],r=j()[e/4+1];return u(_,r)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(_,r)}}add(t){const _=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),r=g;a.strings_add(this.ptr,_,r)}}class _e{static __wrap(t){const _=Object.create(_e.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_timelockexpiry_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.timelockexpiry_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.timelockexpiry_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return _e.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.timelockexpiry_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.timelockexpiry_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.timelockexpiry_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return _e.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}slot(){const t=a.timelockexpiry_slot(this.ptr);return zt.__wrap(t)}static new(t){P(t,zt);const _=a.timelockexpiry_new(t.ptr);return _e.__wrap(_)}}class re{static __wrap(t){const _=Object.create(re.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_timelockstart_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.timelockstart_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.timelockstart_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return re.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.timelockstart_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.timelockstart_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.timelockstart_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return re.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}slot(){const t=a.timelockstart_slot(this.ptr);return zt.__wrap(t)}static new(t){P(t,zt);const _=a.timelockstart_new(t.ptr);return re.__wrap(_)}}class ee{static __wrap(t){const _=Object.create(ee.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transaction_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transaction_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transaction_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ee.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transaction_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transaction_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transaction_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ee.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}body(){const t=a.transaction_body(this.ptr);return ae.__wrap(t)}witness_set(){const t=a.transaction_witness_set(this.ptr);return me.__wrap(t)}is_valid(){return 0!==a.transaction_is_valid(this.ptr)}auxiliary_data(){const t=a.transaction_auxiliary_data(this.ptr);return 0===t?void 0:Tt.__wrap(t)}set_is_valid(t){a.transaction_set_is_valid(this.ptr,t)}static new(t,_,r){P(t,ae),P(_,me);let e=0;m(r)||(P(r,Tt),e=r.ptr,r.ptr=0);const n=a.transaction_new(t.ptr,_.ptr,e);return ee.__wrap(n)}}class ne{static __wrap(t){const _=Object.create(ne.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionbodies_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbodies_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionbodies_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ne.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbodies_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbodies_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionbodies_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ne.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.transactionbodies_new();return ne.__wrap(t)}len(){return a.transactionbodies_len(this.ptr)>>>0}get(t){const _=a.transactionbodies_get(this.ptr,t);return ae.__wrap(_)}add(t){P(t,ae),a.transactionbodies_add(this.ptr,t.ptr)}}class ae{static __wrap(t){const _=Object.create(ae.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionbody_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbody_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionbody_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ae.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbody_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbody_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionbody_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ae.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}inputs(){const t=a.transactionbody_inputs(this.ptr);return we.__wrap(t)}outputs(){const t=a.transactionbody_outputs(this.ptr);return fe.__wrap(t)}fee(){const t=a.transactionbody_fee(this.ptr);return zt.__wrap(t)}ttl(){const t=a.transactionbody_ttl(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_certs(t){P(t,Xt),a.transactionbody_set_certs(this.ptr,t.ptr)}certs(){const t=a.transactionbody_certs(this.ptr);return 0===t?void 0:Xt.__wrap(t)}set_withdrawals(t){P(t,Ie),a.transactionbody_set_withdrawals(this.ptr,t.ptr)}withdrawals(){const t=a.transactionbody_withdrawals(this.ptr);return 0===t?void 0:Ie.__wrap(t)}set_update(t){P(t,Ae),a.transactionbody_set_update(this.ptr,t.ptr)}update(){const t=a.transactionbody_update(this.ptr);return 0===t?void 0:Ae.__wrap(t)}set_auxiliary_data_hash(t){P(t,Bt),a.transactionbody_set_auxiliary_data_hash(this.ptr,t.ptr)}auxiliary_data_hash(){const t=a.transactionbody_auxiliary_data_hash(this.ptr);return 0===t?void 0:Bt.__wrap(t)}set_validity_start_interval(t){P(t,zt),a.transactionbody_set_validity_start_interval(this.ptr,t.ptr)}validity_start_interval(){const t=a.transactionbody_validity_start_interval(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_mint(t){P(t,D_),a.transactionbody_set_mint(this.ptr,t.ptr)}mint(){const t=a.transactionbody_mint(this.ptr);return 0===t?void 0:D_.__wrap(t)}multiassets(){const t=a.transactionbody_multiassets(this.ptr);return 0===t?void 0:D_.__wrap(t)}set_script_data_hash(t){P(t,Ar),a.transactionbody_set_script_data_hash(this.ptr,t.ptr)}script_data_hash(){const t=a.transactionbody_script_data_hash(this.ptr);return 0===t?void 0:Ar.__wrap(t)}set_collateral(t){P(t,we),a.transactionbody_set_collateral(this.ptr,t.ptr)}collateral(){const t=a.transactionbody_collateral(this.ptr);return 0===t?void 0:we.__wrap(t)}set_required_signers(t){P(t,s_),a.transactionbody_set_required_signers(this.ptr,t.ptr)}required_signers(){const t=a.transactionbody_required_signers(this.ptr);return 0===t?void 0:s_.__wrap(t)}set_network_id(t){P(t,L_),a.transactionbody_set_network_id(this.ptr,t.ptr)}network_id(){const t=a.transactionbody_network_id(this.ptr);return 0===t?void 0:L_.__wrap(t)}set_collateral_return(t){P(t,ue),a.transactionbody_set_collateral_return(this.ptr,t.ptr)}collateral_return(){const t=a.transactionbody_collateral_return(this.ptr);return 0===t?void 0:ue.__wrap(t)}set_total_collateral(t){P(t,zt),a.transactionbody_set_total_collateral(this.ptr,t.ptr)}total_collateral(){const t=a.transactionbody_total_collateral(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_reference_inputs(t){P(t,we),a.transactionbody_set_reference_inputs(this.ptr,t.ptr)}reference_inputs(){const t=a.transactionbody_reference_inputs(this.ptr);return 0===t?void 0:we.__wrap(t)}static new(t,_,r,e){P(t,we),P(_,fe),P(r,zt);let n=0;m(e)||(P(e,zt),n=e.ptr,e.ptr=0);const s=a.transactionbody_new(t.ptr,_.ptr,r.ptr,n);return ae.__wrap(s)}}class se{static __wrap(t){const _=Object.create(se.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionbuilder_free(t)}select_utxos(t){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_select_utxos(r,this.ptr,t);var _=j()[r/4+0];if(j()[r/4+1])throw p(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}add_input(t){try{const r=a.__wbindgen_add_to_stack_pointer(-16);P(t,h_),a.transactionbuilder_add_input(r,this.ptr,t.ptr);var _=j()[r/4+0];if(j()[r/4+1])throw p(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}add_utxo(t){P(t,h_),a.transactionbuilder_add_utxo(this.ptr,t.ptr)}fee_for_input(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,h_),a.transactionbuilder_fee_for_input(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}add_reference_input(t){P(t,he),a.transactionbuilder_add_reference_input(this.ptr,t.ptr)}add_output(t){try{const r=a.__wbindgen_add_to_stack_pointer(-16);P(t,Nr),a.transactionbuilder_add_output(r,this.ptr,t.ptr);var _=j()[r/4+0];if(j()[r/4+1])throw p(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}fee_for_output(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,Nr),a.transactionbuilder_fee_for_output(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_fee(t){P(t,zt),a.transactionbuilder_set_fee(this.ptr,t.ptr)}set_ttl(t){P(t,zt),a.transactionbuilder_set_ttl(this.ptr,t.ptr)}set_validity_start_interval(t){P(t,zt),a.transactionbuilder_set_validity_start_interval(this.ptr,t.ptr)}get_certs(){const t=a.transactionbuilder_get_certs(this.ptr);return 0===t?void 0:Xt.__wrap(t)}add_cert(t){P(t,Ut),a.transactionbuilder_add_cert(this.ptr,t.ptr)}get_withdrawals(){const t=a.transactionbuilder_get_withdrawals(this.ptr);return 0===t?void 0:Ie.__wrap(t)}add_withdrawal(t){P(t,Ce),a.transactionbuilder_add_withdrawal(this.ptr,t.ptr)}get_auxiliary_data(){const t=a.transactionbuilder_get_auxiliary_data(this.ptr);return 0===t?void 0:Tt.__wrap(t)}set_auxiliary_data(t){P(t,Tt),a.transactionbuilder_set_auxiliary_data(this.ptr,t.ptr)}add_auxiliary_data(t){P(t,Tt),a.transactionbuilder_add_auxiliary_data(this.ptr,t.ptr)}add_mint(t){P(t,q_),a.transactionbuilder_add_mint(this.ptr,t.ptr)}get_mint(){const t=a.transactionbuilder_get_mint(this.ptr);return 0===t?void 0:D_.__wrap(t)}static new(t){P(t,ie);const _=a.transactionbuilder_new(t.ptr);return se.__wrap(_)}add_collateral(t){try{const r=a.__wbindgen_add_to_stack_pointer(-16);P(t,h_),a.transactionbuilder_add_collateral(r,this.ptr,t.ptr);var _=j()[r/4+0];if(j()[r/4+1])throw p(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}collateral(){const t=a.transactionbuilder_collateral(this.ptr);return 0===t?void 0:we.__wrap(t)}add_required_signer(t){P(t,a_),a.transactionbuilder_add_required_signer(this.ptr,t.ptr)}required_signers(){const t=a.transactionbuilder_required_signers(this.ptr);return 0===t?void 0:s_.__wrap(t)}set_network_id(t){P(t,L_);var _=t.ptr;t.ptr=0,a.transactionbuilder_set_network_id(this.ptr,_)}network_id(){const t=a.transactionbuilder_network_id(this.ptr);return 0===t?void 0:L_.__wrap(t)}get_explicit_input(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_get_explicit_input(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return De.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_implicit_input(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_get_implicit_input(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return De.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_total_input(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_get_total_input(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return De.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_total_output(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_get_total_output(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return De.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_explicit_output(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_get_explicit_output(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return De.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_deposit(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_get_deposit(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return zt.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}get_fee_if_set(){const t=a.transactionbuilder_get_fee_if_set(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_collateral_return(t){P(t,ue),a.transactionbuilder_set_collateral_return(this.ptr,t.ptr)}full_size(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_full_size(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return t>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}output_sizes(){try{const s=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_output_sizes(s,this.ptr);var t=j()[s/4+0],_=j()[s/4+1],r=(e=t,n=_,(0===V.byteLength&&(V=new Uint32Array(a.memory.buffer)),V).subarray(e/4,e/4+n)).slice();return a.__wbindgen_free(t,4*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}var e,n}build_for_evaluation(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(_,xt),a.transactionbuilder_build_for_evaluation(n,this.ptr,t,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return xe.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}build(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16);P(_,xt),a.transactionbuilder_build(n,this.ptr,t,_.ptr);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return qr.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_exunits(t,_){P(t,fr),P(_,c_),a.transactionbuilder_set_exunits(this.ptr,t.ptr,_.ptr)}min_fee(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilder_min_fee(e,this.ptr,t);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return zt.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class ie{static __wrap(t){const _=Object.create(ie.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionbuilderconfig_free(t)}}class oe{static __wrap(t){const _=Object.create(oe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionbuilderconfigbuilder_free(t)}static new(){const t=a.transactionbuilderconfigbuilder_new();return oe.__wrap(t)}fee_algo(t){P(t,A_);const _=a.transactionbuilderconfigbuilder_fee_algo(this.ptr,t.ptr);return oe.__wrap(_)}coins_per_utxo_byte(t){P(t,zt);const _=a.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr,t.ptr);return oe.__wrap(_)}coins_per_utxo_word(t){P(t,zt);const _=a.transactionbuilderconfigbuilder_coins_per_utxo_word(this.ptr,t.ptr);return oe.__wrap(_)}pool_deposit(t){P(t,zt);const _=a.transactionbuilderconfigbuilder_pool_deposit(this.ptr,t.ptr);return oe.__wrap(_)}key_deposit(t){P(t,zt);const _=a.transactionbuilderconfigbuilder_key_deposit(this.ptr,t.ptr);return oe.__wrap(_)}max_value_size(t){const _=a.transactionbuilderconfigbuilder_max_value_size(this.ptr,t);return oe.__wrap(_)}max_tx_size(t){const _=a.transactionbuilderconfigbuilder_max_tx_size(this.ptr,t);return oe.__wrap(_)}prefer_pure_change(t){const _=a.transactionbuilderconfigbuilder_prefer_pure_change(this.ptr,t);return oe.__wrap(_)}ex_unit_prices(t){P(t,d_);const _=a.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr,t.ptr);return oe.__wrap(_)}costmdls(t){P(t,Gt);const _=a.transactionbuilderconfigbuilder_costmdls(this.ptr,t.ptr);return oe.__wrap(_)}collateral_percentage(t){const _=a.transactionbuilderconfigbuilder_collateral_percentage(this.ptr,t);return oe.__wrap(_)}max_collateral_inputs(t){const _=a.transactionbuilderconfigbuilder_max_collateral_inputs(this.ptr,t);return oe.__wrap(_)}build(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionbuilderconfigbuilder_build(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return ie.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class de{static __wrap(t){const _=Object.create(de.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionhash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionhash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return de.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionhash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.transactionhash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionhash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return de.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionhash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionhash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return de.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class ce{static __wrap(t){const _=Object.create(ce.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionindexes_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionindexes_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionindexes_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ce.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.transactionindexes_new();return ce.__wrap(t)}len(){return a.transactionindexes_len(this.ptr)>>>0}get(t){const _=a.transactionindexes_get(this.ptr,t);return zt.__wrap(_)}add(t){P(t,zt),a.transactionindexes_add(this.ptr,t.ptr)}}class pe{static __wrap(t){const _=Object.create(pe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactioninput_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactioninput_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactioninput_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return pe.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactioninput_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactioninput_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactioninput_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return pe.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}transaction_id(){const t=a.transactioninput_transaction_id(this.ptr);return de.__wrap(t)}index(){const t=a.transactioninput_index(this.ptr);return zt.__wrap(t)}static new(t,_){P(t,de),P(_,zt);const r=a.transactioninput_new(t.ptr,_.ptr);return pe.__wrap(r)}}class we{static __wrap(t){const _=Object.create(we.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactioninputs_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactioninputs_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactioninputs_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return we.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactioninputs_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactioninputs_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactioninputs_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return we.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.transactioninputs_new();return we.__wrap(t)}len(){return a.transactioninputs_len(this.ptr)>>>0}get(t){const _=a.transactioninputs_get(this.ptr,t);return pe.__wrap(_)}add(t){P(t,pe),a.transactioninputs_add(this.ptr,t.ptr)}}class le{static __wrap(t){const _=Object.create(le.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionmetadatum_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatum_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionmetadatum_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return le.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_map(t){P(t,B_);const _=a.transactionmetadatum_new_map(t.ptr);return le.__wrap(_)}static new_list(t){P(t,T_);const _=a.transactionmetadatum_new_list(t.ptr);return le.__wrap(_)}static new_int(t){P(t,k_);const _=a.transactionmetadatum_new_int(t.ptr);return le.__wrap(_)}static new_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionmetadatum_new_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return le.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new_text(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionmetadatum_new_text(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return le.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}kind(){return a.transactionmetadatum_kind(this.ptr)>>>0}as_map(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatum_as_map(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return B_.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_list(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatum_as_list(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return T_.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_int(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatum_as_int(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return k_.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const n=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatum_as_bytes(n,this.ptr);var t=j()[n/4+0],_=j()[n/4+1],r=j()[n/4+2];if(j()[n/4+3])throw p(r);var e=O(t,_).slice();return a.__wbindgen_free(t,1*_),e}finally{a.__wbindgen_add_to_stack_pointer(16)}}as_text(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatum_as_text(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}}class be{static __wrap(t){const _=Object.create(be.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionmetadatumlabels_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionmetadatumlabels_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionmetadatumlabels_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return be.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.transactionmetadatumlabels_new();return be.__wrap(t)}len(){return a.transactionmetadatumlabels_len(this.ptr)>>>0}get(t){const _=a.transactionmetadatumlabels_get(this.ptr,t);return zt.__wrap(_)}add(t){P(t,zt),a.transactionmetadatumlabels_add(this.ptr,t.ptr)}}class ue{static __wrap(t){const _=Object.create(ue.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionoutput_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutput_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionoutput_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ue.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutput_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutput_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionoutput_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ue.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}address(){const t=a.transactionoutput_address(this.ptr);return xt.__wrap(t)}amount(){const t=a.transactionoutput_amount(this.ptr);return De.__wrap(t)}datum(){const t=a.transactionoutput_datum(this.ptr);return 0===t?void 0:n_.__wrap(t)}set_datum(t){P(t,n_),a.transactionoutput_set_datum(this.ptr,t.ptr)}script_ref(){const t=a.transactionoutput_script_ref(this.ptr);return 0===t?void 0:Rr.__wrap(t)}set_script_ref(t){P(t,Rr),a.transactionoutput_set_script_ref(this.ptr,t.ptr)}static new(t,_){P(t,xt),P(_,De);const r=a.transactionoutput_new(t.ptr,_.ptr);return ue.__wrap(r)}}class ye{static __wrap(t){const _=Object.create(ye.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionoutputamountbuilder_free(t)}with_value(t){P(t,De);const _=a.transactionoutputamountbuilder_with_value(this.ptr,t.ptr);return ye.__wrap(_)}with_coin(t){P(t,zt);const _=a.transactionoutputamountbuilder_with_coin(this.ptr,t.ptr);return ye.__wrap(_)}with_coin_and_asset(t,_){P(t,zt),P(_,C_);const r=a.transactionoutputamountbuilder_with_coin_and_asset(this.ptr,t.ptr,_.ptr);return ye.__wrap(r)}with_asset_and_min_required_coin(t,_,r){try{const s=a.__wbindgen_add_to_stack_pointer(-16);P(t,C_),P(_,zt);let i=0;m(r)||(P(r,zt),i=r.ptr,r.ptr=0),a.transactionoutputamountbuilder_with_asset_and_min_required_coin(s,this.ptr,t.ptr,_.ptr,i);var e=j()[s/4+0],n=j()[s/4+1];if(j()[s/4+2])throw p(n);return ye.__wrap(e)}finally{a.__wbindgen_add_to_stack_pointer(16)}}build(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutputamountbuilder_build(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return Nr.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class ge{static __wrap(t){const _=Object.create(ge.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionoutputbuilder_free(t)}static new(){const t=a.transactionoutputbuilder_new();return ge.__wrap(t)}with_address(t){P(t,xt);const _=a.transactionoutputbuilder_with_address(this.ptr,t.ptr);return ge.__wrap(_)}with_communication_data(t){P(t,F_);const _=a.transactionoutputbuilder_with_communication_data(this.ptr,t.ptr);return ge.__wrap(_)}with_data(t){P(t,n_);const _=a.transactionoutputbuilder_with_data(this.ptr,t.ptr);return ge.__wrap(_)}with_reference_script(t){P(t,Rr);const _=a.transactionoutputbuilder_with_reference_script(this.ptr,t.ptr);return ge.__wrap(_)}next(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutputbuilder_next(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return ye.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class fe{static __wrap(t){const _=Object.create(fe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionoutputs_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutputs_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionoutputs_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return fe.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutputs_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionoutputs_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionoutputs_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return fe.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.transactionoutputs_new();return fe.__wrap(t)}len(){return a.transactionoutputs_len(this.ptr)>>>0}get(t){const _=a.transactionoutputs_get(this.ptr,t);return ue.__wrap(_)}add(t){P(t,ue),a.transactionoutputs_add(this.ptr,t.ptr)}}class he{static __wrap(t){const _=Object.create(he.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionunspentoutput_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionunspentoutput_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionunspentoutput_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return he.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){P(t,pe),P(_,ue);const r=a.transactionunspentoutput_new(t.ptr,_.ptr);return he.__wrap(r)}input(){const t=a.transactionunspentoutput_input(this.ptr);return pe.__wrap(t)}output(){const t=a.transactionunspentoutput_output(this.ptr);return ue.__wrap(t)}}class ke{static __wrap(t){const _=Object.create(ke.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionunspentoutputs_free(t)}static new(){const t=a.transactionunspentoutputs_new();return ke.__wrap(t)}is_empty(){return 0!==a.transactionunspentoutputs_is_empty(this.ptr)}len(){return a.transactionunspentoutputs_len(this.ptr)>>>0}get(t){const _=a.transactionunspentoutputs_get(this.ptr,t);return he.__wrap(_)}add(t){P(t,he),a.transactionunspentoutputs_add(this.ptr,t.ptr)}}class me{static __wrap(t){const _=Object.create(me.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionwitnessset_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnessset_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionwitnessset_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return me.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnessset_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnessset_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionwitnessset_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return me.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_vkeys(t){P(t,He),a.transactionwitnessset_set_vkeys(this.ptr,t.ptr)}vkeys(){const t=a.transactionwitnessset_vkeys(this.ptr);return 0===t?void 0:He.__wrap(t)}set_native_scripts(t){P(t,N_),a.transactionwitnessset_set_native_scripts(this.ptr,t.ptr)}native_scripts(){const t=a.transactionwitnessset_native_scripts(this.ptr);return 0===t?void 0:N_.__wrap(t)}set_bootstraps(t){P(t,Et),a.transactionwitnessset_set_bootstraps(this.ptr,t.ptr)}bootstraps(){const t=a.transactionwitnessset_bootstraps(this.ptr);return 0===t?void 0:Et.__wrap(t)}set_plutus_v1_scripts(t){P(t,G_),a.transactionwitnessset_set_plutus_v1_scripts(this.ptr,t.ptr)}plutus_v1_scripts(){const t=a.transactionwitnessset_plutus_v1_scripts(this.ptr);return 0===t?void 0:G_.__wrap(t)}set_plutus_data(t){P(t,$_),a.transactionwitnessset_set_plutus_data(this.ptr,t.ptr)}plutus_data(){const t=a.transactionwitnessset_plutus_data(this.ptr);return 0===t?void 0:$_.__wrap(t)}set_redeemers(t){P(t,hr),a.transactionwitnessset_set_redeemers(this.ptr,t.ptr)}redeemers(){const t=a.transactionwitnessset_redeemers(this.ptr);return 0===t?void 0:hr.__wrap(t)}set_plutus_v2_scripts(t){P(t,_r),a.transactionwitnessset_set_plutus_v2_scripts(this.ptr,t.ptr)}plutus_v2_scripts(){const t=a.transactionwitnessset_plutus_v2_scripts(this.ptr);return 0===t?void 0:_r.__wrap(t)}static new(){const t=a.transactionwitnessset_new();return me.__wrap(t)}}class ve{static __wrap(t){const _=Object.create(ve.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionwitnesssetbuilder_free(t)}get_vkeys(){const t=a.transactionwitnesssetbuilder_get_vkeys(this.ptr);return qe.__wrap(t)}add_vkey(t){P(t,ze),a.transactionwitnesssetbuilder_add_vkey(this.ptr,t.ptr)}add_bootstrap(t){P(t,Lt),a.transactionwitnesssetbuilder_add_bootstrap(this.ptr,t.ptr)}get_bootstraps(){const t=a.transactionwitnesssetbuilder_get_bootstraps(this.ptr);return qe.__wrap(t)}add_script(t){P(t,Or),a.transactionwitnesssetbuilder_add_script(this.ptr,t.ptr)}add_native_script(t){P(t,V_),a.transactionwitnesssetbuilder_add_native_script(this.ptr,t.ptr)}get_native_script(){const t=a.transactionwitnesssetbuilder_get_native_script(this.ptr);return N_.__wrap(t)}add_plutus_v1_script(t){P(t,Z_),a.transactionwitnesssetbuilder_add_plutus_v1_script(this.ptr,t.ptr)}get_plutus_v1_script(){const t=a.transactionwitnesssetbuilder_get_plutus_v1_script(this.ptr);return G_.__wrap(t)}add_plutus_v2_script(t){P(t,tr),a.transactionwitnesssetbuilder_add_plutus_v2_script(this.ptr,t.ptr)}get_plutus_v2_script(){const t=a.transactionwitnesssetbuilder_get_plutus_v2_script(this.ptr);return _r.__wrap(t)}add_plutus_datum(t){P(t,F_),a.transactionwitnesssetbuilder_add_plutus_datum(this.ptr,t.ptr)}get_plutus_datum(){const t=a.transactionwitnesssetbuilder_get_plutus_datum(this.ptr);return $_.__wrap(t)}add_redeemer(t){P(t,yr),a.transactionwitnesssetbuilder_add_redeemer(this.ptr,t.ptr)}add_redeemers(t){P(t,hr),a.transactionwitnesssetbuilder_add_redeemers(this.ptr,t.ptr)}get_redeemer(){const t=a.transactionwitnesssetbuilder_get_redeemer(this.ptr);return hr.__wrap(t)}add_required_wits(t){P(t,vr),a.transactionwitnesssetbuilder_add_required_wits(this.ptr,t.ptr)}static new(){const t=a.transactionwitnesssetbuilder_new();return ve.__wrap(t)}add_existing(t){P(t,me),a.transactionwitnesssetbuilder_add_existing(this.ptr,t.ptr)}build(){const t=a.transactionwitnesssetbuilder_build(this.ptr);return me.__wrap(t)}remaining_wits(){const t=a.transactionwitnesssetbuilder_remaining_wits(this.ptr);return vr.__wrap(t)}try_build(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnesssetbuilder_try_build(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return me.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class je{static __wrap(t){const _=Object.create(je.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_transactionwitnesssets_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnesssets_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.transactionwitnesssets_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return je.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnesssets_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.transactionwitnesssets_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.transactionwitnesssets_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return je.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.transactionwitnesssets_new();return je.__wrap(t)}len(){return a.transactionwitnesssets_len(this.ptr)>>>0}get(t){const _=a.transactionwitnesssets_get(this.ptr,t);return me.__wrap(_)}add(t){P(t,me),a.transactionwitnesssets_add(this.ptr,t.ptr)}}class xe{static __wrap(t){const _=Object.create(xe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_txredeemerbuilder_free(t)}build(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.txredeemerbuilder_build(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return hr.__wrap(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}set_exunits(t,_){P(t,fr),P(_,c_),a.txredeemerbuilder_set_exunits(this.ptr,t.ptr,_.ptr)}draft_body(){const t=a.txredeemerbuilder_draft_body(this.ptr);return ae.__wrap(t)}auxiliary_data(){const t=a.txredeemerbuilder_auxiliary_data(this.ptr);return 0===t?void 0:Tt.__wrap(t)}draft_tx(){const t=a.txredeemerbuilder_draft_tx(this.ptr);return ee.__wrap(t)}}class Oe{static __wrap(t){const _=Object.create(Oe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_url_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.url_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.url_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Oe.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.url_new(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Oe.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}url(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.url_url(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}}class Se{static __wrap(t){const _=Object.create(Se.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_unitinterval_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.unitinterval_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.unitinterval_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Se.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.unitinterval_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.unitinterval_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.unitinterval_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Se.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}numerator(){const t=a.unitinterval_numerator(this.ptr);return zt.__wrap(t)}denominator(){const t=a.unitinterval_denominator(this.ptr);return zt.__wrap(t)}static new(t,_){P(t,zt),P(_,zt);const r=a.unitinterval_new(t.ptr,_.ptr);return Se.__wrap(r)}}class Pe{static __wrap(t){const _=Object.create(Pe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_untaggedredeemer_free(t)}datum(){const t=a.untaggedredeemer_datum(this.ptr);return F_.__wrap(t)}ex_units(){const t=a.untaggedredeemer_ex_units(this.ptr);return c_.__wrap(t)}static new(t,_){P(t,F_),P(_,c_);const r=a.untaggedredeemer_new(t.ptr,_.ptr);return Pe.__wrap(r)}}class Ae{static __wrap(t){const _=Object.create(Ae.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_update_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.update_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.update_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ae.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.update_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.update_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.update_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ae.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}proposed_protocol_parameter_updates(){const t=a.update_proposed_protocol_parameter_updates(this.ptr);return cr.__wrap(t)}epoch(){return a.update_epoch(this.ptr)>>>0}static new(t,_){P(t,cr);const r=a.update_new(t.ptr,_);return Ae.__wrap(r)}}class Ke{static __wrap(t){const _=Object.create(Ke.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vrfcert_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vrfcert_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.vrfcert_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ke.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.vrfcert_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.vrfcert_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.vrfcert_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ke.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}output(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vrfcert_output(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}proof(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vrfcert_proof(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){try{const n=a.__wbindgen_add_to_stack_pointer(-16),s=S(t,a.__wbindgen_malloc),i=g,o=S(_,a.__wbindgen_malloc),d=g;a.vrfcert_new(n,s,i,o,d);var r=j()[n/4+0],e=j()[n/4+1];if(j()[n/4+2])throw p(e);return Ke.__wrap(r)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Te{static __wrap(t){const _=Object.create(Te.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vrfkeyhash_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.vrfkeyhash_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Te.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vrfkeyhash_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.vrfkeyhash_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.vrfkeyhash_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Te.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.vrfkeyhash_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.vrfkeyhash_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Te.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Be{static __wrap(t){const _=Object.create(Be.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vrfvkey_free(t)}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.vrfvkey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Be.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vrfvkey_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const o=a.__wbindgen_add_to_stack_pointer(-16),d=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),c=g;a.vrfvkey_to_bech32(o,this.ptr,d,c);var _=j()[o/4+0],r=j()[o/4+1],e=j()[o/4+2],n=j()[o/4+3],s=_,i=r;if(n)throw s=0,i=0,p(e);return u(s,i)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(s,i)}}static from_bech32(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.vrfvkey_from_bech32(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Be.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.vrfvkey_to_hex(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];return u(t,_)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,_)}}static from_hex(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.vrfvkey_from_hex(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Be.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class De{static __wrap(t){const _=Object.create(De.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_value_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.value_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.value_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return De.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.value_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.value_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.value_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return De.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){P(t,zt);const _=a.value_new(t.ptr);return De.__wrap(_)}static new_from_assets(t){P(t,C_);const _=a.value_new_from_assets(t.ptr);return De.__wrap(_)}static zero(){const t=a.value_zero();return De.__wrap(t)}is_zero(){return 0!==a.value_is_zero(this.ptr)}coin(){const t=a.value_coin(this.ptr);return zt.__wrap(t)}set_coin(t){P(t,zt),a.value_set_coin(this.ptr,t.ptr)}multiasset(){const t=a.value_multiasset(this.ptr);return 0===t?void 0:C_.__wrap(t)}set_multiasset(t){P(t,C_),a.value_set_multiasset(this.ptr,t.ptr)}checked_add(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,De),a.value_checked_add(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return De.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}checked_sub(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16);P(t,De),a.value_checked_sub(e,this.ptr,t.ptr);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return De.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}clamped_sub(t){P(t,De);const _=a.value_clamped_sub(this.ptr,t.ptr);return De.__wrap(_)}compare(t){P(t,De);const _=a.value_compare(this.ptr,t.ptr);return 16777215===_?void 0:_}}class Re{static __wrap(t){const _=Object.create(Re.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vkey_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vkey_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.vkey_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Re.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t){P(t,br);const _=a.vkey_new(t.ptr);return Re.__wrap(_)}public_key(){const t=a.vkey_public_key(this.ptr);return br.__wrap(t)}}class qe{static __wrap(t){const _=Object.create(qe.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vkeys_free(t)}static new(){const t=a.vkeys_new();return qe.__wrap(t)}len(){return a.vkeys_len(this.ptr)>>>0}get(t){const _=a.vkeys_get(this.ptr,t);return Re.__wrap(_)}add(t){P(t,Re),a.vkeys_add(this.ptr,t.ptr)}}class ze{static __wrap(t){const _=Object.create(ze.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vkeywitness_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.vkeywitness_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.vkeywitness_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ze.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.vkeywitness_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.vkeywitness_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.vkeywitness_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return ze.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){P(t,Re),P(_,i_);const r=a.vkeywitness_new(t.ptr,_.ptr);return ze.__wrap(r)}vkey(){const t=a.vkeywitness_vkey(this.ptr);return Re.__wrap(t)}signature(){const t=a.vkeywitness_signature(this.ptr);return i_.__wrap(t)}}class He{static __wrap(t){const _=Object.create(He.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_vkeywitnesses_free(t)}static new(){const t=a.vkeywitnesses_new();return He.__wrap(t)}len(){return a.vkeywitnesses_len(this.ptr)>>>0}get(t){const _=a.vkeywitnesses_get(this.ptr,t);return ze.__wrap(_)}add(t){P(t,ze),a.vkeywitnesses_add(this.ptr,t.ptr)}}class Ce{static __wrap(t){const _=Object.create(Ce.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_withdrawalbuilderresult_free(t)}}class Ie{static __wrap(t){const _=Object.create(Ie.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_withdrawals_free(t)}to_bytes(){try{const e=a.__wbindgen_add_to_stack_pointer(-16);a.withdrawals_to_bytes(e,this.ptr);var t=j()[e/4+0],_=j()[e/4+1],r=O(t,_).slice();return a.__wbindgen_free(t,1*_),r}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=S(t,a.__wbindgen_malloc),s=g;a.withdrawals_from_bytes(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ie.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.withdrawals_to_json(i,this.ptr);var t=j()[i/4+0],_=j()[i/4+1],r=j()[i/4+2],e=j()[i/4+3],n=t,s=_;if(e)throw n=0,s=0,p(r);return u(n,s)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(n,s)}}to_js_value(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.withdrawals_to_js_value(r,this.ptr);var t=j()[r/4+0],_=j()[r/4+1];if(j()[r/4+2])throw p(_);return p(t)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=a.__wbindgen_add_to_stack_pointer(-16),n=k(t,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;a.withdrawals_from_json(e,n,s);var _=j()[e/4+0],r=j()[e/4+1];if(j()[e/4+2])throw p(r);return Ie.__wrap(_)}finally{a.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=a.withdrawals_new();return Ie.__wrap(t)}len(){return a.withdrawals_len(this.ptr)>>>0}insert(t,_){P(t,jr),P(_,zt);const r=a.withdrawals_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:zt.__wrap(r)}get(t){P(t,jr);const _=a.withdrawals_get(this.ptr,t.ptr);return 0===_?void 0:zt.__wrap(_)}keys(){const t=a.withdrawals_keys(this.ptr);return xr.__wrap(t)}}function Ve(t){p(t)}function Me(t,_){return y(u(t,_))}function Ne(t,_){const r=o(_),e="string"==typeof r?r:void 0;var n=m(e)?0:k(e,a.__wbindgen_malloc,a.__wbindgen_realloc),s=g;j()[t/4+1]=s,j()[t/4+0]=n}function Le(t,_){return y(JSON.parse(u(t,_)))}function Ee(t){return y(o(t).crypto)}function We(t){const _=o(t);return"object"==typeof _&&null!==_}function Je(t){return y(o(t).process)}function Ye(t){return y(o(t).versions)}function Fe(t){return y(o(t).node)}function $e(t){return"string"==typeof o(t)}function Ue(){return G((function(){return y(t.require)}),arguments)}function Xe(t){return y(o(t).msCrypto)}function Qe(){return G((function(t,_){o(t).getRandomValues(o(_))}),arguments)}function Ze(){return G((function(t,_,r){o(t).randomFillSync(O(_,r))}),arguments)}function Ge(t){return"function"==typeof o(t)}function tn(t,_){return y(new Function(u(t,_)))}function _n(){return G((function(t,_){return y(o(t).call(o(_)))}),arguments)}function rn(){return G((function(){return y(self.self)}),arguments)}function en(){return G((function(){return y(window.window)}),arguments)}function nn(){return G((function(){return y(globalThis.globalThis)}),arguments)}function an(){return G((function(){return y(r.g.global)}),arguments)}function sn(t){return void 0===o(t)}function on(){return G((function(t,_,r){return y(o(t).call(o(_),o(r)))}),arguments)}function dn(t){return y(o(t).buffer)}function cn(t){return y(new Uint8Array(o(t)))}function pn(t,_,r){o(t).set(o(_),r>>>0)}function wn(t){return o(t).length}function ln(t){return y(new Uint8Array(t>>>0))}function bn(t,_,r){return y(o(t).subarray(_>>>0,r>>>0))}function un(t){return y(o(t))}function yn(t,_){const r=k(x(o(_)),a.__wbindgen_malloc,a.__wbindgen_realloc),e=g;j()[t/4+1]=e,j()[t/4+0]=r}function gn(t,_){throw new Error(u(t,_))}function fn(){return y(a.memory)}n()}catch(hn){n(hn)}}))},3791:(t,_,r)=>{r.a(t,(async(e,n)=>{try{var a,s=e([a=r(3866)]),[a]=s.then?(await s)():s;await r.v(_,t.id,"41196e798cf577e9c351",{"./cardano_multiplatform_lib_bg.js":{__wbindgen_object_drop_ref:a.ug$,__wbindgen_string_new:a.h4u,__wbindgen_string_get:a.qtq,__wbindgen_json_parse:a.t$0,__wbg_crypto_8fd02d72c4ba6c5c:a.NLb,__wbindgen_is_object:a.WlW,__wbg_process_bd02d71a65cf734c:a.e58,__wbg_versions_1d70d407cb23129d:a.DVm,__wbg_node_0091cdf1ffa73e4d:a.tKO,__wbindgen_is_string:a.eYF,__wbg_require_b06abd91965488c8:a.qtV,__wbg_msCrypto_7e1e6014bddd75de:a.IJU,__wbg_getRandomValues_f308e7233e5601b7:a.Anh,__wbg_randomFillSync_f20541303a990429:a.bXi,__wbindgen_is_function:a.o$X,__wbg_newnoargs_971e9a5abe185139:a._f4,__wbg_call_33d7bcddbbfa394a:a.Jmo,__wbg_self_fd00a1ef86d1b2ed:a.Ath,__wbg_window_6f6e346d8bbd61d7:a.Hcj,__wbg_globalThis_3348936ac49df00a:a.lHB,__wbg_global_67175caf56f55ca9:a.qNE,__wbindgen_is_undefined:a.XP4,__wbg_call_65af9f665ab6ade5:a.PZ2,__wbg_buffer_34f5ec9f8a838ba0:a.eAr,__wbg_new_cda198d9dbc6d7ea:a.G0U,__wbg_set_1a930cfcda1a8067:a.FS1,__wbg_length_51f19f73d6d9eff3:a.YwE,__wbg_newwithlength_66e5530e7079ea1b:a._JX,__wbg_subarray_270ff8dd5582c1ac:a.Kms,__wbindgen_object_clone_ref:a.m_1,__wbindgen_debug_string:a.fYP,__wbindgen_throw:a.Or8,__wbindgen_memory:a.oHO}}),n()}catch(t){n(t)}}),1)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
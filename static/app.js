(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod7) => function __require() {
    return mod7 || (0, cb[__getOwnPropNames(cb)[0]])((mod7 = { exports: {} }).exports, mod7), mod7.exports;
  };
  var __copyProps = (to3, from3, except2, desc) => {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
      for (let key of __getOwnPropNames(from3))
        if (!__hasOwnProp.call(to3, key) && key !== except2)
          __defProp(to3, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
    }
    return to3;
  };
  var __toESM = (mod7, isNodeMode, target5) => (target5 = mod7 != null ? __create(__getProtoOf(mod7)) : {}, __copyProps(
    isNodeMode || !mod7 || !mod7.__esModule ? __defProp(target5, "default", { value: mod7, enumerable: true }) : target5,
    mod7
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error4(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error4("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info2) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value14) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value14[Symbol.toStringTag] || value14.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value14) {
            {
              try {
                testStringCoercion(value14);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value14) {
            return "" + value14;
          }
          function checkKeyStringCoercion(value14) {
            {
              if (willCoercionThrow(value14)) {
                error4("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error4("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init3(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName2) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error4("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName2) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error4("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error4('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source3, owner, props) {
            var element2 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source3
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function createElement3(type, config2, children2) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source3 = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source3 = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName2 = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName2);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName2);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source3, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element2, config2, children2) {
            if (element2 === null || element2 === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element2 + ".");
            }
            var propName;
            var props = assign2({}, element2.props);
            var key = element2.key;
            var ref = element2.ref;
            var self2 = element2._self;
            var source3 = element2._source;
            var owner = element2._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps;
              if (element2.type && element2.type.defaultProps) {
                defaultProps = element2.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element2.type, key, ref, self2, source3, owner, props);
          }
          function isValidElement(object3) {
            return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text8) {
            return text8.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element2, index5) {
            if (typeof element2 === "object" && element2 !== null && element2.key != null) {
              {
                checkKeyStringCoercion(element2.key);
              }
              return escape("" + element2.key);
            }
            return index5.toString(36);
          }
          function mapIntoArray(children2, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children2;
            if (type === "undefined" || type === "boolean") {
              children2 = null;
            }
            var invokeCallback = false;
            if (children2 === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children2.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children2;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children2)) {
              for (var i2 = 0; i2 < children2.length; i2++) {
                child = children2[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children2;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step3;
                var ii = 0;
                while (!(step3 = iterator2.next()).done) {
                  child = step3.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children2);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children2, func, context) {
            if (children2 == null) {
              return children2;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children2, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children2) {
            var n = 0;
            mapChildren(children2, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children2, forEachFunc, forEachContext) {
            mapChildren(children2, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray6(children2) {
            return mapChildren(children2, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children2) {
            if (!isValidElement(children2)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children2;
          }
          function createContext2(defaultValue4) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue4,
              _currentValue2: defaultValue4,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error4("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error4("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName2) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName2);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error5) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error5;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error4("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error4("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error4("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error4("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error4("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error4("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error4("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error4("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name16) {
                  ownName = name16;
                  if (!render.name && !render.displayName) {
                    render.displayName = name16;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare9) {
            {
              if (!isValidElementType(type)) {
                error4("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare9 === void 0 ? null : compare9
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name16) {
                  ownName = name16;
                  if (!type.name && !type.displayName) {
                    type.displayName = name16;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error4("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error4("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error4("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState2(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init3) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init3);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create3, deps);
          }
          function useInsertionEffect(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create3, deps);
          }
          function useLayoutEffect(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create3, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create3, deps);
          }
          function useImperativeHandle(ref, create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create3, deps);
          }
          function useDebugValue(value14, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value14, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value14) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value14);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error4("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name16, source3, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name16;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
                  c--;
                }
                for (; s2 >= 1 && c >= 0; s2--, c--) {
                  if (sampleLines[s2] !== controlLines[c]) {
                    if (s2 !== 1 || c !== 1) {
                      do {
                        s2--;
                        c--;
                        if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name16 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name16 ? describeBuiltInComponentFrame(name16) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element2) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error4("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error4("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name16 = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name16) {
                return "\n\nCheck the render method of `" + name16 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source3) {
            if (source3 !== void 0) {
              var fileName = source3.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source3.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info2 = getDeclarationErrorAddendum();
            if (!info2) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info2;
          }
          function validateExplicitKey(element2, parentType) {
            if (!element2._store || element2._store.validated || element2.key != null) {
              return;
            }
            element2._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element2 && element2._owner && element2._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element2._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element2);
              error4('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator2 = iteratorFn.call(node);
                  var step3;
                  while (!(step3 = iterator2.next()).done) {
                    if (isValidElement(step3.value)) {
                      validateExplicitKey(step3.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name16 = getComponentNameFromType(type);
                checkPropTypes(propTypes, element2.props, "prop", name16, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error4("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error4("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys4 = Object.keys(fragment2.props);
              for (var i2 = 0; i2 < keys4.length; i2++) {
                var key = keys4[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error4("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error4("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children2) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info2 = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info2 += sourceInfo;
              } else {
                info2 += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info2 = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error4("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
              }
            }
            var element2 = createElement3.apply(this, arguments);
            if (element2 == null) {
              return element2;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element2);
            } else {
              validatePropTypes(element2);
            }
            return element2;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element2, props, children2) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope2, options2) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope2();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error4("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error5) {
                popActScope(prevActScopeDepth);
                throw error5;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve4, reject2) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve4, reject2);
                      } else {
                        resolve4(returnValue2);
                      }
                    }, function(error5) {
                      popActScope(prevActScopeDepth);
                      reject2(error5);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error4("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve4, reject2) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve4, reject2);
                      } else {
                        resolve4(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve4, reject2) {
                      resolve4(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error4("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve4, reject2) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve4(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve4, reject2);
                    }
                  });
                } catch (error5) {
                  reject2(error5);
                }
              } else {
                resolve4(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error5) {
                  queue = queue.slice(i2 + 1);
                  throw error5;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray6,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext2;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState2;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node) {
            var index5 = heap.length;
            heap.push(node);
            siftUp(heap, node, index5);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop2(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first2 = heap[0];
            var last3 = heap.pop();
            if (last3 !== first2) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first2;
          }
          function siftUp(heap, node, i2) {
            var index5 = i2;
            while (index5 > 0) {
              var parentIndex = index5 - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (compare9(parent2, node) > 0) {
                heap[parentIndex] = node;
                heap[index5] = parent2;
                index5 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index5 = i2;
            var length11 = heap.length;
            var halfLength = length11 >>> 1;
            while (index5 < halfLength) {
              var leftIndex = (index5 + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare9(left2, node) < 0) {
                if (rightIndex < length11 && compare9(right2, left2) < 0) {
                  heap[index5] = right2;
                  heap[rightIndex] = node;
                  index5 = rightIndex;
                } else {
                  heap[index5] = left2;
                  heap[leftIndex] = node;
                  index5 = leftIndex;
                }
              } else if (rightIndex < length11 && compare9(right2, node) < 0) {
                heap[index5] = right2;
                heap[rightIndex] = node;
                index5 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare9(a2, b2) {
            var diff3 = a2.sortIndex - b2.sortIndex;
            return diff3 !== 0 ? diff3 : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime2) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop2(timerQueue);
              } else if (timer.startTime <= currentTime2) {
                pop2(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime2) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime2);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error4) {
                  if (currentTask !== null) {
                    var currentTime2 = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime2);
                    currentTask.isQueued = false;
                  }
                  throw error4;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime2 = initialTime2;
            advanceTimers(currentTime2);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime2 && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime2;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime2 = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop2(taskQueue);
                  }
                }
                advanceTimers(currentTime2);
              } else {
                pop2(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options2) {
            var currentTime2 = exports.unstable_now();
            var startTime2;
            if (typeof options2 === "object" && options2 !== null) {
              var delay2 = options2.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime2 = currentTime2 + delay2;
              } else {
                startTime2 = currentTime2;
              }
            } else {
              startTime2 = currentTime2;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime2) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime2);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime2 = exports.unstable_now();
              startTime = currentTime2;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime2);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port2 = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port2.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React6 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error4(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment2 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error4("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value14) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value14[Symbol.toStringTag] || value14.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value14) {
            {
              try {
                testStringCoercion(value14);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value14) {
            return "" + value14;
          }
          function checkAttributeStringCoercion(value14, attributeName) {
            {
              if (willCoercionThrow(value14)) {
                error4("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          function checkKeyStringCoercion(value14) {
            {
              if (willCoercionThrow(value14)) {
                error4("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          function checkPropStringCoercion(value14, propName) {
            {
              if (willCoercionThrow(value14)) {
                error4("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value14, propName) {
            {
              if (willCoercionThrow(value14)) {
                error4("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          function checkHtmlStringCoercion(value14) {
            {
              if (willCoercionThrow(value14)) {
                error4("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value14) {
            {
              if (willCoercionThrow(value14)) {
                error4("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value14));
                return testStringCoercion(value14);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error4("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name16, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name16.length > 2 && (name16[0] === "o" || name16[0] === "O") && (name16[1] === "n" || name16[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name16, value14, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value14) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name16.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name16, value14, propertyInfo, isCustomComponentTag) {
            if (value14 === null || typeof value14 === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name16, value14, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value14;
                case OVERLOADED_BOOLEAN:
                  return value14 === false;
                case NUMERIC:
                  return isNaN(value14);
                case POSITIVE_NUMERIC:
                  return isNaN(value14) || value14 < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name16) {
            return properties.hasOwnProperty(name16) ? properties[name16] : null;
          }
          function PropertyInfoRecord(name16, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name16;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              RESERVED,
              false,
              name16,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name16 = _ref[0], attributeName = _ref[1];
            properties[name16] = new PropertyInfoRecord(
              name16,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              BOOLEANISH_STRING,
              false,
              name16.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              BOOLEANISH_STRING,
              false,
              name16,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              BOOLEAN,
              false,
              name16.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              BOOLEAN,
              true,
              name16,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              OVERLOADED_BOOLEAN,
              false,
              name16,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              POSITIVE_NUMERIC,
              false,
              name16,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name16) {
            properties[name16] = new PropertyInfoRecord(
              name16,
              NUMERIC,
              false,
              name16.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name16 = attributeName.replace(CAMELIZE, capitalize);
            properties[name16] = new PropertyInfoRecord(
              name16,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name16 = attributeName.replace(CAMELIZE, capitalize);
            properties[name16] = new PropertyInfoRecord(
              name16,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name16 = attributeName.replace(CAMELIZE, capitalize);
            properties[name16] = new PropertyInfoRecord(
              name16,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url3) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url3)) {
                didWarn = true;
                error4("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url3));
              }
            }
          }
          function getValueForProperty(node, name16, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name16);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value14 = node.getAttribute(attributeName);
                    if (value14 === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name16, expected, propertyInfo, false)) {
                      return value14;
                    }
                    if (value14 === "" + expected) {
                      return expected;
                    }
                    return value14;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name16, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name16, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name16, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name16)) {
                return;
              }
              if (!node.hasAttribute(name16)) {
                return expected === void 0 ? void 0 : null;
              }
              var value14 = node.getAttribute(name16);
              {
                checkAttributeStringCoercion(expected, name16);
              }
              if (value14 === "" + expected) {
                return expected;
              }
              return value14;
            }
          }
          function setValueForProperty(node, name16, value14, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name16);
            if (shouldIgnoreAttribute(name16, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name16, value14, propertyInfo, isCustomComponentTag)) {
              value14 = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name16)) {
                var _attributeName = name16;
                if (value14 === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value14, name16);
                  }
                  node.setAttribute(_attributeName, "" + value14);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value14 === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value14;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value14 === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value14 === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value14, attributeName);
                  }
                  attributeValue = "" + value14;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error4("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name16, source3, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name16;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
                  c--;
                }
                for (; s2 >= 1 && c >= 0; s2--, c--) {
                  if (sampleLines[s2] !== controlLines[c]) {
                    if (s2 !== 1 || c !== 1) {
                      do {
                        s2--;
                        c--;
                        if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name16 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name16 ? describeBuiltInComponentFrame(name16) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source3, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source3 = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info2 = "";
              var node = workInProgress2;
              do {
                info2 += describeFiber(node);
                node = node.return;
              } while (node);
              return info2;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error4("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init3(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag2 = fiber.tag, type = fiber.type;
            switch (tag2) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider2 = type;
                return getContextName$1(provider2._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment2:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString11(value14) {
            return "" + value14;
          }
          function getToStringValue(value14) {
            switch (typeof value14) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value14;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value14);
                }
                return value14;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName2, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error4("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error4("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem5) {
            var type = elem5.type;
            var nodeName2 = elem5.nodeName;
            return nodeName2 && nodeName2.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value14 = "";
            if (!node) {
              return value14;
            }
            if (isCheckable(node)) {
              value14 = node.checked ? "true" : "false";
            } else {
              value14 = node.value;
            }
            return value14;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value14) {
                {
                  checkFormFieldValueStringCoercion(value14);
                }
                currentValue = "" + value14;
                set4.call(this, value14);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value14) {
                {
                  checkFormFieldValueStringCoercion(value14);
                }
                currentValue = "" + value14;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track2(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element2, props) {
            var node = element2;
            var checked2 = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked2 != null ? checked2 : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element2, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error4("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error4("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element2;
            var defaultValue4 = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue4),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element2, props) {
            var node = element2;
            var checked2 = props.checked;
            if (checked2 != null) {
              setValueForProperty(node, "checked", checked2, false);
            }
          }
          function updateWrapper(element2, props) {
            var node = element2;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error4("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error4("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element2, props);
            var value14 = getToStringValue(props.value);
            var type = props.type;
            if (value14 != null) {
              if (type === "number") {
                if (value14 === 0 && node.value === "" || node.value != value14) {
                  node.value = toString11(value14);
                }
              } else if (node.value !== toString11(value14)) {
                node.value = toString11(value14);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue4(node, props.type, value14);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue4(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element2, props, isHydrating2) {
            var node = element2;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString11(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name16 = node.name;
            if (name16 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name16 !== "") {
              node.name = name16;
            }
          }
          function restoreControlledState(element2, props) {
            var node = element2;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name16 = props.name;
            if (props.type === "radio" && name16 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name16, "name");
              }
              var group3 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name16) + '][type="radio"]');
              for (var i2 = 0; i2 < group3.length; i2++) {
                var otherNode = group3[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue4(node, type, value14) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value14 == null) {
                node.defaultValue = toString11(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString11(value14)) {
                node.defaultValue = toString11(value14);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element2, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React6.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error4("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error4("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error4("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element2, props) {
            if (props.value != null) {
              element2.setAttribute("value", toString11(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error4("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error4("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple3, propValue, setDefaultSelected2) {
            var options3 = node.options;
            if (multiple3) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options3.length; _i++) {
                var selected2 = selectedValue.hasOwnProperty("$" + options3[_i].value);
                if (options3[_i].selected !== selected2) {
                  options3[_i].selected = selected2;
                }
                if (selected2 && setDefaultSelected2) {
                  options3[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString11(getToStringValue(propValue));
              var defaultSelected2 = null;
              for (var _i2 = 0; _i2 < options3.length; _i2++) {
                if (options3[_i2].value === _selectedValue) {
                  options3[_i2].selected = true;
                  if (setDefaultSelected2) {
                    options3[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected2 === null && !options3[_i2].disabled) {
                  defaultSelected2 = options3[_i2];
                }
              }
              if (defaultSelected2 !== null) {
                defaultSelected2.selected = true;
              }
            }
          }
          function getHostProps$1(element2, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element2, props) {
            var node = element2;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error4("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element2, props) {
            var node = element2;
            node.multiple = !!props.multiple;
            var value14 = props.value;
            if (value14 != null) {
              updateOptions(node, !!props.multiple, value14, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element2, props) {
            var node = element2;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value14 = props.value;
            if (value14 != null) {
              updateOptions(node, !!props.multiple, value14, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element2, props) {
            var node = element2;
            var value14 = props.value;
            if (value14 != null) {
              updateOptions(node, !!props.multiple, value14, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element2, props) {
            var node = element2;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString11(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element2, props) {
            var node = element2;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error4("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children2 = props.children, defaultValue4 = props.defaultValue;
              if (children2 != null) {
                {
                  error4("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue4 != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children2)) {
                    if (children2.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children2 = children2[0];
                  }
                  defaultValue4 = children2;
                }
              }
              if (defaultValue4 == null) {
                defaultValue4 = "";
              }
              initialValue = defaultValue4;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element2, props) {
            var node = element2;
            var value14 = getToStringValue(props.value);
            var defaultValue4 = getToStringValue(props.defaultValue);
            if (value14 != null) {
              var newValue = toString11(value14);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue4 != null) {
              node.defaultValue = toString11(defaultValue4);
            }
          }
          function postMountWrapper$3(element2, props) {
            var node = element2;
            var textContent2 = node.textContent;
            if (textContent2 === node._wrapperState.initialValue) {
              if (textContent2 !== "" && textContent2 !== null) {
                node.value = textContent2;
              }
            }
          }
          function restoreControlledState$2(element2, props) {
            updateWrapper$1(element2, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent2 = function(node, text8) {
            if (text8) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text8;
                return;
              }
            }
            node.textContent = text8;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop2) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop2)] = isUnitlessNumber[prop2];
            });
          });
          function dangerousStyleValue(name16, value14, isCustomProperty) {
            var isEmpty2 = value14 == null || typeof value14 === "boolean" || value14 === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value14 === "number" && value14 !== 0 && !(isUnitlessNumber.hasOwnProperty(name16) && isUnitlessNumber[name16])) {
              return value14 + "px";
            }
            {
              checkCSSPropertyStringCoercion(value14, name16);
            }
            return ("" + value14).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name16) {
            return name16.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name16) {
              if (warnedStyleNames.hasOwnProperty(name16) && warnedStyleNames[name16]) {
                return;
              }
              warnedStyleNames[name16] = true;
              error4(
                "Unsupported style property %s. Did you mean %s?",
                name16,
                camelize(name16.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name16) {
              if (warnedStyleNames.hasOwnProperty(name16) && warnedStyleNames[name16]) {
                return;
              }
              warnedStyleNames[name16] = true;
              error4("Unsupported vendor-prefixed style property %s. Did you mean %s?", name16, name16.charAt(0).toUpperCase() + name16.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name16, value14) {
              if (warnedStyleValues.hasOwnProperty(value14) && warnedStyleValues[value14]) {
                return;
              }
              warnedStyleValues[value14] = true;
              error4(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name16, value14.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name16, value14) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error4("`NaN` is an invalid value for the `%s` css style property.", name16);
            };
            var warnStyleValueIsInfinity = function(name16, value14) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error4("`Infinity` is an invalid value for the `%s` css style property.", name16);
            };
            warnValidStyle = function(name16, value14) {
              if (name16.indexOf("-") > -1) {
                warnHyphenatedStyleName(name16);
              } else if (badVendoredStyleNamePattern.test(name16)) {
                warnBadVendoredStyleName(name16);
              } else if (badStyleValueWithSemicolonPattern.test(value14)) {
                warnStyleValueWithSemicolon(name16, value14);
              }
              if (typeof value14 === "number") {
                if (isNaN(value14)) {
                  warnStyleValueIsNaN(name16, value14);
                } else if (!isFinite(value14)) {
                  warnStyleValueIsInfinity(name16, value14);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style3 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value14) {
            return value14 == null || typeof value14 === "boolean" || value14 === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error4("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag2, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag2]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error4("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName2, props) {
            if (tagName2.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName2) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName2, name16) {
            {
              if (hasOwnProperty2.call(warnedProperties, name16) && warnedProperties[name16]) {
                return true;
              }
              if (rARIACamel.test(name16)) {
                var ariaName = "aria-" + name16.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error4("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name16);
                  warnedProperties[name16] = true;
                  return true;
                }
                if (name16 !== correctName) {
                  error4("Invalid ARIA attribute `%s`. Did you mean `%s`?", name16, correctName);
                  warnedProperties[name16] = true;
                  return true;
                }
              }
              if (rARIA.test(name16)) {
                var lowerCasedName = name16.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name16] = true;
                  return false;
                }
                if (name16 !== standardName) {
                  error4("Unknown ARIA attribute `%s`. Did you mean `%s`?", name16, standardName);
                  warnedProperties[name16] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error4("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error4("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error4("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error4("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName2, name16, value14, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name16) && warnedProperties$1[name16]) {
                return true;
              }
              var lowerCasedName = name16.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error4("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name16] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name16)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error4("Invalid event handler property `%s`. Did you mean `%s`?", name16, registrationName);
                  warnedProperties$1[name16] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name16)) {
                  error4("Unknown event handler property `%s`. It will be ignored.", name16);
                  warnedProperties$1[name16] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name16)) {
                if (INVALID_EVENT_NAME_REGEX.test(name16)) {
                  error4("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name16);
                }
                warnedProperties$1[name16] = true;
                return true;
              }
              if (rARIA$1.test(name16) || rARIACamel$1.test(name16)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error4("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name16] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error4("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name16] = true;
                return true;
              }
              if (lowerCasedName === "is" && value14 !== null && value14 !== void 0 && typeof value14 !== "string") {
                error4("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value14);
                warnedProperties$1[name16] = true;
                return true;
              }
              if (typeof value14 === "number" && isNaN(value14)) {
                error4("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name16);
                warnedProperties$1[name16] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name16);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name16) {
                  error4("Invalid DOM property `%s`. Did you mean `%s`?", name16, standardName);
                  warnedProperties$1[name16] = true;
                  return true;
                }
              } else if (!isReserved && name16 !== lowerCasedName) {
                error4("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name16, lowerCasedName);
                warnedProperties$1[name16] = true;
                return true;
              }
              if (typeof value14 === "boolean" && shouldRemoveAttributeWithWarning(name16, value14, propertyInfo, false)) {
                if (value14) {
                  error4('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value14, name16, name16, value14, name16);
                } else {
                  error4('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value14, name16, name16, value14, name16, name16, name16);
                }
                warnedProperties$1[name16] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name16, value14, propertyInfo, false)) {
                warnedProperties$1[name16] = true;
                return false;
              }
              if ((value14 === "false" || value14 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error4("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value14, name16, value14 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name16, value14);
                warnedProperties$1[name16] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error4("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error4("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error4("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error4("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target5 = nativeEvent.target || nativeEvent.srcElement || window;
            if (target5.correspondingUseElement) {
              target5 = target5.correspondingUseElement;
            }
            return target5.nodeType === TEXT_NODE ? target5.parentNode : target5;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target5) {
            var internalInstance = getInstanceFromNode(target5);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target5) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target5);
              } else {
                restoreQueue = [target5];
              }
            } else {
              restoreTarget = target5;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target5 = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target5);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag2) {
            return tag2 === "button" || tag2 === "input" || tag2 === "select" || tag2 === "textarea";
          }
          function shouldPreventMouseEvent(name16, type, props) {
            switch (name16) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options2 = {};
              Object.defineProperty(options2, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options2, options2);
              window.removeEventListener("test", options2, options2);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name16, func, context, a2, b2, c, d, e2, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error5) {
              this.onError(error5);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name16, func, context, a2, b2, c, d, e2, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error5;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error5 = event.error;
                  didSetError = true;
                  if (error5 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error5 != null && typeof error5 === "object") {
                      try {
                        error5._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name16 ? name16 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error5 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error5 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error5);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error5) {
              hasError = true;
              caughtError = error5;
            }
          };
          function invokeGuardedCallback(name16, func, context, a2, b2, c, d, e2, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name16, func, context, a2, b2, c, d, e2, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error5 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error5;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error5 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error5;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error5 = caughtError;
              hasError = false;
              caughtError = null;
              return error5;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value14) {
            key._reactInternals = value14;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component2) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error4("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component2);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error4("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error4("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children2) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children2);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error4("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error4("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error4("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error4("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error4("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map37 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index6 = 0; index6 < TotalLanes; index6++) {
                var label7 = getLabelForLane(lane);
                map37.set(lane, label7);
                lane *= 2;
              }
              return map37;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log5 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log5(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error4("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index6 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index6;
                nextLanes |= entanglements[index6];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              var eventTime = eventTimes[index6];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime2) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime2 + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime2 + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error4("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime2) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              var expirationTime = expirationTimes[index6];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index6] = computeExpirationTime(lane, currentTime2);
                }
              } else if (expirationTime <= currentTime2) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index6 = laneToIndex(updateLane);
            eventTimes[index6] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              expirationTimes[index6] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              entanglements[index6] = NoLanes;
              eventTimes[index6] = NoTimestamp;
              expirationTimes[index6] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              if (lane & entangledLanes | entanglements[index6] & entangledLanes) {
                entanglements[index6] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index6 = laneToIndex(lanes);
              var lane = 1 << index6;
              var updaters = pendingUpdatersLaneMap[index6];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index6 = laneToIndex(lanes);
              var lane = 1 << index6;
              var updaters = pendingUpdatersLaneMap[index6];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag2 = nearestMounted.tag;
                if (tag2 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag2 === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target5) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target: target5,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map37) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map37.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled2() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag2 = nearestMounted.tag;
                if (tag2 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag2 === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target5, eventType, listener) {
            target5.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target5, eventType, listener) {
            target5.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target5, eventType, listener, passive) {
            target5.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target5, eventType, listener, passive) {
            target5.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset2() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset2();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem5) {
            var nodeName2 = elem5 && elem5.nodeName && elem5.nodeName.toLowerCase();
            if (nodeName2 === "input") {
              return !!supportedInputTypes[elem5.type];
            }
            if (nodeName2 === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element2 = document.createElement("div");
              element2.setAttribute(eventName, "return;");
              isSupported = typeof element2[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target5) {
            enqueueStateRestore(target5);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target5);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem5) {
            var nodeName2 = elem5.nodeName && elem5.nodeName.toLowerCase();
            return nodeName2 === "select" || nodeName2 === "input" && elem5.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target5, targetInst) {
            activeElement = target5;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target5, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target5, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem5) {
            var nodeName2 = elem5.nodeName;
            return nodeName2 && nodeName2.toLowerCase() === "input" && (elem5.type === "checkbox" || elem5.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state3 = node._wrapperState;
            if (!state3 || !state3.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue4(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from3;
            var to3;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from3 = targetInst;
              to3 = _related ? getClosestInstanceFromNode(_related) : null;
              if (to3 !== null) {
                var nearestMounted = getNearestMountedFiber(to3);
                if (to3 !== nearestMounted || to3.tag !== HostComponent && to3.tag !== HostText) {
                  to3 = null;
                }
              }
            } else {
              from3 = null;
              to3 = targetInst;
            }
            if (from3 === to3) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from3 == null ? win : getNodeFromInstance(from3);
            var toNode2 = to3 == null ? win : getNodeFromInstance(to3);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode2;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to3, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode2;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from3, to3);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length11 = 0;
            var start2 = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start2 = length11 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length11 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length11 += node.nodeValue.length;
                  }
                  if ((next2 = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next2;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length11;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length11;
                  }
                  if ((next2 = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next2;
              }
            if (start2 === -1 || end === -1) {
              return null;
            }
            return {
              start: start2,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length11 = node.textContent.length;
            var start2 = Math.min(offsets.start, length11);
            var end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length11);
            if (!selection.extend && start2 > end) {
              var temp = end;
              end = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start2);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range4 = doc.createRange();
              range4.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end) {
                selection.addRange(range4);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range4.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range4);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe2) {
            try {
              return typeof iframe2.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element2 = getActiveElement();
            while (element2 instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element2)) {
                win = element2.contentWindow;
              } else {
                return element2;
              }
              element2 = getActiveElement(win.document);
            }
            return element2;
          }
          function hasSelectionCapabilities(elem5) {
            var nodeName2 = elem5 && elem5.nodeName && elem5.nodeName.toLowerCase();
            return nodeName2 && (nodeName2 === "input" && (elem5.type === "text" || elem5.type === "search" || elem5.type === "tel" || elem5.type === "url" || elem5.type === "password") || nodeName2 === "textarea" || elem5.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info2 = ancestors[i2];
                info2.element.scrollLeft = info2.left;
                info2.element.scrollTop = info2.top;
              }
            }
          }
          function getSelection(input3) {
            var selection;
            if ("selectionStart" in input3) {
              selection = {
                start: input3.selectionStart,
                end: input3.selectionEnd
              };
            } else {
              selection = getOffsets(input3);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input3, offsets) {
            var start2 = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start2;
            }
            if ("selectionStart" in input3) {
              input3.selectionStart = start2;
              input3.selectionEnd = Math.min(end, input3.value.length);
            } else {
              setOffsets(input3, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error4('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target5) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error4('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target5, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag2 = _instance2.tag;
              if (tag2 === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag2 = _instance3.tag;
              if (tag2 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target5, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target5;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag2 = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag2 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to3) {
            var common = from3 && to3 ? getLowestCommonAncestor(from3, to3) : null;
            if (from3 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common, false);
            }
            if (to3 !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to3, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error4("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name16) {
                names.push(name16);
              });
              error4("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error4("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error4("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html2) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error4('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag2, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag2 !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent2(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent2(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent2(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement3(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error4("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div16 = ownerDocument.createElement("div");
                div16.innerHTML = "<script><\/script>";
                var firstChild = div16.firstChild;
                domElement = div16.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error4("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode2(text8, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text8);
          }
          function setInitialProperties(domElement, tag2, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag2, rawProps);
            {
              validatePropertiesInDevelopment(tag2, rawProps);
            }
            var props;
            switch (tag2) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag2, props);
            setInitialDOMProperties(tag2, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag2) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag2, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag2, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag2) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag2, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag2, lastRawProps, nextRawProps) {
            if (tag2 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag2, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag2, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag2) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag2, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag2, rawProps);
              validatePropertiesInDevelopment(tag2, rawProps);
            }
            switch (tag2) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag2, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name16 = attributes[_i].name.toLowerCase();
                switch (name16) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag2);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag2) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text8, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text8;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error4("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error4('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag2, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error4("Expected server HTML to contain a matching <%s> in <%s>.", tag2, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text8) {
            {
              if (text8 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error4('Expected server HTML to contain a matching text node for "%s" in <%s>.', text8, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag2, props) {
            switch (tag2) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag2) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info2 = {
                tag: tag2
              };
              if (inScopeTags.indexOf(tag2) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag2) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag2) !== -1 && tag2 !== "address" && tag2 !== "div" && tag2 !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info2;
              if (tag2 === "form") {
                ancestorInfo.formTag = info2;
              }
              if (tag2 === "a") {
                ancestorInfo.aTagInScope = info2;
              }
              if (tag2 === "button") {
                ancestorInfo.buttonTagInScope = info2;
              }
              if (tag2 === "nobr") {
                ancestorInfo.nobrTagInScope = info2;
              }
              if (tag2 === "p") {
                ancestorInfo.pTagInButtonScope = info2;
              }
              if (tag2 === "li") {
                ancestorInfo.listItemTagAutoclosing = info2;
              }
              if (tag2 === "dd" || tag2 === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info2;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag2, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag2 === "option" || tag2 === "optgroup" || tag2 === "#text";
                case "optgroup":
                  return tag2 === "option" || tag2 === "#text";
                case "option":
                  return tag2 === "#text";
                case "tr":
                  return tag2 === "th" || tag2 === "td" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag2 === "tr" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "colgroup":
                  return tag2 === "col" || tag2 === "template";
                case "table":
                  return tag2 === "caption" || tag2 === "colgroup" || tag2 === "tbody" || tag2 === "tfoot" || tag2 === "thead" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "head":
                  return tag2 === "base" || tag2 === "basefont" || tag2 === "bgsound" || tag2 === "link" || tag2 === "meta" || tag2 === "title" || tag2 === "noscript" || tag2 === "noframes" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "html":
                  return tag2 === "head" || tag2 === "body" || tag2 === "frameset";
                case "frameset":
                  return tag2 === "frame";
                case "#document":
                  return tag2 === "html";
              }
              switch (tag2) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag2, ancestorInfo) {
              switch (tag2) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error4("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info2 = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error4("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
              } else {
                error4("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled2();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text8, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text8, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode2(text8, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error5) {
            setTimeout(function() {
              throw error5;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent2(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild2(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore2(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild2(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text8) {
            textInstance.nodeValue = text8;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text8) {
            if (text8 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message2, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message2 = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message: message2,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text8, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text8);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text8, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text8, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text8, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text8, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text8) {
            {
              warnForInsertedHydratedText(parentContainer, text8);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text8) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text8);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text8, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text8);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error4("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error4("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error4("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index5 = -1;
          function createCursor(defaultValue4) {
            return {
              current: defaultValue4
            };
          }
          function pop2(cursor, fiber) {
            if (index5 < 0) {
              {
                error4("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index5]) {
                error4("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index5];
            valueStack[index5] = null;
            {
              fiberStack[index5] = null;
            }
            index5--;
          }
          function push2(cursor, value14, fiber) {
            index5++;
            valueStack[index5] = cursor.current;
            {
              fiberStack[index5] = fiber;
            }
            cursor.current = value14;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name16 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name16);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error4("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name16 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name16);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop2(didPerformWorkStackCursor, workInProgress2);
                pop2(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop2(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error5) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error5;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id3.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index6) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot2 = index6 + 1;
            var length11 = getBitLength(totalChildren) + baseLength;
            if (length11 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot2 << restOfBaseLength;
              var id3 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id3;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot2 << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length11 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id3) {
            return 1 << getBitLength(id3) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error4("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error4("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text8 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text8);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text8 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text8);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent2 = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent2, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent2,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent2,
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error5) {
            if (hydrationErrors === null) {
              hydrationErrors = [error5];
            } else {
              hydrationErrors.push(error5);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array2 = [];
              set4.forEach(function(value14) {
                array2.push(value14);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error4("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error4("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error4("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error4("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error4("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error4("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop2(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node = parent2;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error4("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update2 = createUpdate(NoTimestamp, lane);
                      update2.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update2.next = update2;
                        } else {
                          update2.next = pending.next;
                          pending.next = update2;
                        }
                        sharedQueue.pending = update2;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error4("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value14 = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value14,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value14;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent2;
              parent2 = parent2.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone3 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone3;
            }
          }
          function createUpdate(eventTime, lane) {
            var update2 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update2;
          }
          function enqueueUpdate(fiber, update2, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error4("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update2.next = update2;
              } else {
                update2.next = pending.next;
                pending.next = update2;
              }
              sharedQueue.pending = update2;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update2, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update2 = firstBaseUpdate;
                  do {
                    var clone3 = {
                      eventTime: update2.eventTime,
                      lane: update2.lane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone3;
                    } else {
                      newLast.next = clone3;
                      newLast = clone3;
                    }
                    update2 = update2.next;
                  } while (update2 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
            switch (update2.tag) {
              case ReplaceState: {
                var payload = update2.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update2.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update2 = firstBaseUpdate;
              do {
                var updateLane = update2.lane;
                var updateEventTime = update2.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone3 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone3;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone3;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null && update2.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update2 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React6.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error4("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error4("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update2.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update2, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ReplaceState;
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update2.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update2, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update2.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update2, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error4("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name16 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error4("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name16);
                } else {
                  error4("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name16);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error4("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name16);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error4("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name16);
              }
              if (instance.propTypes) {
                error4("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name16);
              }
              if (instance.contextType) {
                error4("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name16);
              }
              {
                if (instance.contextTypes) {
                  error4("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name16);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error4("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name16);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error4("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name16);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error4("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error4("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name16);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error4("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name16);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error4("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name16);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error4("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name16);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error4("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name16, name16);
              }
              if (instance.defaultProps) {
                error4("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name16, name16);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error4("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error4("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name16);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error4("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name16);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error4("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name16);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error4("%s.state: must be set to an object or null", name16);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error4("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name16);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error4("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state3 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state3 === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error4("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error4("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error4("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error4("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error4("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error4('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element2) {
            var mixedRef = element2.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element2._owner && element2._self && element2._owner.stateNode !== element2._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error4('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element2._owner) {
                var owner = element2._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value14) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value14 === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value14;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element2._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error4("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init3 = lazyType._init;
            return init3(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone3 = createWorkInProgress(fiber, pendingProps);
              clone3.index = 0;
              clone3.sibling = null;
              return clone3;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent2, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element2, lanes) {
              var elementType = element2.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element2.props.children, lanes, element2.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element2) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element2.props);
                  existing.ref = coerceRef(returnFiber, current2, element2);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element2._source;
                    existing._debugOwner = element2._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element2, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element2);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment2, lanes, key) {
              if (current2 === null || current2.tag !== Fragment2) {
                var created = createFiberFromFragment(fragment2, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return createChild(returnFiber, init3(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init3(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init3(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error4("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init3 = child._init;
                    warnOnInvalidKey(init3(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error4("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error4("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step3 = newChildren.next();
              for (; oldFiber !== null && !step3.done; newIdx++, step3 = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step3.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step3.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step3.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step3.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent2, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent2);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element2, lanes) {
              var key = element2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element2.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment2) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element2.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element2._source;
                        existing._debugOwner = element2._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element2) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element2.props);
                      _existing.ref = coerceRef(returnFiber, child, element2);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element2._source;
                        _existing._debugOwner = element2._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element2.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element2.props.children, returnFiber.mode, lanes, element2.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element2, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element2);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init3(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop2(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
            pop2(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop2(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state3 = node.memoizedState;
                if (state3 !== null) {
                  var dehydrated = state3.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error4("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table5 = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table5 += row;
                  }
                  error4("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table5);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error4("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error4("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children2 = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children2 = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error4("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state3, action2) {
            return typeof action2 === "function" ? action2(state3) : action2;
          }
          function mountReducer(reducer, initialArg, init3) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init3 !== void 0) {
              initialState = init3(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init3) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error4("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first2 = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update2 = first2;
              do {
                var updateLane = update2.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone3 = {
                    lane: updateLane,
                    action: update2.action,
                    hasEagerState: update2.hasEagerState,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone3;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone3;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update2.action,
                      hasEagerState: update2.hasEagerState,
                      eagerState: update2.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update2.hasEagerState) {
                    newState = update2.eagerState;
                  } else {
                    var action2 = update2.action;
                    newState = reducer(newState, action2);
                  }
                }
                update2 = update2.next;
              } while (update2 !== null && update2 !== first2);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init3) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update2 = firstRenderPhaseUpdate;
              do {
                var action2 = update2.action;
                newState = reducer(newState, action2);
                update2 = update2.next;
              } while (update2 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source3, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source3, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error4("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error4("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error4("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error5) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag2, create3, destroy, deps) {
            var effect = {
              tag: tag2,
              create: create3,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create3, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
          }
          function mountEffect(create3, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create3, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create3, deps);
            }
          }
          function updateEffect(create3, deps) {
            return updateEffectImpl(Passive, Passive$1, create3, deps);
          }
          function mountInsertionEffect(create3, deps) {
            return mountEffectImpl(Update, Insertion, create3, deps);
          }
          function updateInsertionEffect(create3, deps) {
            return updateEffectImpl(Update, Insertion, create3, deps);
          }
          function mountLayoutEffect(create3, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create3, deps);
          }
          function updateLayoutEffect(create3, deps) {
            return updateEffectImpl(Update, Layout, create3, deps);
          }
          function imperativeHandleEffect(create3, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create3();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error4("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create3();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error4("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error4("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
          }
          function mountDebugValue(value14, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value14) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value14;
            return value14;
          }
          function updateDeferredValue(value14) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value14);
          }
          function rerenderDeferredValue(value14) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value14;
              return value14;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value14);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value14) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value14, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value14;
              return value14;
            }
          }
          function startTransition(setPending, callback, options3) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id3;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id3 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id3 += "H" + localId.toString(32);
              }
              id3 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id3 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id3;
            return id3;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id3 = hook.memoizedState;
            return id3;
          }
          function dispatchReducerAction(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error4("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error4("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action2);
                    update2.hasEagerState = true;
                    update2.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane);
                      return;
                    }
                  } catch (error5) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update2) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            queue.pending = update2;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action2) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error4("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error4("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value14, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value14) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value14);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value14, source3) {
            return {
              value: value14,
              source: source3,
              stack: getStackByFiberInDevAndProd(source3),
              digest: null
            };
          }
          function createCapturedValue(value14, digest, stack) {
            return {
              value: value14,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error5 = errorInfo.value;
              if (true) {
                var source3 = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error5 != null && error5._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error5);
                }
                var componentName = source3 ? getComponentNameFromFiber(source3) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error5);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            update2.payload = {
              element: null
            };
            var error5 = errorInfo.value;
            update2.callback = function() {
              onUncaughtError(error5);
              logCapturedError(fiber, errorInfo);
            };
            return update2;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update2.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update2.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update2.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error4("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update2;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag2 = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag2 === FunctionComponent || tag2 === ForwardRef || tag2 === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update2 = createUpdate(NoTimestamp, SyncLane);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update2, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException2(root2, returnFiber, sourceFiber, value14, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value14 !== null && typeof value14 === "object" && typeof value14.then === "function") {
              var wakeable = value14;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value14 = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value14, sourceFiber));
                  return;
                }
              }
            }
            value14 = createCapturedValueAtFiber(value14, sourceFiber);
            renderDidError(value14);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value14;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value14;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare9 = Component.compare;
              compare9 = compare9 !== null ? compare9 : shallowEqual;
              if (compare9(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    outerMemoType = init3(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state3 = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state3, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error4("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            var Component = init3(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value14;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error4("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value14 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value14 === "object" && value14 !== null && typeof value14.render === "function" && value14.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error4("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value14 === "object" && value14 !== null && typeof value14.render === "function" && value14.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error4("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value14.state !== null && value14.state !== void 0 ? value14.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value14);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value14 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value14, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error4("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info2 = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error4("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error4("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error4("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error4("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message2, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message2 = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error5;
                if (message2) {
                  error5 = new Error(message2);
                } else {
                  error5 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error5, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state3 = node.memoizedState;
                if (state3 !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error4('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error4('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error4('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error4('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error4('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error4('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index6) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error4("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index6, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children2, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
                if (isArray2(children2)) {
                  for (var i2 = 0; i2 < children2.length; i2++) {
                    if (!validateSuspenseListNestedChild(children2[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children2);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children2);
                    if (childrenIterator) {
                      var step3 = childrenIterator.next();
                      var _i = 0;
                      for (; !step3.done; step3 = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step3.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error4('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail3, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail: tail3,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail3;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail3;
                  if (lastContentRow === null) {
                    tail3 = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail3 = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail3,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error4("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error4("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error4("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state3 = workInProgress2.memoizedState;
                if (state3 !== null) {
                  if (state3.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment2:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent2, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment2:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now2();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error5) {
            {
              invokeGuardedCallback(null, function() {
                throw error5;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error5) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error5);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error5) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error5);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error5) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error5);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error5) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error5);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error5) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error5);
                }
                {
                  if (typeof retVal === "function") {
                    error4("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error5) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error5);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error5) {
                captureCommitPhaseError(fiber, fiber.return, error5);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error4("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error4("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error4("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create3 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create3();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error4("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id3 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id3, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error4("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error4("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error4("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error4("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error4("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error4("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error5) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error5) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error4("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error4("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
            var tag2 = node.tag;
            var isHost = tag2 === HostComponent || tag2 === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag2 === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent2) {
            var tag2 = node.tag;
            var isHost = tag2 === HostComponent || tag2 === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore2(parent2, stateNode, before);
              } else {
                appendChild2(parent2, stateNode);
              }
            } else if (tag2 === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent:
                while (parent2 !== null) {
                  switch (parent2.tag) {
                    case HostComponent: {
                      hostParent = parent2.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent2 = parent2.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild2(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag2 = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag2 & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag2 & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error5) {
                  captureCommitPhaseError(childToDelete, parentFiber, error5);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error5) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error5) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error5) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error5) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error5) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error5) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error5) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error5) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error5) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error5);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error5) {
                  captureCommitPhaseError(fiber, fiber.return, error5);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error5) {
                captureCommitPhaseError(fiber, fiber.return, error5);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error5) {
                  captureCommitPhaseError(fiber, fiber.return, error5);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error5) {
                    captureCommitPhaseError(fiber, fiber.return, error5);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error5) {
                    captureCommitPhaseError(fiber, fiber.return, error5);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error5) {
                    captureCommitPhaseError(fiber, fiber.return, error5);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error5) {
                    captureCommitPhaseError(fiber, fiber.return, error5);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error5) {
                    captureCommitPhaseError(fiber, fiber.return, error5);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error4("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil5 = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error4("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root2, currentTime2) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime2);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error4("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now2());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now2());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error5) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now2());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop2(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException2(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error5) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error5];
            } else {
              workInProgressRootConcurrentErrors.push(error5);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error4("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error5) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error5;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error5) {
            var errorInfo = createCapturedValueAtFiber(error5, sourceFiber);
            var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update2, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update2, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error4("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil5(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error4("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag2 = fiber.tag;
              if (tag2 !== IndeterminateComponent && tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error4("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error4("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error4("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error4("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error4("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler2) {
            {
              resolveFamily = handler2;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element2) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element2.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update2) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element2) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element2, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag2) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag2 === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag2) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag2, pendingProps, key, mode) {
            this.tag = tag2;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag2, pendingProps, key, mode) {
            return new FiberNode(tag2, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag2, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag2 === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info2 = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element2, mode, lanes) {
            var owner = null;
            {
              owner = element2._owner;
            }
            var type = element2.type;
            var key = element2.key;
            var pendingProps = element2.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element2._source;
              fiber._debugOwner = element2._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements2, mode, lanes, key) {
            var fiber = createFiber(Fragment2, elements2, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error4('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content4, mode, lanes) {
            var fiber = createFiber(HostText, content4, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target5, source3) {
            if (target5 === null) {
              target5 = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target5.tag = source3.tag;
            target5.key = source3.key;
            target5.elementType = source3.elementType;
            target5.type = source3.type;
            target5.stateNode = source3.stateNode;
            target5.return = source3.return;
            target5.child = source3.child;
            target5.sibling = source3.sibling;
            target5.index = source3.index;
            target5.ref = source3.ref;
            target5.pendingProps = source3.pendingProps;
            target5.memoizedProps = source3.memoizedProps;
            target5.updateQueue = source3.updateQueue;
            target5.memoizedState = source3.memoizedState;
            target5.dependencies = source3.dependencies;
            target5.mode = source3.mode;
            target5.flags = source3.flags;
            target5.subtreeFlags = source3.subtreeFlags;
            target5.deletions = source3.deletions;
            target5.lanes = source3.lanes;
            target5.childLanes = source3.childLanes;
            target5.alternate = source3.alternate;
            {
              target5.actualDuration = source3.actualDuration;
              target5.actualStartTime = source3.actualStartTime;
              target5.selfBaseDuration = source3.selfBaseDuration;
              target5.treeBaseDuration = source3.treeBaseDuration;
            }
            target5._debugSource = source3._debugSource;
            target5._debugOwner = source3._debugOwner;
            target5._debugNeedsRemount = source3._debugNeedsRemount;
            target5._debugHookTypes = source3._debugHookTypes;
            return target5;
          }
          function FiberRootNode(containerInfo, tag2, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag2;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag2) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag2, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag2, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag2, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children2, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children2,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component2, methodName) {
            {
              var fiber = get3(component2);
              if (fiber === void 0) {
                if (typeof component2.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys4 = Object.keys(component2).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys4);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error4("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error4("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag2, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag2, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag2, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag2, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update2 = createUpdate(eventTime, lane);
            update2.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update2, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element2, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element2);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error4("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update2 = createUpdate(eventTime, lane);
            update2.payload = {
              element: element2
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error4("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update2.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update2, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index6) {
              var key = path[index6];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index6 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index6 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index6) {
              var oldKey = oldPath[index6];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index6 + 1 === oldPath.length) {
                var newKey = newPath[index6];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index6 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index6, value14) {
              if (index6 >= path.length) {
                return value14;
              }
              var key = path[index6];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index6 + 1, value14);
              return updated;
            };
            var copyWithSet = function(obj, path, value14) {
              return copyWithSetImpl(obj, path, 0, value14);
            };
            var findHook = function(fiber, id3) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id3 > 0) {
                currentHook2 = currentHook2.next;
                id3--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id3, path, value14) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value14);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id3, path) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id3, oldPath, newPath) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value14) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value14);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error5) {
            console["error"](error5);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error4("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error4("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error4("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error4("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children2, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error4("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error4("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options3) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options3 !== null && options3 !== void 0) {
              {
                if (options3.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options3 === "object" && options3 !== null && options3.$$typeof === REACT_ELEMENT_TYPE) {
                    error4("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options3.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options3.identifierPrefix !== void 0) {
                identifierPrefix = options3.identifierPrefix;
              }
              if (options3.onRecoverableError !== void 0) {
                onRecoverableError = options3.onRecoverableError;
              }
              if (options3.transitionCallbacks !== void 0) {
                transitionCallbacks = options3.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target5) {
            if (target5) {
              queueExplicitHydrationTarget(target5);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot2(container, initialChildren, options3) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error4("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options3 != null ? options3 : null;
            var mutableSources = options3 != null && options3.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options3 !== null && options3 !== void 0) {
              if (options3.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options3.identifierPrefix !== void 0) {
                identifierPrefix = options3.identifierPrefix;
              }
              if (options3.onRecoverableError !== void 0) {
                onRecoverableError = options3.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error4("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error4("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error4("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error4("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error4("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error4("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error4("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children2, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children2, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children2, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error4("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element2, container, callback) {
            {
              error4("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error4("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, true, callback);
          }
          function render(element2, container, callback) {
            {
              error4("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error4("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            {
              error4("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element2, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error4("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error4("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error4("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error4("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children2, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children2, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options3) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error4('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options3);
          }
          function hydrateRoot$1(container, initialChildren, options3) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error4('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot2(container, initialChildren, options3);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error4("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol2 = window.location.protocol;
                if (/^(https?|file):$/.test(protocol2)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol2 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/big-integer/BigInteger.js
  var require_BigInteger = __commonJS({
    "node_modules/big-integer/BigInteger.js"(exports, module) {
      var bigInt3 = function(undefined2) {
        "use strict";
        var BASE2 = 1e7, LOG_BASE2 = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
        var supportsNativeBigInt = typeof BigInt === "function";
        function Integer(v, radix, alphabet, caseSensitive) {
          if (typeof v === "undefined")
            return Integer[0];
          if (typeof radix !== "undefined")
            return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
          return parseValue(v);
        }
        function BigInteger(value14, sign4) {
          this.value = value14;
          this.sign = sign4;
          this.isSmall = false;
        }
        BigInteger.prototype = Object.create(Integer.prototype);
        function SmallInteger(value14) {
          this.value = value14;
          this.sign = value14 < 0;
          this.isSmall = true;
        }
        SmallInteger.prototype = Object.create(Integer.prototype);
        function NativeBigInt(value14) {
          this.value = value14;
        }
        NativeBigInt.prototype = Object.create(Integer.prototype);
        function isPrecise(n) {
          return -MAX_INT < n && n < MAX_INT;
        }
        function smallToArray(n) {
          if (n < 1e7)
            return [n];
          if (n < 1e14)
            return [n % 1e7, Math.floor(n / 1e7)];
          return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
        }
        function arrayToSmall(arr) {
          trim2(arr);
          var length11 = arr.length;
          if (length11 < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
            switch (length11) {
              case 0:
                return 0;
              case 1:
                return arr[0];
              case 2:
                return arr[0] + arr[1] * BASE2;
              default:
                return arr[0] + (arr[1] + arr[2] * BASE2) * BASE2;
            }
          }
          return arr;
        }
        function trim2(v) {
          var i3 = v.length;
          while (v[--i3] === 0)
            ;
          v.length = i3 + 1;
        }
        function createArray(length11) {
          var x = new Array(length11);
          var i3 = -1;
          while (++i3 < length11) {
            x[i3] = 0;
          }
          return x;
        }
        function truncate2(n) {
          if (n > 0)
            return Math.floor(n);
          return Math.ceil(n);
        }
        function add6(a2, b2) {
          var l_a = a2.length, l_b = b2.length, r = new Array(l_a), carry = 0, base2 = BASE2, sum3, i3;
          for (i3 = 0; i3 < l_b; i3++) {
            sum3 = a2[i3] + b2[i3] + carry;
            carry = sum3 >= base2 ? 1 : 0;
            r[i3] = sum3 - carry * base2;
          }
          while (i3 < l_a) {
            sum3 = a2[i3] + carry;
            carry = sum3 === base2 ? 1 : 0;
            r[i3++] = sum3 - carry * base2;
          }
          if (carry > 0)
            r.push(carry);
          return r;
        }
        function addAny(a2, b2) {
          if (a2.length >= b2.length)
            return add6(a2, b2);
          return add6(b2, a2);
        }
        function addSmall(a2, carry) {
          var l = a2.length, r = new Array(l), base2 = BASE2, sum3, i3;
          for (i3 = 0; i3 < l; i3++) {
            sum3 = a2[i3] - base2 + carry;
            carry = Math.floor(sum3 / base2);
            r[i3] = sum3 - carry * base2;
            carry += 1;
          }
          while (carry > 0) {
            r[i3++] = carry % base2;
            carry = Math.floor(carry / base2);
          }
          return r;
        }
        BigInteger.prototype.add = function(v) {
          var n = parseValue(v);
          if (this.sign !== n.sign) {
            return this.subtract(n.negate());
          }
          var a2 = this.value, b2 = n.value;
          if (n.isSmall) {
            return new BigInteger(addSmall(a2, Math.abs(b2)), this.sign);
          }
          return new BigInteger(addAny(a2, b2), this.sign);
        };
        BigInteger.prototype.plus = BigInteger.prototype.add;
        SmallInteger.prototype.add = function(v) {
          var n = parseValue(v);
          var a2 = this.value;
          if (a2 < 0 !== n.sign) {
            return this.subtract(n.negate());
          }
          var b2 = n.value;
          if (n.isSmall) {
            if (isPrecise(a2 + b2))
              return new SmallInteger(a2 + b2);
            b2 = smallToArray(Math.abs(b2));
          }
          return new BigInteger(addSmall(b2, Math.abs(a2)), a2 < 0);
        };
        SmallInteger.prototype.plus = SmallInteger.prototype.add;
        NativeBigInt.prototype.add = function(v) {
          return new NativeBigInt(this.value + parseValue(v).value);
        };
        NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
        function subtract(a2, b2) {
          var a_l = a2.length, b_l = b2.length, r = new Array(a_l), borrow = 0, base2 = BASE2, i3, difference3;
          for (i3 = 0; i3 < b_l; i3++) {
            difference3 = a2[i3] - borrow - b2[i3];
            if (difference3 < 0) {
              difference3 += base2;
              borrow = 1;
            } else
              borrow = 0;
            r[i3] = difference3;
          }
          for (i3 = b_l; i3 < a_l; i3++) {
            difference3 = a2[i3] - borrow;
            if (difference3 < 0)
              difference3 += base2;
            else {
              r[i3++] = difference3;
              break;
            }
            r[i3] = difference3;
          }
          for (; i3 < a_l; i3++) {
            r[i3] = a2[i3];
          }
          trim2(r);
          return r;
        }
        function subtractAny(a2, b2, sign4) {
          var value14;
          if (compareAbs(a2, b2) >= 0) {
            value14 = subtract(a2, b2);
          } else {
            value14 = subtract(b2, a2);
            sign4 = !sign4;
          }
          value14 = arrayToSmall(value14);
          if (typeof value14 === "number") {
            if (sign4)
              value14 = -value14;
            return new SmallInteger(value14);
          }
          return new BigInteger(value14, sign4);
        }
        function subtractSmall(a2, b2, sign4) {
          var l = a2.length, r = new Array(l), carry = -b2, base2 = BASE2, i3, difference3;
          for (i3 = 0; i3 < l; i3++) {
            difference3 = a2[i3] + carry;
            carry = Math.floor(difference3 / base2);
            difference3 %= base2;
            r[i3] = difference3 < 0 ? difference3 + base2 : difference3;
          }
          r = arrayToSmall(r);
          if (typeof r === "number") {
            if (sign4)
              r = -r;
            return new SmallInteger(r);
          }
          return new BigInteger(r, sign4);
        }
        BigInteger.prototype.subtract = function(v) {
          var n = parseValue(v);
          if (this.sign !== n.sign) {
            return this.add(n.negate());
          }
          var a2 = this.value, b2 = n.value;
          if (n.isSmall)
            return subtractSmall(a2, Math.abs(b2), this.sign);
          return subtractAny(a2, b2, this.sign);
        };
        BigInteger.prototype.minus = BigInteger.prototype.subtract;
        SmallInteger.prototype.subtract = function(v) {
          var n = parseValue(v);
          var a2 = this.value;
          if (a2 < 0 !== n.sign) {
            return this.add(n.negate());
          }
          var b2 = n.value;
          if (n.isSmall) {
            return new SmallInteger(a2 - b2);
          }
          return subtractSmall(b2, Math.abs(a2), a2 >= 0);
        };
        SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
        NativeBigInt.prototype.subtract = function(v) {
          return new NativeBigInt(this.value - parseValue(v).value);
        };
        NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
        BigInteger.prototype.negate = function() {
          return new BigInteger(this.value, !this.sign);
        };
        SmallInteger.prototype.negate = function() {
          var sign4 = this.sign;
          var small2 = new SmallInteger(-this.value);
          small2.sign = !sign4;
          return small2;
        };
        NativeBigInt.prototype.negate = function() {
          return new NativeBigInt(-this.value);
        };
        BigInteger.prototype.abs = function() {
          return new BigInteger(this.value, false);
        };
        SmallInteger.prototype.abs = function() {
          return new SmallInteger(Math.abs(this.value));
        };
        NativeBigInt.prototype.abs = function() {
          return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
        };
        function multiplyLong(a2, b2) {
          var a_l = a2.length, b_l = b2.length, l = a_l + b_l, r = createArray(l), base2 = BASE2, product2, carry, i3, a_i, b_j;
          for (i3 = 0; i3 < a_l; ++i3) {
            a_i = a2[i3];
            for (var j = 0; j < b_l; ++j) {
              b_j = b2[j];
              product2 = a_i * b_j + r[i3 + j];
              carry = Math.floor(product2 / base2);
              r[i3 + j] = product2 - carry * base2;
              r[i3 + j + 1] += carry;
            }
          }
          trim2(r);
          return r;
        }
        function multiplySmall(a2, b2) {
          var l = a2.length, r = new Array(l), base2 = BASE2, carry = 0, product2, i3;
          for (i3 = 0; i3 < l; i3++) {
            product2 = a2[i3] * b2 + carry;
            carry = Math.floor(product2 / base2);
            r[i3] = product2 - carry * base2;
          }
          while (carry > 0) {
            r[i3++] = carry % base2;
            carry = Math.floor(carry / base2);
          }
          return r;
        }
        function shiftLeft(x, n) {
          var r = [];
          while (n-- > 0)
            r.push(0);
          return r.concat(x);
        }
        function multiplyKaratsuba(x, y) {
          var n = Math.max(x.length, y.length);
          if (n <= 30)
            return multiplyLong(x, y);
          n = Math.ceil(n / 2);
          var b2 = x.slice(n), a2 = x.slice(0, n), d = y.slice(n), c = y.slice(0, n);
          var ac = multiplyKaratsuba(a2, c), bd = multiplyKaratsuba(b2, d), abcd = multiplyKaratsuba(addAny(a2, b2), addAny(c, d));
          var product2 = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
          trim2(product2);
          return product2;
        }
        function useKaratsuba(l1, l2) {
          return -0.012 * l1 - 0.012 * l2 + 15e-6 * l1 * l2 > 0;
        }
        BigInteger.prototype.multiply = function(v) {
          var n = parseValue(v), a2 = this.value, b2 = n.value, sign4 = this.sign !== n.sign, abs7;
          if (n.isSmall) {
            if (b2 === 0)
              return Integer[0];
            if (b2 === 1)
              return this;
            if (b2 === -1)
              return this.negate();
            abs7 = Math.abs(b2);
            if (abs7 < BASE2) {
              return new BigInteger(multiplySmall(a2, abs7), sign4);
            }
            b2 = smallToArray(abs7);
          }
          if (useKaratsuba(a2.length, b2.length))
            return new BigInteger(multiplyKaratsuba(a2, b2), sign4);
          return new BigInteger(multiplyLong(a2, b2), sign4);
        };
        BigInteger.prototype.times = BigInteger.prototype.multiply;
        function multiplySmallAndArray(a2, b2, sign4) {
          if (a2 < BASE2) {
            return new BigInteger(multiplySmall(b2, a2), sign4);
          }
          return new BigInteger(multiplyLong(b2, smallToArray(a2)), sign4);
        }
        SmallInteger.prototype._multiplyBySmall = function(a2) {
          if (isPrecise(a2.value * this.value)) {
            return new SmallInteger(a2.value * this.value);
          }
          return multiplySmallAndArray(Math.abs(a2.value), smallToArray(Math.abs(this.value)), this.sign !== a2.sign);
        };
        BigInteger.prototype._multiplyBySmall = function(a2) {
          if (a2.value === 0)
            return Integer[0];
          if (a2.value === 1)
            return this;
          if (a2.value === -1)
            return this.negate();
          return multiplySmallAndArray(Math.abs(a2.value), this.value, this.sign !== a2.sign);
        };
        SmallInteger.prototype.multiply = function(v) {
          return parseValue(v)._multiplyBySmall(this);
        };
        SmallInteger.prototype.times = SmallInteger.prototype.multiply;
        NativeBigInt.prototype.multiply = function(v) {
          return new NativeBigInt(this.value * parseValue(v).value);
        };
        NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
        function square(a2) {
          var l = a2.length, r = createArray(l + l), base2 = BASE2, product2, carry, i3, a_i, a_j;
          for (i3 = 0; i3 < l; i3++) {
            a_i = a2[i3];
            carry = 0 - a_i * a_i;
            for (var j = i3; j < l; j++) {
              a_j = a2[j];
              product2 = 2 * (a_i * a_j) + r[i3 + j] + carry;
              carry = Math.floor(product2 / base2);
              r[i3 + j] = product2 - carry * base2;
            }
            r[i3 + l] = carry;
          }
          trim2(r);
          return r;
        }
        BigInteger.prototype.square = function() {
          return new BigInteger(square(this.value), false);
        };
        SmallInteger.prototype.square = function() {
          var value14 = this.value * this.value;
          if (isPrecise(value14))
            return new SmallInteger(value14);
          return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
        };
        NativeBigInt.prototype.square = function(v) {
          return new NativeBigInt(this.value * this.value);
        };
        function divMod1(a2, b2) {
          var a_l = a2.length, b_l = b2.length, base2 = BASE2, result = createArray(b2.length), divisorMostSignificantDigit = b2[b_l - 1], lambda = Math.ceil(base2 / (2 * divisorMostSignificantDigit)), remainder2 = multiplySmall(a2, lambda), divisor = multiplySmall(b2, lambda), quotientDigit, shift, carry, borrow, i3, l, q2;
          if (remainder2.length <= a_l)
            remainder2.push(0);
          divisor.push(0);
          divisorMostSignificantDigit = divisor[b_l - 1];
          for (shift = a_l - b_l; shift >= 0; shift--) {
            quotientDigit = base2 - 1;
            if (remainder2[shift + b_l] !== divisorMostSignificantDigit) {
              quotientDigit = Math.floor((remainder2[shift + b_l] * base2 + remainder2[shift + b_l - 1]) / divisorMostSignificantDigit);
            }
            carry = 0;
            borrow = 0;
            l = divisor.length;
            for (i3 = 0; i3 < l; i3++) {
              carry += quotientDigit * divisor[i3];
              q2 = Math.floor(carry / base2);
              borrow += remainder2[shift + i3] - (carry - q2 * base2);
              carry = q2;
              if (borrow < 0) {
                remainder2[shift + i3] = borrow + base2;
                borrow = -1;
              } else {
                remainder2[shift + i3] = borrow;
                borrow = 0;
              }
            }
            while (borrow !== 0) {
              quotientDigit -= 1;
              carry = 0;
              for (i3 = 0; i3 < l; i3++) {
                carry += remainder2[shift + i3] - base2 + divisor[i3];
                if (carry < 0) {
                  remainder2[shift + i3] = carry + base2;
                  carry = 0;
                } else {
                  remainder2[shift + i3] = carry;
                  carry = 1;
                }
              }
              borrow += carry;
            }
            result[shift] = quotientDigit;
          }
          remainder2 = divModSmall(remainder2, lambda)[0];
          return [arrayToSmall(result), arrayToSmall(remainder2)];
        }
        function divMod2(a2, b2) {
          var a_l = a2.length, b_l = b2.length, result = [], part = [], base2 = BASE2, guess, xlen, highx, highy, check;
          while (a_l) {
            part.unshift(a2[--a_l]);
            trim2(part);
            if (compareAbs(part, b2) < 0) {
              result.push(0);
              continue;
            }
            xlen = part.length;
            highx = part[xlen - 1] * base2 + part[xlen - 2];
            highy = b2[b_l - 1] * base2 + b2[b_l - 2];
            if (xlen > b_l) {
              highx = (highx + 1) * base2;
            }
            guess = Math.ceil(highx / highy);
            do {
              check = multiplySmall(b2, guess);
              if (compareAbs(check, part) <= 0)
                break;
              guess--;
            } while (guess);
            result.push(guess);
            part = subtract(part, check);
          }
          result.reverse();
          return [arrayToSmall(result), arrayToSmall(part)];
        }
        function divModSmall(value14, lambda) {
          var length11 = value14.length, quotient = createArray(length11), base2 = BASE2, i3, q2, remainder2, divisor;
          remainder2 = 0;
          for (i3 = length11 - 1; i3 >= 0; --i3) {
            divisor = remainder2 * base2 + value14[i3];
            q2 = truncate2(divisor / lambda);
            remainder2 = divisor - q2 * lambda;
            quotient[i3] = q2 | 0;
          }
          return [quotient, remainder2 | 0];
        }
        function divModAny(self2, v) {
          var value14, n = parseValue(v);
          if (supportsNativeBigInt) {
            return [new NativeBigInt(self2.value / n.value), new NativeBigInt(self2.value % n.value)];
          }
          var a2 = self2.value, b2 = n.value;
          var quotient;
          if (b2 === 0)
            throw new Error("Cannot divide by zero");
          if (self2.isSmall) {
            if (n.isSmall) {
              return [new SmallInteger(truncate2(a2 / b2)), new SmallInteger(a2 % b2)];
            }
            return [Integer[0], self2];
          }
          if (n.isSmall) {
            if (b2 === 1)
              return [self2, Integer[0]];
            if (b2 == -1)
              return [self2.negate(), Integer[0]];
            var abs7 = Math.abs(b2);
            if (abs7 < BASE2) {
              value14 = divModSmall(a2, abs7);
              quotient = arrayToSmall(value14[0]);
              var remainder2 = value14[1];
              if (self2.sign)
                remainder2 = -remainder2;
              if (typeof quotient === "number") {
                if (self2.sign !== n.sign)
                  quotient = -quotient;
                return [new SmallInteger(quotient), new SmallInteger(remainder2)];
              }
              return [new BigInteger(quotient, self2.sign !== n.sign), new SmallInteger(remainder2)];
            }
            b2 = smallToArray(abs7);
          }
          var comparison = compareAbs(a2, b2);
          if (comparison === -1)
            return [Integer[0], self2];
          if (comparison === 0)
            return [Integer[self2.sign === n.sign ? 1 : -1], Integer[0]];
          if (a2.length + b2.length <= 200)
            value14 = divMod1(a2, b2);
          else
            value14 = divMod2(a2, b2);
          quotient = value14[0];
          var qSign = self2.sign !== n.sign, mod7 = value14[1], mSign = self2.sign;
          if (typeof quotient === "number") {
            if (qSign)
              quotient = -quotient;
            quotient = new SmallInteger(quotient);
          } else
            quotient = new BigInteger(quotient, qSign);
          if (typeof mod7 === "number") {
            if (mSign)
              mod7 = -mod7;
            mod7 = new SmallInteger(mod7);
          } else
            mod7 = new BigInteger(mod7, mSign);
          return [quotient, mod7];
        }
        BigInteger.prototype.divmod = function(v) {
          var result = divModAny(this, v);
          return {
            quotient: result[0],
            remainder: result[1]
          };
        };
        NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;
        BigInteger.prototype.divide = function(v) {
          return divModAny(this, v)[0];
        };
        NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {
          return new NativeBigInt(this.value / parseValue(v).value);
        };
        SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;
        BigInteger.prototype.mod = function(v) {
          return divModAny(this, v)[1];
        };
        NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {
          return new NativeBigInt(this.value % parseValue(v).value);
        };
        SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;
        BigInteger.prototype.pow = function(v) {
          var n = parseValue(v), a2 = this.value, b2 = n.value, value14, x, y;
          if (b2 === 0)
            return Integer[1];
          if (a2 === 0)
            return Integer[0];
          if (a2 === 1)
            return Integer[1];
          if (a2 === -1)
            return n.isEven() ? Integer[1] : Integer[-1];
          if (n.sign) {
            return Integer[0];
          }
          if (!n.isSmall)
            throw new Error("The exponent " + n.toString() + " is too large.");
          if (this.isSmall) {
            if (isPrecise(value14 = Math.pow(a2, b2)))
              return new SmallInteger(truncate2(value14));
          }
          x = this;
          y = Integer[1];
          while (true) {
            if (b2 & true) {
              y = y.times(x);
              --b2;
            }
            if (b2 === 0)
              break;
            b2 /= 2;
            x = x.square();
          }
          return y;
        };
        SmallInteger.prototype.pow = BigInteger.prototype.pow;
        NativeBigInt.prototype.pow = function(v) {
          var n = parseValue(v);
          var a2 = this.value, b2 = n.value;
          var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);
          if (b2 === _0)
            return Integer[1];
          if (a2 === _0)
            return Integer[0];
          if (a2 === _1)
            return Integer[1];
          if (a2 === BigInt(-1))
            return n.isEven() ? Integer[1] : Integer[-1];
          if (n.isNegative())
            return new NativeBigInt(_0);
          var x = this;
          var y = Integer[1];
          while (true) {
            if ((b2 & _1) === _1) {
              y = y.times(x);
              --b2;
            }
            if (b2 === _0)
              break;
            b2 /= _2;
            x = x.square();
          }
          return y;
        };
        BigInteger.prototype.modPow = function(exp4, mod7) {
          exp4 = parseValue(exp4);
          mod7 = parseValue(mod7);
          if (mod7.isZero())
            throw new Error("Cannot take modPow with modulus 0");
          var r = Integer[1], base2 = this.mod(mod7);
          if (exp4.isNegative()) {
            exp4 = exp4.multiply(Integer[-1]);
            base2 = base2.modInv(mod7);
          }
          while (exp4.isPositive()) {
            if (base2.isZero())
              return Integer[0];
            if (exp4.isOdd())
              r = r.multiply(base2).mod(mod7);
            exp4 = exp4.divide(2);
            base2 = base2.square().mod(mod7);
          }
          return r;
        };
        NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;
        function compareAbs(a2, b2) {
          if (a2.length !== b2.length) {
            return a2.length > b2.length ? 1 : -1;
          }
          for (var i3 = a2.length - 1; i3 >= 0; i3--) {
            if (a2[i3] !== b2[i3])
              return a2[i3] > b2[i3] ? 1 : -1;
          }
          return 0;
        }
        BigInteger.prototype.compareAbs = function(v) {
          var n = parseValue(v), a2 = this.value, b2 = n.value;
          if (n.isSmall)
            return 1;
          return compareAbs(a2, b2);
        };
        SmallInteger.prototype.compareAbs = function(v) {
          var n = parseValue(v), a2 = Math.abs(this.value), b2 = n.value;
          if (n.isSmall) {
            b2 = Math.abs(b2);
            return a2 === b2 ? 0 : a2 > b2 ? 1 : -1;
          }
          return -1;
        };
        NativeBigInt.prototype.compareAbs = function(v) {
          var a2 = this.value;
          var b2 = parseValue(v).value;
          a2 = a2 >= 0 ? a2 : -a2;
          b2 = b2 >= 0 ? b2 : -b2;
          return a2 === b2 ? 0 : a2 > b2 ? 1 : -1;
        };
        BigInteger.prototype.compare = function(v) {
          if (v === Infinity) {
            return -1;
          }
          if (v === -Infinity) {
            return 1;
          }
          var n = parseValue(v), a2 = this.value, b2 = n.value;
          if (this.sign !== n.sign) {
            return n.sign ? 1 : -1;
          }
          if (n.isSmall) {
            return this.sign ? -1 : 1;
          }
          return compareAbs(a2, b2) * (this.sign ? -1 : 1);
        };
        BigInteger.prototype.compareTo = BigInteger.prototype.compare;
        SmallInteger.prototype.compare = function(v) {
          if (v === Infinity) {
            return -1;
          }
          if (v === -Infinity) {
            return 1;
          }
          var n = parseValue(v), a2 = this.value, b2 = n.value;
          if (n.isSmall) {
            return a2 == b2 ? 0 : a2 > b2 ? 1 : -1;
          }
          if (a2 < 0 !== n.sign) {
            return a2 < 0 ? -1 : 1;
          }
          return a2 < 0 ? 1 : -1;
        };
        SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
        NativeBigInt.prototype.compare = function(v) {
          if (v === Infinity) {
            return -1;
          }
          if (v === -Infinity) {
            return 1;
          }
          var a2 = this.value;
          var b2 = parseValue(v).value;
          return a2 === b2 ? 0 : a2 > b2 ? 1 : -1;
        };
        NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
        BigInteger.prototype.equals = function(v) {
          return this.compare(v) === 0;
        };
        NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;
        BigInteger.prototype.notEquals = function(v) {
          return this.compare(v) !== 0;
        };
        NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;
        BigInteger.prototype.greater = function(v) {
          return this.compare(v) > 0;
        };
        NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;
        BigInteger.prototype.lesser = function(v) {
          return this.compare(v) < 0;
        };
        NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;
        BigInteger.prototype.greaterOrEquals = function(v) {
          return this.compare(v) >= 0;
        };
        NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;
        BigInteger.prototype.lesserOrEquals = function(v) {
          return this.compare(v) <= 0;
        };
        NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;
        BigInteger.prototype.isEven = function() {
          return (this.value[0] & 1) === 0;
        };
        SmallInteger.prototype.isEven = function() {
          return (this.value & 1) === 0;
        };
        NativeBigInt.prototype.isEven = function() {
          return (this.value & BigInt(1)) === BigInt(0);
        };
        BigInteger.prototype.isOdd = function() {
          return (this.value[0] & 1) === 1;
        };
        SmallInteger.prototype.isOdd = function() {
          return (this.value & 1) === 1;
        };
        NativeBigInt.prototype.isOdd = function() {
          return (this.value & BigInt(1)) === BigInt(1);
        };
        BigInteger.prototype.isPositive = function() {
          return !this.sign;
        };
        SmallInteger.prototype.isPositive = function() {
          return this.value > 0;
        };
        NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
        BigInteger.prototype.isNegative = function() {
          return this.sign;
        };
        SmallInteger.prototype.isNegative = function() {
          return this.value < 0;
        };
        NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
        BigInteger.prototype.isUnit = function() {
          return false;
        };
        SmallInteger.prototype.isUnit = function() {
          return Math.abs(this.value) === 1;
        };
        NativeBigInt.prototype.isUnit = function() {
          return this.abs().value === BigInt(1);
        };
        BigInteger.prototype.isZero = function() {
          return false;
        };
        SmallInteger.prototype.isZero = function() {
          return this.value === 0;
        };
        NativeBigInt.prototype.isZero = function() {
          return this.value === BigInt(0);
        };
        BigInteger.prototype.isDivisibleBy = function(v) {
          var n = parseValue(v);
          if (n.isZero())
            return false;
          if (n.isUnit())
            return true;
          if (n.compareAbs(2) === 0)
            return this.isEven();
          return this.mod(n).isZero();
        };
        NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;
        function isBasicPrime(v) {
          var n = v.abs();
          if (n.isUnit())
            return false;
          if (n.equals(2) || n.equals(3) || n.equals(5))
            return true;
          if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))
            return false;
          if (n.lesser(49))
            return true;
        }
        function millerRabinTest(n, a2) {
          var nPrev = n.prev(), b2 = nPrev, r = 0, d, t, i3, x;
          while (b2.isEven())
            b2 = b2.divide(2), r++;
          next:
            for (i3 = 0; i3 < a2.length; i3++) {
              if (n.lesser(a2[i3]))
                continue;
              x = bigInt3(a2[i3]).modPow(b2, n);
              if (x.isUnit() || x.equals(nPrev))
                continue;
              for (d = r - 1; d != 0; d--) {
                x = x.square().mod(n);
                if (x.isUnit())
                  return false;
                if (x.equals(nPrev))
                  continue next;
              }
              return false;
            }
          return true;
        }
        BigInteger.prototype.isPrime = function(strict) {
          var isPrime = isBasicPrime(this);
          if (isPrime !== undefined2)
            return isPrime;
          var n = this.abs();
          var bits = n.bitLength();
          if (bits <= 64)
            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
          var logN = Math.log(2) * bits.toJSNumber();
          var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);
          for (var a2 = [], i3 = 0; i3 < t; i3++) {
            a2.push(bigInt3(i3 + 2));
          }
          return millerRabinTest(n, a2);
        };
        NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;
        BigInteger.prototype.isProbablePrime = function(iterations, rng) {
          var isPrime = isBasicPrime(this);
          if (isPrime !== undefined2)
            return isPrime;
          var n = this.abs();
          var t = iterations === undefined2 ? 5 : iterations;
          for (var a2 = [], i3 = 0; i3 < t; i3++) {
            a2.push(bigInt3.randBetween(2, n.minus(2), rng));
          }
          return millerRabinTest(n, a2);
        };
        NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;
        BigInteger.prototype.modInv = function(n) {
          var t = bigInt3.zero, newT = bigInt3.one, r = parseValue(n), newR = this.abs(), q2, lastT, lastR;
          while (!newR.isZero()) {
            q2 = r.divide(newR);
            lastT = t;
            lastR = r;
            t = newT;
            r = newR;
            newT = lastT.subtract(q2.multiply(newT));
            newR = lastR.subtract(q2.multiply(newR));
          }
          if (!r.isUnit())
            throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
          if (t.compare(0) === -1) {
            t = t.add(n);
          }
          if (this.isNegative()) {
            return t.negate();
          }
          return t;
        };
        NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;
        BigInteger.prototype.next = function() {
          var value14 = this.value;
          if (this.sign) {
            return subtractSmall(value14, 1, this.sign);
          }
          return new BigInteger(addSmall(value14, 1), this.sign);
        };
        SmallInteger.prototype.next = function() {
          var value14 = this.value;
          if (value14 + 1 < MAX_INT)
            return new SmallInteger(value14 + 1);
          return new BigInteger(MAX_INT_ARR, false);
        };
        NativeBigInt.prototype.next = function() {
          return new NativeBigInt(this.value + BigInt(1));
        };
        BigInteger.prototype.prev = function() {
          var value14 = this.value;
          if (this.sign) {
            return new BigInteger(addSmall(value14, 1), true);
          }
          return subtractSmall(value14, 1, this.sign);
        };
        SmallInteger.prototype.prev = function() {
          var value14 = this.value;
          if (value14 - 1 > -MAX_INT)
            return new SmallInteger(value14 - 1);
          return new BigInteger(MAX_INT_ARR, true);
        };
        NativeBigInt.prototype.prev = function() {
          return new NativeBigInt(this.value - BigInt(1));
        };
        var powersOfTwo = [1];
        while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE2)
          powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
        var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];
        function shift_isSmall(n) {
          return Math.abs(n) <= BASE2;
        }
        BigInteger.prototype.shiftLeft = function(v) {
          var n = parseValue(v).toJSNumber();
          if (!shift_isSmall(n)) {
            throw new Error(String(n) + " is too large for shifting.");
          }
          if (n < 0)
            return this.shiftRight(-n);
          var result = this;
          if (result.isZero())
            return result;
          while (n >= powers2Length) {
            result = result.multiply(highestPower2);
            n -= powers2Length - 1;
          }
          return result.multiply(powersOfTwo[n]);
        };
        NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;
        BigInteger.prototype.shiftRight = function(v) {
          var remQuo;
          var n = parseValue(v).toJSNumber();
          if (!shift_isSmall(n)) {
            throw new Error(String(n) + " is too large for shifting.");
          }
          if (n < 0)
            return this.shiftLeft(-n);
          var result = this;
          while (n >= powers2Length) {
            if (result.isZero() || result.isNegative() && result.isUnit())
              return result;
            remQuo = divModAny(result, highestPower2);
            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
            n -= powers2Length - 1;
          }
          remQuo = divModAny(result, powersOfTwo[n]);
          return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
        };
        NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;
        function bitwise(x, y, fn) {
          y = parseValue(y);
          var xSign = x.isNegative(), ySign = y.isNegative();
          var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;
          var xDigit = 0, yDigit = 0;
          var xDivMod = null, yDivMod = null;
          var result = [];
          while (!xRem.isZero() || !yRem.isZero()) {
            xDivMod = divModAny(xRem, highestPower2);
            xDigit = xDivMod[1].toJSNumber();
            if (xSign) {
              xDigit = highestPower2 - 1 - xDigit;
            }
            yDivMod = divModAny(yRem, highestPower2);
            yDigit = yDivMod[1].toJSNumber();
            if (ySign) {
              yDigit = highestPower2 - 1 - yDigit;
            }
            xRem = xDivMod[0];
            yRem = yDivMod[0];
            result.push(fn(xDigit, yDigit));
          }
          var sum3 = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt3(-1) : bigInt3(0);
          for (var i3 = result.length - 1; i3 >= 0; i3 -= 1) {
            sum3 = sum3.multiply(highestPower2).add(bigInt3(result[i3]));
          }
          return sum3;
        }
        BigInteger.prototype.not = function() {
          return this.negate().prev();
        };
        NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;
        BigInteger.prototype.and = function(n) {
          return bitwise(this, n, function(a2, b2) {
            return a2 & b2;
          });
        };
        NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;
        BigInteger.prototype.or = function(n) {
          return bitwise(this, n, function(a2, b2) {
            return a2 | b2;
          });
        };
        NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;
        BigInteger.prototype.xor = function(n) {
          return bitwise(this, n, function(a2, b2) {
            return a2 ^ b2;
          });
        };
        NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;
        var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE2 & -BASE2) * (BASE2 & -BASE2) | LOBMASK_I;
        function roughLOB(n) {
          var v = n.value, x = typeof v === "number" ? v | LOBMASK_I : typeof v === "bigint" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE2 | LOBMASK_BI;
          return x & -x;
        }
        function integerLogarithm(value14, base2) {
          if (base2.compareTo(value14) <= 0) {
            var tmp = integerLogarithm(value14, base2.square(base2));
            var p2 = tmp.p;
            var e2 = tmp.e;
            var t = p2.multiply(base2);
            return t.compareTo(value14) <= 0 ? { p: t, e: e2 * 2 + 1 } : { p: p2, e: e2 * 2 };
          }
          return { p: bigInt3(1), e: 0 };
        }
        BigInteger.prototype.bitLength = function() {
          var n = this;
          if (n.compareTo(bigInt3(0)) < 0) {
            n = n.negate().subtract(bigInt3(1));
          }
          if (n.compareTo(bigInt3(0)) === 0) {
            return bigInt3(0);
          }
          return bigInt3(integerLogarithm(n, bigInt3(2)).e).add(bigInt3(1));
        };
        NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;
        function max8(a2, b2) {
          a2 = parseValue(a2);
          b2 = parseValue(b2);
          return a2.greater(b2) ? a2 : b2;
        }
        function min7(a2, b2) {
          a2 = parseValue(a2);
          b2 = parseValue(b2);
          return a2.lesser(b2) ? a2 : b2;
        }
        function gcd2(a2, b2) {
          a2 = parseValue(a2).abs();
          b2 = parseValue(b2).abs();
          if (a2.equals(b2))
            return a2;
          if (a2.isZero())
            return b2;
          if (b2.isZero())
            return a2;
          var c = Integer[1], d, t;
          while (a2.isEven() && b2.isEven()) {
            d = min7(roughLOB(a2), roughLOB(b2));
            a2 = a2.divide(d);
            b2 = b2.divide(d);
            c = c.multiply(d);
          }
          while (a2.isEven()) {
            a2 = a2.divide(roughLOB(a2));
          }
          do {
            while (b2.isEven()) {
              b2 = b2.divide(roughLOB(b2));
            }
            if (a2.greater(b2)) {
              t = b2;
              b2 = a2;
              a2 = t;
            }
            b2 = b2.subtract(a2);
          } while (!b2.isZero());
          return c.isUnit() ? a2 : a2.multiply(c);
        }
        function lcm(a2, b2) {
          a2 = parseValue(a2).abs();
          b2 = parseValue(b2).abs();
          return a2.divide(gcd2(a2, b2)).multiply(b2);
        }
        function randBetween(a2, b2, rng) {
          a2 = parseValue(a2);
          b2 = parseValue(b2);
          var usedRNG = rng || Math.random;
          var low2 = min7(a2, b2), high2 = max8(a2, b2);
          var range4 = high2.subtract(low2).add(1);
          if (range4.isSmall)
            return low2.add(Math.floor(usedRNG() * range4));
          var digits = toBase2(range4, BASE2).value;
          var result = [], restricted = true;
          for (var i3 = 0; i3 < digits.length; i3++) {
            var top3 = restricted ? digits[i3] + (i3 + 1 < digits.length ? digits[i3 + 1] / BASE2 : 0) : BASE2;
            var digit = truncate2(usedRNG() * top3);
            result.push(digit);
            if (digit < digits[i3])
              restricted = false;
          }
          return low2.add(Integer.fromArray(result, BASE2, false));
        }
        var parseBase = function(text8, base2, alphabet, caseSensitive) {
          alphabet = alphabet || DEFAULT_ALPHABET;
          text8 = String(text8);
          if (!caseSensitive) {
            text8 = text8.toLowerCase();
            alphabet = alphabet.toLowerCase();
          }
          var length11 = text8.length;
          var i3;
          var absBase = Math.abs(base2);
          var alphabetValues = {};
          for (i3 = 0; i3 < alphabet.length; i3++) {
            alphabetValues[alphabet[i3]] = i3;
          }
          for (i3 = 0; i3 < length11; i3++) {
            var c = text8[i3];
            if (c === "-")
              continue;
            if (c in alphabetValues) {
              if (alphabetValues[c] >= absBase) {
                if (c === "1" && absBase === 1)
                  continue;
                throw new Error(c + " is not a valid digit in base " + base2 + ".");
              }
            }
          }
          base2 = parseValue(base2);
          var digits = [];
          var isNegative = text8[0] === "-";
          for (i3 = isNegative ? 1 : 0; i3 < text8.length; i3++) {
            var c = text8[i3];
            if (c in alphabetValues)
              digits.push(parseValue(alphabetValues[c]));
            else if (c === "<") {
              var start2 = i3;
              do {
                i3++;
              } while (text8[i3] !== ">" && i3 < text8.length);
              digits.push(parseValue(text8.slice(start2 + 1, i3)));
            } else
              throw new Error(c + " is not a valid character");
          }
          return parseBaseFromArray(digits, base2, isNegative);
        };
        function parseBaseFromArray(digits, base2, isNegative) {
          var val = Integer[0], pow6 = Integer[1], i3;
          for (i3 = digits.length - 1; i3 >= 0; i3--) {
            val = val.add(digits[i3].times(pow6));
            pow6 = pow6.times(base2);
          }
          return isNegative ? val.negate() : val;
        }
        function stringify2(digit, alphabet) {
          alphabet = alphabet || DEFAULT_ALPHABET;
          if (digit < alphabet.length) {
            return alphabet[digit];
          }
          return "<" + digit + ">";
        }
        function toBase2(n, base2) {
          base2 = bigInt3(base2);
          if (base2.isZero()) {
            if (n.isZero())
              return { value: [0], isNegative: false };
            throw new Error("Cannot convert nonzero numbers to base 0.");
          }
          if (base2.equals(-1)) {
            if (n.isZero())
              return { value: [0], isNegative: false };
            if (n.isNegative())
              return {
                value: [].concat.apply(
                  [],
                  Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])
                ),
                isNegative: false
              };
            var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
            arr.unshift([1]);
            return {
              value: [].concat.apply([], arr),
              isNegative: false
            };
          }
          var neg = false;
          if (n.isNegative() && base2.isPositive()) {
            neg = true;
            n = n.abs();
          }
          if (base2.isUnit()) {
            if (n.isZero())
              return { value: [0], isNegative: false };
            return {
              value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),
              isNegative: neg
            };
          }
          var out = [];
          var left2 = n, divmod;
          while (left2.isNegative() || left2.compareAbs(base2) >= 0) {
            divmod = left2.divmod(base2);
            left2 = divmod.quotient;
            var digit = divmod.remainder;
            if (digit.isNegative()) {
              digit = base2.minus(digit).abs();
              left2 = left2.next();
            }
            out.push(digit.toJSNumber());
          }
          out.push(left2.toJSNumber());
          return { value: out.reverse(), isNegative: neg };
        }
        function toBaseString(n, base2, alphabet) {
          var arr = toBase2(n, base2);
          return (arr.isNegative ? "-" : "") + arr.value.map(function(x) {
            return stringify2(x, alphabet);
          }).join("");
        }
        BigInteger.prototype.toArray = function(radix) {
          return toBase2(this, radix);
        };
        SmallInteger.prototype.toArray = function(radix) {
          return toBase2(this, radix);
        };
        NativeBigInt.prototype.toArray = function(radix) {
          return toBase2(this, radix);
        };
        BigInteger.prototype.toString = function(radix, alphabet) {
          if (radix === undefined2)
            radix = 10;
          if (radix !== 10)
            return toBaseString(this, radix, alphabet);
          var v = this.value, l = v.length, str = String(v[--l]), zeros = "0000000", digit;
          while (--l >= 0) {
            digit = String(v[l]);
            str += zeros.slice(digit.length) + digit;
          }
          var sign4 = this.sign ? "-" : "";
          return sign4 + str;
        };
        SmallInteger.prototype.toString = function(radix, alphabet) {
          if (radix === undefined2)
            radix = 10;
          if (radix != 10)
            return toBaseString(this, radix, alphabet);
          return String(this.value);
        };
        NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
        NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
          return this.toString();
        };
        BigInteger.prototype.valueOf = function() {
          return parseInt(this.toString(), 10);
        };
        BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;
        SmallInteger.prototype.valueOf = function() {
          return this.value;
        };
        SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
        NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
          return parseInt(this.toString(), 10);
        };
        function parseStringValue(v) {
          if (isPrecise(+v)) {
            var x = +v;
            if (x === truncate2(x))
              return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
            throw new Error("Invalid integer: " + v);
          }
          var sign4 = v[0] === "-";
          if (sign4)
            v = v.slice(1);
          var split3 = v.split(/e/i);
          if (split3.length > 2)
            throw new Error("Invalid integer: " + split3.join("e"));
          if (split3.length === 2) {
            var exp4 = split3[1];
            if (exp4[0] === "+")
              exp4 = exp4.slice(1);
            exp4 = +exp4;
            if (exp4 !== truncate2(exp4) || !isPrecise(exp4))
              throw new Error("Invalid integer: " + exp4 + " is not a valid exponent.");
            var text8 = split3[0];
            var decimalPlace = text8.indexOf(".");
            if (decimalPlace >= 0) {
              exp4 -= text8.length - decimalPlace - 1;
              text8 = text8.slice(0, decimalPlace) + text8.slice(decimalPlace + 1);
            }
            if (exp4 < 0)
              throw new Error("Cannot include negative exponent part for integers");
            text8 += new Array(exp4 + 1).join("0");
            v = text8;
          }
          var isValid2 = /^([0-9][0-9]*)$/.test(v);
          if (!isValid2)
            throw new Error("Invalid integer: " + v);
          if (supportsNativeBigInt) {
            return new NativeBigInt(BigInt(sign4 ? "-" + v : v));
          }
          var r = [], max9 = v.length, l = LOG_BASE2, min8 = max9 - l;
          while (max9 > 0) {
            r.push(+v.slice(min8, max9));
            min8 -= l;
            if (min8 < 0)
              min8 = 0;
            max9 -= l;
          }
          trim2(r);
          return new BigInteger(r, sign4);
        }
        function parseNumberValue(v) {
          if (supportsNativeBigInt) {
            return new NativeBigInt(BigInt(v));
          }
          if (isPrecise(v)) {
            if (v !== truncate2(v))
              throw new Error(v + " is not an integer.");
            return new SmallInteger(v);
          }
          return parseStringValue(v.toString());
        }
        function parseValue(v) {
          if (typeof v === "number") {
            return parseNumberValue(v);
          }
          if (typeof v === "string") {
            return parseStringValue(v);
          }
          if (typeof v === "bigint") {
            return new NativeBigInt(v);
          }
          return v;
        }
        for (var i2 = 0; i2 < 1e3; i2++) {
          Integer[i2] = parseValue(i2);
          if (i2 > 0)
            Integer[-i2] = parseValue(-i2);
        }
        Integer.one = Integer[1];
        Integer.zero = Integer[0];
        Integer.minusOne = Integer[-1];
        Integer.max = max8;
        Integer.min = min7;
        Integer.gcd = gcd2;
        Integer.lcm = lcm;
        Integer.isInstance = function(x) {
          return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;
        };
        Integer.randBetween = randBetween;
        Integer.fromArray = function(digits, base2, isNegative) {
          return parseBaseFromArray(digits.map(parseValue), parseValue(base2 || 10), isNegative);
        };
        return Integer;
      }();
      if (typeof module !== "undefined" && module.hasOwnProperty("exports")) {
        module.exports = bigInt3;
      }
      if (typeof define === "function" && define.amd) {
        define(function() {
          return bigInt3;
        });
      }
    }
  });

  // node_modules/bignumber.js/bignumber.js
  var require_bignumber = __commonJS({
    "node_modules/bignumber.js/bignumber.js"(exports, module) {
      (function(globalObject) {
        "use strict";
        var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor2 = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE2 = 1e14, LOG_BASE2 = 14, MAX_SAFE_INTEGER2 = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
        function clone3(configObject) {
          var div16, convertBase2, parseNumeric, P2 = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
            prefix: "",
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ",",
            decimalSeparator: ".",
            fractionGroupSize: 0,
            fractionGroupSeparator: "\xA0",
            suffix: ""
          }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
          function BigNumber2(v, b2) {
            var alphabet, c, caseChanged, e2, i2, isNum, len, str, x = this;
            if (!(x instanceof BigNumber2))
              return new BigNumber2(v, b2);
            if (b2 == null) {
              if (v && v._isBigNumber === true) {
                x.s = v.s;
                if (!v.c || v.e > MAX_EXP) {
                  x.c = x.e = null;
                } else if (v.e < MIN_EXP) {
                  x.c = [x.e = 0];
                } else {
                  x.e = v.e;
                  x.c = v.c.slice();
                }
                return;
              }
              if ((isNum = typeof v == "number") && v * 0 == 0) {
                x.s = 1 / v < 0 ? (v = -v, -1) : 1;
                if (v === ~~v) {
                  for (e2 = 0, i2 = v; i2 >= 10; i2 /= 10, e2++)
                    ;
                  if (e2 > MAX_EXP) {
                    x.c = x.e = null;
                  } else {
                    x.e = e2;
                    x.c = [v];
                  }
                  return;
                }
                str = String(v);
              } else {
                if (!isNumeric.test(str = String(v)))
                  return parseNumeric(x, str, isNum);
                x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
              }
              if ((e2 = str.indexOf(".")) > -1)
                str = str.replace(".", "");
              if ((i2 = str.search(/e/i)) > 0) {
                if (e2 < 0)
                  e2 = i2;
                e2 += +str.slice(i2 + 1);
                str = str.substring(0, i2);
              } else if (e2 < 0) {
                e2 = str.length;
              }
            } else {
              intCheck(b2, 2, ALPHABET.length, "Base");
              if (b2 == 10 && alphabetHasNormalDecimalDigits) {
                x = new BigNumber2(v);
                return round5(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
              }
              str = String(v);
              if (isNum = typeof v == "number") {
                if (v * 0 != 0)
                  return parseNumeric(x, str, isNum, b2);
                x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
                if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                  throw Error(tooManyDigits + v);
                }
              } else {
                x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
              }
              alphabet = ALPHABET.slice(0, b2);
              e2 = i2 = 0;
              for (len = str.length; i2 < len; i2++) {
                if (alphabet.indexOf(c = str.charAt(i2)) < 0) {
                  if (c == ".") {
                    if (i2 > e2) {
                      e2 = len;
                      continue;
                    }
                  } else if (!caseChanged) {
                    if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                      caseChanged = true;
                      i2 = -1;
                      e2 = 0;
                      continue;
                    }
                  }
                  return parseNumeric(x, String(v), isNum, b2);
                }
              }
              isNum = false;
              str = convertBase2(str, b2, 10, x.s);
              if ((e2 = str.indexOf(".")) > -1)
                str = str.replace(".", "");
              else
                e2 = str.length;
            }
            for (i2 = 0; str.charCodeAt(i2) === 48; i2++)
              ;
            for (len = str.length; str.charCodeAt(--len) === 48; )
              ;
            if (str = str.slice(i2, ++len)) {
              len -= i2;
              if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER2 || v !== mathfloor2(v))) {
                throw Error(tooManyDigits + x.s * v);
              }
              if ((e2 = e2 - i2 - 1) > MAX_EXP) {
                x.c = x.e = null;
              } else if (e2 < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = e2;
                x.c = [];
                i2 = (e2 + 1) % LOG_BASE2;
                if (e2 < 0)
                  i2 += LOG_BASE2;
                if (i2 < len) {
                  if (i2)
                    x.c.push(+str.slice(0, i2));
                  for (len -= LOG_BASE2; i2 < len; ) {
                    x.c.push(+str.slice(i2, i2 += LOG_BASE2));
                  }
                  i2 = LOG_BASE2 - (str = str.slice(i2)).length;
                } else {
                  i2 -= len;
                }
                for (; i2--; str += "0")
                  ;
                x.c.push(+str);
              }
            } else {
              x.c = [x.e = 0];
            }
          }
          BigNumber2.clone = clone3;
          BigNumber2.ROUND_UP = 0;
          BigNumber2.ROUND_DOWN = 1;
          BigNumber2.ROUND_CEIL = 2;
          BigNumber2.ROUND_FLOOR = 3;
          BigNumber2.ROUND_HALF_UP = 4;
          BigNumber2.ROUND_HALF_DOWN = 5;
          BigNumber2.ROUND_HALF_EVEN = 6;
          BigNumber2.ROUND_HALF_CEIL = 7;
          BigNumber2.ROUND_HALF_FLOOR = 8;
          BigNumber2.EUCLID = 9;
          BigNumber2.config = BigNumber2.set = function(obj) {
            var p2, v;
            if (obj != null) {
              if (typeof obj == "object") {
                if (obj.hasOwnProperty(p2 = "DECIMAL_PLACES")) {
                  v = obj[p2];
                  intCheck(v, 0, MAX, p2);
                  DECIMAL_PLACES = v;
                }
                if (obj.hasOwnProperty(p2 = "ROUNDING_MODE")) {
                  v = obj[p2];
                  intCheck(v, 0, 8, p2);
                  ROUNDING_MODE = v;
                }
                if (obj.hasOwnProperty(p2 = "EXPONENTIAL_AT")) {
                  v = obj[p2];
                  if (v && v.pop) {
                    intCheck(v[0], -MAX, 0, p2);
                    intCheck(v[1], 0, MAX, p2);
                    TO_EXP_NEG = v[0];
                    TO_EXP_POS = v[1];
                  } else {
                    intCheck(v, -MAX, MAX, p2);
                    TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                  }
                }
                if (obj.hasOwnProperty(p2 = "RANGE")) {
                  v = obj[p2];
                  if (v && v.pop) {
                    intCheck(v[0], -MAX, -1, p2);
                    intCheck(v[1], 1, MAX, p2);
                    MIN_EXP = v[0];
                    MAX_EXP = v[1];
                  } else {
                    intCheck(v, -MAX, MAX, p2);
                    if (v) {
                      MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                    } else {
                      throw Error(bignumberError + p2 + " cannot be zero: " + v);
                    }
                  }
                }
                if (obj.hasOwnProperty(p2 = "CRYPTO")) {
                  v = obj[p2];
                  if (v === !!v) {
                    if (v) {
                      if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                        CRYPTO = v;
                      } else {
                        CRYPTO = !v;
                        throw Error(bignumberError + "crypto unavailable");
                      }
                    } else {
                      CRYPTO = v;
                    }
                  } else {
                    throw Error(bignumberError + p2 + " not true or false: " + v);
                  }
                }
                if (obj.hasOwnProperty(p2 = "MODULO_MODE")) {
                  v = obj[p2];
                  intCheck(v, 0, 9, p2);
                  MODULO_MODE = v;
                }
                if (obj.hasOwnProperty(p2 = "POW_PRECISION")) {
                  v = obj[p2];
                  intCheck(v, 0, MAX, p2);
                  POW_PRECISION = v;
                }
                if (obj.hasOwnProperty(p2 = "FORMAT")) {
                  v = obj[p2];
                  if (typeof v == "object")
                    FORMAT = v;
                  else
                    throw Error(bignumberError + p2 + " not an object: " + v);
                }
                if (obj.hasOwnProperty(p2 = "ALPHABET")) {
                  v = obj[p2];
                  if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                    alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                    ALPHABET = v;
                  } else {
                    throw Error(bignumberError + p2 + " invalid: " + v);
                  }
                }
              } else {
                throw Error(bignumberError + "Object expected: " + obj);
              }
            }
            return {
              DECIMAL_PLACES,
              ROUNDING_MODE,
              EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
              RANGE: [MIN_EXP, MAX_EXP],
              CRYPTO,
              MODULO_MODE,
              POW_PRECISION,
              FORMAT,
              ALPHABET
            };
          };
          BigNumber2.isBigNumber = function(v) {
            if (!v || v._isBigNumber !== true)
              return false;
            if (!BigNumber2.DEBUG)
              return true;
            var i2, n, c = v.c, e2 = v.e, s2 = v.s;
            out:
              if ({}.toString.call(c) == "[object Array]") {
                if ((s2 === 1 || s2 === -1) && e2 >= -MAX && e2 <= MAX && e2 === mathfloor2(e2)) {
                  if (c[0] === 0) {
                    if (e2 === 0 && c.length === 1)
                      return true;
                    break out;
                  }
                  i2 = (e2 + 1) % LOG_BASE2;
                  if (i2 < 1)
                    i2 += LOG_BASE2;
                  if (String(c[0]).length == i2) {
                    for (i2 = 0; i2 < c.length; i2++) {
                      n = c[i2];
                      if (n < 0 || n >= BASE2 || n !== mathfloor2(n))
                        break out;
                    }
                    if (n !== 0)
                      return true;
                  }
                }
              } else if (c === null && e2 === null && (s2 === null || s2 === 1 || s2 === -1)) {
                return true;
              }
            throw Error(bignumberError + "Invalid BigNumber: " + v);
          };
          BigNumber2.maximum = BigNumber2.max = function() {
            return maxOrMin2(arguments, P2.lt);
          };
          BigNumber2.minimum = BigNumber2.min = function() {
            return maxOrMin2(arguments, P2.gt);
          };
          BigNumber2.random = function() {
            var pow2_53 = 9007199254740992;
            var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
              return mathfloor2(Math.random() * pow2_53);
            } : function() {
              return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
            };
            return function(dp) {
              var a2, b2, e2, k, v, i2 = 0, c = [], rand = new BigNumber2(ONE);
              if (dp == null)
                dp = DECIMAL_PLACES;
              else
                intCheck(dp, 0, MAX);
              k = mathceil(dp / LOG_BASE2);
              if (CRYPTO) {
                if (crypto.getRandomValues) {
                  a2 = crypto.getRandomValues(new Uint32Array(k *= 2));
                  for (; i2 < k; ) {
                    v = a2[i2] * 131072 + (a2[i2 + 1] >>> 11);
                    if (v >= 9e15) {
                      b2 = crypto.getRandomValues(new Uint32Array(2));
                      a2[i2] = b2[0];
                      a2[i2 + 1] = b2[1];
                    } else {
                      c.push(v % 1e14);
                      i2 += 2;
                    }
                  }
                  i2 = k / 2;
                } else if (crypto.randomBytes) {
                  a2 = crypto.randomBytes(k *= 7);
                  for (; i2 < k; ) {
                    v = (a2[i2] & 31) * 281474976710656 + a2[i2 + 1] * 1099511627776 + a2[i2 + 2] * 4294967296 + a2[i2 + 3] * 16777216 + (a2[i2 + 4] << 16) + (a2[i2 + 5] << 8) + a2[i2 + 6];
                    if (v >= 9e15) {
                      crypto.randomBytes(7).copy(a2, i2);
                    } else {
                      c.push(v % 1e14);
                      i2 += 7;
                    }
                  }
                  i2 = k / 7;
                } else {
                  CRYPTO = false;
                  throw Error(bignumberError + "crypto unavailable");
                }
              }
              if (!CRYPTO) {
                for (; i2 < k; ) {
                  v = random53bitInt();
                  if (v < 9e15)
                    c[i2++] = v % 1e14;
                }
              }
              k = c[--i2];
              dp %= LOG_BASE2;
              if (k && dp) {
                v = POWS_TEN[LOG_BASE2 - dp];
                c[i2] = mathfloor2(k / v) * v;
              }
              for (; c[i2] === 0; c.pop(), i2--)
                ;
              if (i2 < 0) {
                c = [e2 = 0];
              } else {
                for (e2 = -1; c[0] === 0; c.splice(0, 1), e2 -= LOG_BASE2)
                  ;
                for (i2 = 1, v = c[0]; v >= 10; v /= 10, i2++)
                  ;
                if (i2 < LOG_BASE2)
                  e2 -= LOG_BASE2 - i2;
              }
              rand.e = e2;
              rand.c = c;
              return rand;
            };
          }();
          BigNumber2.sum = function() {
            var i2 = 1, args = arguments, sum3 = new BigNumber2(args[0]);
            for (; i2 < args.length; )
              sum3 = sum3.plus(args[i2++]);
            return sum3;
          };
          convertBase2 = function() {
            var decimal = "0123456789";
            function toBaseOut(str, baseIn, baseOut, alphabet) {
              var j, arr = [0], arrL, i2 = 0, len = str.length;
              for (; i2 < len; ) {
                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                  ;
                arr[0] += alphabet.indexOf(str.charAt(i2++));
                for (j = 0; j < arr.length; j++) {
                  if (arr[j] > baseOut - 1) {
                    if (arr[j + 1] == null)
                      arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                  }
                }
              }
              return arr.reverse();
            }
            return function(str, baseIn, baseOut, sign4, callerIsToString) {
              var alphabet, d, e2, k, r, x, xc, y, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
              if (i2 >= 0) {
                k = POW_PRECISION;
                POW_PRECISION = 0;
                str = str.replace(".", "");
                y = new BigNumber2(baseIn);
                x = y.pow(str.length - i2);
                POW_PRECISION = k;
                y.c = toBaseOut(
                  toFixedPoint(coeffToString(x.c), x.e, "0"),
                  10,
                  baseOut,
                  decimal
                );
                y.e = y.c.length;
              }
              xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
              e2 = k = xc.length;
              for (; xc[--k] == 0; xc.pop())
                ;
              if (!xc[0])
                return alphabet.charAt(0);
              if (i2 < 0) {
                --e2;
              } else {
                x.c = xc;
                x.e = e2;
                x.s = sign4;
                x = div16(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e2 = x.e;
              }
              d = e2 + dp + 1;
              i2 = xc[d];
              k = baseOut / 2;
              r = r || d < 0 || xc[d + 1] != null;
              r = rm < 4 ? (i2 != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i2 > k || i2 == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
              if (d < 1 || !xc[0]) {
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
              } else {
                xc.length = d;
                if (r) {
                  for (--baseOut; ++xc[--d] > baseOut; ) {
                    xc[d] = 0;
                    if (!d) {
                      ++e2;
                      xc = [1].concat(xc);
                    }
                  }
                }
                for (k = xc.length; !xc[--k]; )
                  ;
                for (i2 = 0, str = ""; i2 <= k; str += alphabet.charAt(xc[i2++]))
                  ;
                str = toFixedPoint(str, e2, alphabet.charAt(0));
              }
              return str;
            };
          }();
          div16 = function() {
            function multiply(x, k, base2) {
              var m, temp, xlo, xhi, carry = 0, i2 = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
              for (x = x.slice(); i2--; ) {
                xlo = x[i2] % SQRT_BASE;
                xhi = x[i2] / SQRT_BASE | 0;
                m = khi * xlo + xhi * klo;
                temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                carry = (temp / base2 | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                x[i2] = temp % base2;
              }
              if (carry)
                x = [carry].concat(x);
              return x;
            }
            function compare10(a2, b2, aL, bL) {
              var i2, cmp;
              if (aL != bL) {
                cmp = aL > bL ? 1 : -1;
              } else {
                for (i2 = cmp = 0; i2 < aL; i2++) {
                  if (a2[i2] != b2[i2]) {
                    cmp = a2[i2] > b2[i2] ? 1 : -1;
                    break;
                  }
                }
              }
              return cmp;
            }
            function subtract(a2, b2, aL, base2) {
              var i2 = 0;
              for (; aL--; ) {
                a2[aL] -= i2;
                i2 = a2[aL] < b2[aL] ? 1 : 0;
                a2[aL] = i2 * base2 + a2[aL] - b2[aL];
              }
              for (; !a2[0] && a2.length > 1; a2.splice(0, 1))
                ;
            }
            return function(x, y, dp, rm, base2) {
              var cmp, e2, i2, more, n, prod, prodL, q2, qc, rem4, remL, rem0, xi, xL, yc0, yL, yz, s2 = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
              if (!xc || !xc[0] || !yc || !yc[0]) {
                return new BigNumber2(
                  !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : xc && xc[0] == 0 || !yc ? s2 * 0 : s2 / 0
                );
              }
              q2 = new BigNumber2(s2);
              qc = q2.c = [];
              e2 = x.e - y.e;
              s2 = dp + e2 + 1;
              if (!base2) {
                base2 = BASE2;
                e2 = bitFloor(x.e / LOG_BASE2) - bitFloor(y.e / LOG_BASE2);
                s2 = s2 / LOG_BASE2 | 0;
              }
              for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++)
                ;
              if (yc[i2] > (xc[i2] || 0))
                e2--;
              if (s2 < 0) {
                qc.push(1);
                more = true;
              } else {
                xL = xc.length;
                yL = yc.length;
                i2 = 0;
                s2 += 2;
                n = mathfloor2(base2 / (yc[0] + 1));
                if (n > 1) {
                  yc = multiply(yc, n, base2);
                  xc = multiply(xc, n, base2);
                  yL = yc.length;
                  xL = xc.length;
                }
                xi = yL;
                rem4 = xc.slice(0, yL);
                remL = rem4.length;
                for (; remL < yL; rem4[remL++] = 0)
                  ;
                yz = yc.slice();
                yz = [0].concat(yz);
                yc0 = yc[0];
                if (yc[1] >= base2 / 2)
                  yc0++;
                do {
                  n = 0;
                  cmp = compare10(yc, rem4, yL, remL);
                  if (cmp < 0) {
                    rem0 = rem4[0];
                    if (yL != remL)
                      rem0 = rem0 * base2 + (rem4[1] || 0);
                    n = mathfloor2(rem0 / yc0);
                    if (n > 1) {
                      if (n >= base2)
                        n = base2 - 1;
                      prod = multiply(yc, n, base2);
                      prodL = prod.length;
                      remL = rem4.length;
                      while (compare10(prod, rem4, prodL, remL) == 1) {
                        n--;
                        subtract(prod, yL < prodL ? yz : yc, prodL, base2);
                        prodL = prod.length;
                        cmp = 1;
                      }
                    } else {
                      if (n == 0) {
                        cmp = n = 1;
                      }
                      prod = yc.slice();
                      prodL = prod.length;
                    }
                    if (prodL < remL)
                      prod = [0].concat(prod);
                    subtract(rem4, prod, remL, base2);
                    remL = rem4.length;
                    if (cmp == -1) {
                      while (compare10(yc, rem4, yL, remL) < 1) {
                        n++;
                        subtract(rem4, yL < remL ? yz : yc, remL, base2);
                        remL = rem4.length;
                      }
                    }
                  } else if (cmp === 0) {
                    n++;
                    rem4 = [0];
                  }
                  qc[i2++] = n;
                  if (rem4[0]) {
                    rem4[remL++] = xc[xi] || 0;
                  } else {
                    rem4 = [xc[xi]];
                    remL = 1;
                  }
                } while ((xi++ < xL || rem4[0] != null) && s2--);
                more = rem4[0] != null;
                if (!qc[0])
                  qc.splice(0, 1);
              }
              if (base2 == BASE2) {
                for (i2 = 1, s2 = qc[0]; s2 >= 10; s2 /= 10, i2++)
                  ;
                round5(q2, dp + (q2.e = i2 + e2 * LOG_BASE2 - 1) + 1, rm, more);
              } else {
                q2.e = e2;
                q2.r = +more;
              }
              return q2;
            };
          }();
          function format(n, i2, rm, id3) {
            var c0, e2, ne, len, str;
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            if (!n.c)
              return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i2 == null) {
              str = coeffToString(n.c);
              str = id3 == 1 || id3 == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
            } else {
              n = round5(new BigNumber2(n), i2, rm);
              e2 = n.e;
              str = coeffToString(n.c);
              len = str.length;
              if (id3 == 1 || id3 == 2 && (i2 <= e2 || e2 <= TO_EXP_NEG)) {
                for (; len < i2; str += "0", len++)
                  ;
                str = toExponential(str, e2);
              } else {
                i2 -= ne;
                str = toFixedPoint(str, e2, "0");
                if (e2 + 1 > len) {
                  if (--i2 > 0)
                    for (str += "."; i2--; str += "0")
                      ;
                } else {
                  i2 += e2 - len;
                  if (i2 > 0) {
                    if (e2 + 1 == len)
                      str += ".";
                    for (; i2--; str += "0")
                      ;
                  }
                }
              }
            }
            return n.s < 0 && c0 ? "-" + str : str;
          }
          function maxOrMin2(args, method2) {
            var n, i2 = 1, m = new BigNumber2(args[0]);
            for (; i2 < args.length; i2++) {
              n = new BigNumber2(args[i2]);
              if (!n.s) {
                m = n;
                break;
              } else if (method2.call(m, n)) {
                m = n;
              }
            }
            return m;
          }
          function normalise(n, c, e2) {
            var i2 = 1, j = c.length;
            for (; !c[--j]; c.pop())
              ;
            for (j = c[0]; j >= 10; j /= 10, i2++)
              ;
            if ((e2 = i2 + e2 * LOG_BASE2 - 1) > MAX_EXP) {
              n.c = n.e = null;
            } else if (e2 < MIN_EXP) {
              n.c = [n.e = 0];
            } else {
              n.e = e2;
              n.c = c;
            }
            return n;
          }
          parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b2) {
              var base2, s2 = isNum ? str : str.replace(whitespaceOrPlus, "");
              if (isInfinityOrNaN.test(s2)) {
                x.s = isNaN(s2) ? null : s2 < 0 ? -1 : 1;
              } else {
                if (!isNum) {
                  s2 = s2.replace(basePrefix, function(m, p1, p2) {
                    base2 = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                    return !b2 || b2 == base2 ? p1 : m;
                  });
                  if (b2) {
                    base2 = b2;
                    s2 = s2.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                  }
                  if (str != s2)
                    return new BigNumber2(s2, base2);
                }
                if (BigNumber2.DEBUG) {
                  throw Error(bignumberError + "Not a" + (b2 ? " base " + b2 : "") + " number: " + str);
                }
                x.s = null;
              }
              x.c = x.e = null;
            };
          }();
          function round5(x, sd, rm, r) {
            var d, i2, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            if (xc) {
              out: {
                for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                  ;
                i2 = sd - d;
                if (i2 < 0) {
                  i2 += LOG_BASE2;
                  j = sd;
                  n = xc[ni = 0];
                  rd = n / pows10[d - j - 1] % 10 | 0;
                } else {
                  ni = mathceil((i2 + 1) / LOG_BASE2);
                  if (ni >= xc.length) {
                    if (r) {
                      for (; xc.length <= ni; xc.push(0))
                        ;
                      n = rd = 0;
                      d = 1;
                      i2 %= LOG_BASE2;
                      j = i2 - LOG_BASE2 + 1;
                    } else {
                      break out;
                    }
                  } else {
                    n = k = xc[ni];
                    for (d = 1; k >= 10; k /= 10, d++)
                      ;
                    i2 %= LOG_BASE2;
                    j = i2 - LOG_BASE2 + d;
                    rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                  }
                }
                r = r || sd < 0 || xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i2 > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                if (sd < 1 || !xc[0]) {
                  xc.length = 0;
                  if (r) {
                    sd -= x.e + 1;
                    xc[0] = pows10[(LOG_BASE2 - sd % LOG_BASE2) % LOG_BASE2];
                    x.e = -sd || 0;
                  } else {
                    xc[0] = x.e = 0;
                  }
                  return x;
                }
                if (i2 == 0) {
                  xc.length = ni;
                  k = 1;
                  ni--;
                } else {
                  xc.length = ni + 1;
                  k = pows10[LOG_BASE2 - i2];
                  xc[ni] = j > 0 ? mathfloor2(n / pows10[d - j] % pows10[j]) * k : 0;
                }
                if (r) {
                  for (; ; ) {
                    if (ni == 0) {
                      for (i2 = 1, j = xc[0]; j >= 10; j /= 10, i2++)
                        ;
                      j = xc[0] += k;
                      for (k = 1; j >= 10; j /= 10, k++)
                        ;
                      if (i2 != k) {
                        x.e++;
                        if (xc[0] == BASE2)
                          xc[0] = 1;
                      }
                      break;
                    } else {
                      xc[ni] += k;
                      if (xc[ni] != BASE2)
                        break;
                      xc[ni--] = 0;
                      k = 1;
                    }
                  }
                }
                for (i2 = xc.length; xc[--i2] === 0; xc.pop())
                  ;
              }
              if (x.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (x.e < MIN_EXP) {
                x.c = [x.e = 0];
              }
            }
            return x;
          }
          function valueOf(n) {
            var str, e2 = n.e;
            if (e2 === null)
              return n.toString();
            str = coeffToString(n.c);
            str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(str, e2) : toFixedPoint(str, e2, "0");
            return n.s < 0 ? "-" + str : str;
          }
          P2.absoluteValue = P2.abs = function() {
            var x = new BigNumber2(this);
            if (x.s < 0)
              x.s = 1;
            return x;
          };
          P2.comparedTo = function(y, b2) {
            return compare9(this, new BigNumber2(y, b2));
          };
          P2.decimalPlaces = P2.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
              intCheck(dp, 0, MAX);
              if (rm == null)
                rm = ROUNDING_MODE;
              else
                intCheck(rm, 0, 8);
              return round5(new BigNumber2(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c))
              return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE2)) * LOG_BASE2;
            if (v = c[v])
              for (; v % 10 == 0; v /= 10, n--)
                ;
            if (n < 0)
              n = 0;
            return n;
          };
          P2.dividedBy = P2.div = function(y, b2) {
            return div16(this, new BigNumber2(y, b2), DECIMAL_PLACES, ROUNDING_MODE);
          };
          P2.dividedToIntegerBy = P2.idiv = function(y, b2) {
            return div16(this, new BigNumber2(y, b2), 0, 1);
          };
          P2.exponentiatedBy = P2.pow = function(n, m) {
            var half, isModExp, i2, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber2(n);
            if (n.c && !n.isInteger()) {
              throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
            }
            if (m != null)
              m = new BigNumber2(m);
            nIsBig = n.e > 14;
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
              y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd2(n) : +valueOf(n)));
              return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
              if (m.c ? !m.c[0] : !m.s)
                return new BigNumber2(NaN);
              isModExp = !nIsNeg && x.isInteger() && m.isInteger();
              if (isModExp)
                x = x.mod(m);
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
              k = x.s < 0 && isOdd2(n) ? -0 : 0;
              if (x.e > -1)
                k = 1 / k;
              return new BigNumber2(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) {
              k = mathceil(POW_PRECISION / LOG_BASE2 + 2);
            }
            if (nIsBig) {
              half = new BigNumber2(0.5);
              if (nIsNeg)
                n.s = 1;
              nIsOdd = isOdd2(n);
            } else {
              i2 = Math.abs(+valueOf(n));
              nIsOdd = i2 % 2;
            }
            y = new BigNumber2(ONE);
            for (; ; ) {
              if (nIsOdd) {
                y = y.times(x);
                if (!y.c)
                  break;
                if (k) {
                  if (y.c.length > k)
                    y.c.length = k;
                } else if (isModExp) {
                  y = y.mod(m);
                }
              }
              if (i2) {
                i2 = mathfloor2(i2 / 2);
                if (i2 === 0)
                  break;
                nIsOdd = i2 % 2;
              } else {
                n = n.times(half);
                round5(n, n.e + 1, 1);
                if (n.e > 14) {
                  nIsOdd = isOdd2(n);
                } else {
                  i2 = +valueOf(n);
                  if (i2 === 0)
                    break;
                  nIsOdd = i2 % 2;
                }
              }
              x = x.times(x);
              if (k) {
                if (x.c && x.c.length > k)
                  x.c.length = k;
              } else if (isModExp) {
                x = x.mod(m);
              }
            }
            if (isModExp)
              return y;
            if (nIsNeg)
              y = ONE.div(y);
            return m ? y.mod(m) : k ? round5(y, POW_PRECISION, ROUNDING_MODE, more) : y;
          };
          P2.integerValue = function(rm) {
            var n = new BigNumber2(this);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round5(n, n.e + 1, rm);
          };
          P2.isEqualTo = P2.eq = function(y, b2) {
            return compare9(this, new BigNumber2(y, b2)) === 0;
          };
          P2.isFinite = function() {
            return !!this.c;
          };
          P2.isGreaterThan = P2.gt = function(y, b2) {
            return compare9(this, new BigNumber2(y, b2)) > 0;
          };
          P2.isGreaterThanOrEqualTo = P2.gte = function(y, b2) {
            return (b2 = compare9(this, new BigNumber2(y, b2))) === 1 || b2 === 0;
          };
          P2.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE2) > this.c.length - 2;
          };
          P2.isLessThan = P2.lt = function(y, b2) {
            return compare9(this, new BigNumber2(y, b2)) < 0;
          };
          P2.isLessThanOrEqualTo = P2.lte = function(y, b2) {
            return (b2 = compare9(this, new BigNumber2(y, b2))) === -1 || b2 === 0;
          };
          P2.isNaN = function() {
            return !this.s;
          };
          P2.isNegative = function() {
            return this.s < 0;
          };
          P2.isPositive = function() {
            return this.s > 0;
          };
          P2.isZero = function() {
            return !!this.c && this.c[0] == 0;
          };
          P2.minus = function(y, b2) {
            var i2, j, t, xLTy, x = this, a2 = x.s;
            y = new BigNumber2(y, b2);
            b2 = y.s;
            if (!a2 || !b2)
              return new BigNumber2(NaN);
            if (a2 != b2) {
              y.s = -b2;
              return x.plus(y);
            }
            var xe = x.e / LOG_BASE2, ye = y.e / LOG_BASE2, xc = x.c, yc = y.c;
            if (!xe || !ye) {
              if (!xc || !yc)
                return xc ? (y.s = -b2, y) : new BigNumber2(yc ? x : NaN);
              if (!xc[0] || !yc[0]) {
                return yc[0] ? (y.s = -b2, y) : new BigNumber2(xc[0] ? x : ROUNDING_MODE == 3 ? -0 : 0);
              }
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            if (a2 = xe - ye) {
              if (xLTy = a2 < 0) {
                a2 = -a2;
                t = xc;
              } else {
                ye = xe;
                t = yc;
              }
              t.reverse();
              for (b2 = a2; b2--; t.push(0))
                ;
              t.reverse();
            } else {
              j = (xLTy = (a2 = xc.length) < (b2 = yc.length)) ? a2 : b2;
              for (a2 = b2 = 0; b2 < j; b2++) {
                if (xc[b2] != yc[b2]) {
                  xLTy = xc[b2] < yc[b2];
                  break;
                }
              }
            }
            if (xLTy) {
              t = xc;
              xc = yc;
              yc = t;
              y.s = -y.s;
            }
            b2 = (j = yc.length) - (i2 = xc.length);
            if (b2 > 0)
              for (; b2--; xc[i2++] = 0)
                ;
            b2 = BASE2 - 1;
            for (; j > a2; ) {
              if (xc[--j] < yc[j]) {
                for (i2 = j; i2 && !xc[--i2]; xc[i2] = b2)
                  ;
                --xc[i2];
                xc[j] += BASE2;
              }
              xc[j] -= yc[j];
            }
            for (; xc[0] == 0; xc.splice(0, 1), --ye)
              ;
            if (!xc[0]) {
              y.s = ROUNDING_MODE == 3 ? -1 : 1;
              y.c = [y.e = 0];
              return y;
            }
            return normalise(y, xc, ye);
          };
          P2.modulo = P2.mod = function(y, b2) {
            var q2, s2, x = this;
            y = new BigNumber2(y, b2);
            if (!x.c || !y.s || y.c && !y.c[0]) {
              return new BigNumber2(NaN);
            } else if (!y.c || x.c && !x.c[0]) {
              return new BigNumber2(x);
            }
            if (MODULO_MODE == 9) {
              s2 = y.s;
              y.s = 1;
              q2 = div16(x, y, 0, 3);
              y.s = s2;
              q2.s *= s2;
            } else {
              q2 = div16(x, y, 0, MODULO_MODE);
            }
            y = x.minus(q2.times(y));
            if (!y.c[0] && MODULO_MODE == 1)
              y.s = x.s;
            return y;
          };
          P2.multipliedBy = P2.times = function(y, b2) {
            var c, e2, i2, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base2, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b2)).c;
            if (!xc || !yc || !xc[0] || !yc[0]) {
              if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                y.c = y.e = y.s = null;
              } else {
                y.s *= x.s;
                if (!xc || !yc) {
                  y.c = y.e = null;
                } else {
                  y.c = [0];
                  y.e = 0;
                }
              }
              return y;
            }
            e2 = bitFloor(x.e / LOG_BASE2) + bitFloor(y.e / LOG_BASE2);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            if (xcL < ycL) {
              zc = xc;
              xc = yc;
              yc = zc;
              i2 = xcL;
              xcL = ycL;
              ycL = i2;
            }
            for (i2 = xcL + ycL, zc = []; i2--; zc.push(0))
              ;
            base2 = BASE2;
            sqrtBase = SQRT_BASE;
            for (i2 = ycL; --i2 >= 0; ) {
              c = 0;
              ylo = yc[i2] % sqrtBase;
              yhi = yc[i2] / sqrtBase | 0;
              for (k = xcL, j = i2 + k; j > i2; ) {
                xlo = xc[--k] % sqrtBase;
                xhi = xc[k] / sqrtBase | 0;
                m = yhi * xlo + xhi * ylo;
                xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                c = (xlo / base2 | 0) + (m / sqrtBase | 0) + yhi * xhi;
                zc[j--] = xlo % base2;
              }
              zc[j] = c;
            }
            if (c) {
              ++e2;
            } else {
              zc.splice(0, 1);
            }
            return normalise(y, zc, e2);
          };
          P2.negated = function() {
            var x = new BigNumber2(this);
            x.s = -x.s || null;
            return x;
          };
          P2.plus = function(y, b2) {
            var t, x = this, a2 = x.s;
            y = new BigNumber2(y, b2);
            b2 = y.s;
            if (!a2 || !b2)
              return new BigNumber2(NaN);
            if (a2 != b2) {
              y.s = -b2;
              return x.minus(y);
            }
            var xe = x.e / LOG_BASE2, ye = y.e / LOG_BASE2, xc = x.c, yc = y.c;
            if (!xe || !ye) {
              if (!xc || !yc)
                return new BigNumber2(a2 / 0);
              if (!xc[0] || !yc[0])
                return yc[0] ? y : new BigNumber2(xc[0] ? x : a2 * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            if (a2 = xe - ye) {
              if (a2 > 0) {
                ye = xe;
                t = yc;
              } else {
                a2 = -a2;
                t = xc;
              }
              t.reverse();
              for (; a2--; t.push(0))
                ;
              t.reverse();
            }
            a2 = xc.length;
            b2 = yc.length;
            if (a2 - b2 < 0) {
              t = yc;
              yc = xc;
              xc = t;
              b2 = a2;
            }
            for (a2 = 0; b2; ) {
              a2 = (xc[--b2] = xc[b2] + yc[b2] + a2) / BASE2 | 0;
              xc[b2] = BASE2 === xc[b2] ? 0 : xc[b2] % BASE2;
            }
            if (a2) {
              xc = [a2].concat(xc);
              ++ye;
            }
            return normalise(y, xc, ye);
          };
          P2.precision = P2.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
              intCheck(sd, 1, MAX);
              if (rm == null)
                rm = ROUNDING_MODE;
              else
                intCheck(rm, 0, 8);
              return round5(new BigNumber2(x), sd, rm);
            }
            if (!(c = x.c))
              return null;
            v = c.length - 1;
            n = v * LOG_BASE2 + 1;
            if (v = c[v]) {
              for (; v % 10 == 0; v /= 10, n--)
                ;
              for (v = c[0]; v >= 10; v /= 10, n++)
                ;
            }
            if (sd && x.e + 1 > n)
              n = x.e + 1;
            return n;
          };
          P2.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2);
            return this.times("1e" + k);
          };
          P2.squareRoot = P2.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s2 = x.s, e2 = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
            if (s2 !== 1 || !c || !c[0]) {
              return new BigNumber2(!s2 || s2 < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            }
            s2 = Math.sqrt(+valueOf(x));
            if (s2 == 0 || s2 == 1 / 0) {
              n = coeffToString(c);
              if ((n.length + e2) % 2 == 0)
                n += "0";
              s2 = Math.sqrt(+n);
              e2 = bitFloor((e2 + 1) / 2) - (e2 < 0 || e2 % 2);
              if (s2 == 1 / 0) {
                n = "5e" + e2;
              } else {
                n = s2.toExponential();
                n = n.slice(0, n.indexOf("e") + 1) + e2;
              }
              r = new BigNumber2(n);
            } else {
              r = new BigNumber2(s2 + "");
            }
            if (r.c[0]) {
              e2 = r.e;
              s2 = e2 + dp;
              if (s2 < 3)
                s2 = 0;
              for (; ; ) {
                t = r;
                r = half.times(t.plus(div16(x, t, dp, 1)));
                if (coeffToString(t.c).slice(0, s2) === (n = coeffToString(r.c)).slice(0, s2)) {
                  if (r.e < e2)
                    --s2;
                  n = n.slice(s2 - 3, s2 + 1);
                  if (n == "9999" || !rep && n == "4999") {
                    if (!rep) {
                      round5(t, t.e + DECIMAL_PLACES + 2, 0);
                      if (t.times(t).eq(x)) {
                        r = t;
                        break;
                      }
                    }
                    dp += 4;
                    s2 += 4;
                    rep = 1;
                  } else {
                    if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                      round5(r, r.e + DECIMAL_PLACES + 2, 1);
                      m = !r.times(r).eq(x);
                    }
                    break;
                  }
                }
              }
            }
            return round5(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
          };
          P2.toExponential = function(dp, rm) {
            if (dp != null) {
              intCheck(dp, 0, MAX);
              dp++;
            }
            return format(this, dp, rm, 1);
          };
          P2.toFixed = function(dp, rm) {
            if (dp != null) {
              intCheck(dp, 0, MAX);
              dp = dp + this.e + 1;
            }
            return format(this, dp, rm);
          };
          P2.toFormat = function(dp, rm, format2) {
            var str, x = this;
            if (format2 == null) {
              if (dp != null && rm && typeof rm == "object") {
                format2 = rm;
                rm = null;
              } else if (dp && typeof dp == "object") {
                format2 = dp;
                dp = rm = null;
              } else {
                format2 = FORMAT;
              }
            } else if (typeof format2 != "object") {
              throw Error(bignumberError + "Argument not an object: " + format2);
            }
            str = x.toFixed(dp, rm);
            if (x.c) {
              var i2, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
              if (g2) {
                i2 = g1;
                g1 = g2;
                g2 = i2;
                len -= i2;
              }
              if (g1 > 0 && len > 0) {
                i2 = len % g1 || g1;
                intPart = intDigits.substr(0, i2);
                for (; i2 < len; i2 += g1)
                  intPart += groupSeparator + intDigits.substr(i2, g1);
                if (g2 > 0)
                  intPart += groupSeparator + intDigits.slice(i2);
                if (isNeg)
                  intPart = "-" + intPart;
              }
              str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
                new RegExp("\\d{" + g2 + "}\\B", "g"),
                "$&" + (format2.fractionGroupSeparator || "")
              ) : fractionPart) : intPart;
            }
            return (format2.prefix || "") + str + (format2.suffix || "");
          };
          P2.toFraction = function(md) {
            var d, d0, d1, d2, e2, exp4, n, n0, n1, q2, r, s2, x = this, xc = x.c;
            if (md != null) {
              n = new BigNumber2(md);
              if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
              }
            }
            if (!xc)
              return new BigNumber2(x);
            d = new BigNumber2(ONE);
            n1 = d0 = new BigNumber2(ONE);
            d1 = n0 = new BigNumber2(ONE);
            s2 = coeffToString(xc);
            e2 = d.e = s2.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp4 = e2 % LOG_BASE2) < 0 ? LOG_BASE2 + exp4 : exp4];
            md = !md || n.comparedTo(d) > 0 ? e2 > 0 ? d : n1 : n;
            exp4 = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber2(s2);
            n0.c[0] = 0;
            for (; ; ) {
              q2 = div16(n, d, 0, 1);
              d2 = d0.plus(q2.times(d1));
              if (d2.comparedTo(md) == 1)
                break;
              d0 = d1;
              d1 = d2;
              n1 = n0.plus(q2.times(d2 = n1));
              n0 = d2;
              d = n.minus(q2.times(d2 = d));
              n = d2;
            }
            d2 = div16(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e2 = e2 * 2;
            r = div16(n1, d1, e2, ROUNDING_MODE).minus(x).abs().comparedTo(
              div16(n0, d0, e2, ROUNDING_MODE).minus(x).abs()
            ) < 1 ? [n1, d1] : [n0, d0];
            MAX_EXP = exp4;
            return r;
          };
          P2.toNumber = function() {
            return +valueOf(this);
          };
          P2.toPrecision = function(sd, rm) {
            if (sd != null)
              intCheck(sd, 1, MAX);
            return format(this, sd, rm, 2);
          };
          P2.toString = function(b2) {
            var str, n = this, s2 = n.s, e2 = n.e;
            if (e2 === null) {
              if (s2) {
                str = "Infinity";
                if (s2 < 0)
                  str = "-" + str;
              } else {
                str = "NaN";
              }
            } else {
              if (b2 == null) {
                str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(coeffToString(n.c), e2) : toFixedPoint(coeffToString(n.c), e2, "0");
              } else if (b2 === 10 && alphabetHasNormalDecimalDigits) {
                n = round5(new BigNumber2(n), DECIMAL_PLACES + e2 + 1, ROUNDING_MODE);
                str = toFixedPoint(coeffToString(n.c), n.e, "0");
              } else {
                intCheck(b2, 2, ALPHABET.length, "Base");
                str = convertBase2(toFixedPoint(coeffToString(n.c), e2, "0"), 10, b2, s2, true);
              }
              if (s2 < 0 && n.c[0])
                str = "-" + str;
            }
            return str;
          };
          P2.valueOf = P2.toJSON = function() {
            return valueOf(this);
          };
          P2._isBigNumber = true;
          if (configObject != null)
            BigNumber2.set(configObject);
          return BigNumber2;
        }
        function bitFloor(n) {
          var i2 = n | 0;
          return n > 0 || n === i2 ? i2 : i2 - 1;
        }
        function coeffToString(a2) {
          var s2, z, i2 = 1, j = a2.length, r = a2[0] + "";
          for (; i2 < j; ) {
            s2 = a2[i2++] + "";
            z = LOG_BASE2 - s2.length;
            for (; z--; s2 = "0" + s2)
              ;
            r += s2;
          }
          for (j = r.length; r.charCodeAt(--j) === 48; )
            ;
          return r.slice(0, j + 1 || 1);
        }
        function compare9(x, y) {
          var a2, b2, xc = x.c, yc = y.c, i2 = x.s, j = y.s, k = x.e, l = y.e;
          if (!i2 || !j)
            return null;
          a2 = xc && !xc[0];
          b2 = yc && !yc[0];
          if (a2 || b2)
            return a2 ? b2 ? 0 : -j : i2;
          if (i2 != j)
            return i2;
          a2 = i2 < 0;
          b2 = k == l;
          if (!xc || !yc)
            return b2 ? 0 : !xc ^ a2 ? 1 : -1;
          if (!b2)
            return k > l ^ a2 ? 1 : -1;
          j = (k = xc.length) < (l = yc.length) ? k : l;
          for (i2 = 0; i2 < j; i2++)
            if (xc[i2] != yc[i2])
              return xc[i2] > yc[i2] ^ a2 ? 1 : -1;
          return k == l ? 0 : k > l ^ a2 ? 1 : -1;
        }
        function intCheck(n, min7, max8, name16) {
          if (n < min7 || n > max8 || n !== mathfloor2(n)) {
            throw Error(bignumberError + (name16 || "Argument") + (typeof n == "number" ? n < min7 || n > max8 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
          }
        }
        function isOdd2(n) {
          var k = n.c.length - 1;
          return bitFloor(n.e / LOG_BASE2) == k && n.c[k] % 2 != 0;
        }
        function toExponential(str, e2) {
          return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e2 < 0 ? "e" : "e+") + e2;
        }
        function toFixedPoint(str, e2, z) {
          var len, zs;
          if (e2 < 0) {
            for (zs = z + "."; ++e2; zs += z)
              ;
            str = zs + str;
          } else {
            len = str.length;
            if (++e2 > len) {
              for (zs = z, e2 -= len; --e2; zs += z)
                ;
              str += zs;
            } else if (e2 < len) {
              str = str.slice(0, e2) + "." + str.slice(e2);
            }
          }
          return str;
        }
        BigNumber = clone3();
        BigNumber["default"] = BigNumber.BigNumber = BigNumber;
        if (typeof define == "function" && define.amd) {
          define(function() {
            return BigNumber;
          });
        } else if (typeof module != "undefined" && module.exports) {
          module.exports = BigNumber;
        } else {
          if (!globalObject) {
            globalObject = typeof self != "undefined" && self ? self : window;
          }
          globalObject.BigNumber = BigNumber;
        }
      })(exports);
    }
  });

  // node_modules/json-bigint/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/json-bigint/lib/stringify.js"(exports, module) {
      var BigNumber = require_bignumber();
      var JSON2 = module.exports;
      (function() {
        "use strict";
        function f(n) {
          return n < 10 ? "0" + n : n;
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta2 = {
          "\b": "\\b",
          "	": "\\t",
          "\n": "\\n",
          "\f": "\\f",
          "\r": "\\r",
          '"': '\\"',
          "\\": "\\\\"
        }, rep;
        function quote(string) {
          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function(a2) {
            var c = meta2[a2];
            return typeof c === "string" ? c : "\\u" + ("0000" + a2.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
        }
        function str(key, holder) {
          var i2, k, v, length11, mind = gap, partial, value14 = holder[key], isBigNumber = value14 != null && (value14 instanceof BigNumber || BigNumber.isBigNumber(value14));
          if (value14 && typeof value14 === "object" && typeof value14.toJSON === "function") {
            value14 = value14.toJSON(key);
          }
          if (typeof rep === "function") {
            value14 = rep.call(holder, key, value14);
          }
          switch (typeof value14) {
            case "string":
              if (isBigNumber) {
                return value14;
              } else {
                return quote(value14);
              }
            case "number":
              return isFinite(value14) ? String(value14) : "null";
            case "boolean":
            case "null":
            case "bigint":
              return String(value14);
            case "object":
              if (!value14) {
                return "null";
              }
              gap += indent;
              partial = [];
              if (Object.prototype.toString.apply(value14) === "[object Array]") {
                length11 = value14.length;
                for (i2 = 0; i2 < length11; i2 += 1) {
                  partial[i2] = str(i2, value14) || "null";
                }
                v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
              }
              if (rep && typeof rep === "object") {
                length11 = rep.length;
                for (i2 = 0; i2 < length11; i2 += 1) {
                  if (typeof rep[i2] === "string") {
                    k = rep[i2];
                    v = str(k, value14);
                    if (v) {
                      partial.push(quote(k) + (gap ? ": " : ":") + v);
                    }
                  }
                }
              } else {
                Object.keys(value14).forEach(function(k2) {
                  var v2 = str(k2, value14);
                  if (v2) {
                    partial.push(quote(k2) + (gap ? ": " : ":") + v2);
                  }
                });
              }
              v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
              gap = mind;
              return v;
          }
        }
        if (typeof JSON2.stringify !== "function") {
          JSON2.stringify = function(value14, replacer, space) {
            var i2;
            gap = "";
            indent = "";
            if (typeof space === "number") {
              for (i2 = 0; i2 < space; i2 += 1) {
                indent += " ";
              }
            } else if (typeof space === "string") {
              indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
              throw new Error("JSON.stringify");
            }
            return str("", { "": value14 });
          };
        }
      })();
    }
  });

  // node_modules/json-bigint/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/json-bigint/lib/parse.js"(exports, module) {
      var BigNumber = null;
      var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
      var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
      var json_parse = function(options2) {
        "use strict";
        var _options = {
          strict: false,
          storeAsString: false,
          alwaysParseAsBig: false,
          useNativeBigInt: false,
          protoAction: "error",
          constructorAction: "error"
        };
        if (options2 !== void 0 && options2 !== null) {
          if (options2.strict === true) {
            _options.strict = true;
          }
          if (options2.storeAsString === true) {
            _options.storeAsString = true;
          }
          _options.alwaysParseAsBig = options2.alwaysParseAsBig === true ? options2.alwaysParseAsBig : false;
          _options.useNativeBigInt = options2.useNativeBigInt === true ? options2.useNativeBigInt : false;
          if (typeof options2.constructorAction !== "undefined") {
            if (options2.constructorAction === "error" || options2.constructorAction === "ignore" || options2.constructorAction === "preserve") {
              _options.constructorAction = options2.constructorAction;
            } else {
              throw new Error(
                `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options2.constructorAction}`
              );
            }
          }
          if (typeof options2.protoAction !== "undefined") {
            if (options2.protoAction === "error" || options2.protoAction === "ignore" || options2.protoAction === "preserve") {
              _options.protoAction = options2.protoAction;
            } else {
              throw new Error(
                `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options2.protoAction}`
              );
            }
          }
        }
        var at, ch, escapee = {
          '"': '"',
          "\\": "\\",
          "/": "/",
          b: "\b",
          f: "\f",
          n: "\n",
          r: "\r",
          t: "	"
        }, text8, error4 = function(m) {
          throw {
            name: "SyntaxError",
            message: m,
            at,
            text: text8
          };
        }, next2 = function(c) {
          if (c && c !== ch) {
            error4("Expected '" + c + "' instead of '" + ch + "'");
          }
          ch = text8.charAt(at);
          at += 1;
          return ch;
        }, number = function() {
          var number2, string2 = "";
          if (ch === "-") {
            string2 = "-";
            next2("-");
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next2();
          }
          if (ch === ".") {
            string2 += ".";
            while (next2() && ch >= "0" && ch <= "9") {
              string2 += ch;
            }
          }
          if (ch === "e" || ch === "E") {
            string2 += ch;
            next2();
            if (ch === "-" || ch === "+") {
              string2 += ch;
              next2();
            }
            while (ch >= "0" && ch <= "9") {
              string2 += ch;
              next2();
            }
          }
          number2 = +string2;
          if (!isFinite(number2)) {
            error4("Bad number");
          } else {
            if (BigNumber == null)
              BigNumber = require_bignumber();
            if (string2.length > 15)
              return _options.storeAsString ? string2 : _options.useNativeBigInt ? BigInt(string2) : new BigNumber(string2);
            else
              return !_options.alwaysParseAsBig ? number2 : _options.useNativeBigInt ? BigInt(number2) : new BigNumber(number2);
          }
        }, string = function() {
          var hex, i2, string2 = "", uffff;
          if (ch === '"') {
            var startAt = at;
            while (next2()) {
              if (ch === '"') {
                if (at - 1 > startAt)
                  string2 += text8.substring(startAt, at - 1);
                next2();
                return string2;
              }
              if (ch === "\\") {
                if (at - 1 > startAt)
                  string2 += text8.substring(startAt, at - 1);
                next2();
                if (ch === "u") {
                  uffff = 0;
                  for (i2 = 0; i2 < 4; i2 += 1) {
                    hex = parseInt(next2(), 16);
                    if (!isFinite(hex)) {
                      break;
                    }
                    uffff = uffff * 16 + hex;
                  }
                  string2 += String.fromCharCode(uffff);
                } else if (typeof escapee[ch] === "string") {
                  string2 += escapee[ch];
                } else {
                  break;
                }
                startAt = at;
              }
            }
          }
          error4("Bad string");
        }, white = function() {
          while (ch && ch <= " ") {
            next2();
          }
        }, word = function() {
          switch (ch) {
            case "t":
              next2("t");
              next2("r");
              next2("u");
              next2("e");
              return true;
            case "f":
              next2("f");
              next2("a");
              next2("l");
              next2("s");
              next2("e");
              return false;
            case "n":
              next2("n");
              next2("u");
              next2("l");
              next2("l");
              return null;
          }
          error4("Unexpected '" + ch + "'");
        }, value14, array2 = function() {
          var array3 = [];
          if (ch === "[") {
            next2("[");
            white();
            if (ch === "]") {
              next2("]");
              return array3;
            }
            while (ch) {
              array3.push(value14());
              white();
              if (ch === "]") {
                next2("]");
                return array3;
              }
              next2(",");
              white();
            }
          }
          error4("Bad array");
        }, object3 = function() {
          var key, object4 = /* @__PURE__ */ Object.create(null);
          if (ch === "{") {
            next2("{");
            white();
            if (ch === "}") {
              next2("}");
              return object4;
            }
            while (ch) {
              key = string();
              white();
              next2(":");
              if (_options.strict === true && Object.hasOwnProperty.call(object4, key)) {
                error4('Duplicate key "' + key + '"');
              }
              if (suspectProtoRx.test(key) === true) {
                if (_options.protoAction === "error") {
                  error4("Object contains forbidden prototype property");
                } else if (_options.protoAction === "ignore") {
                  value14();
                } else {
                  object4[key] = value14();
                }
              } else if (suspectConstructorRx.test(key) === true) {
                if (_options.constructorAction === "error") {
                  error4("Object contains forbidden constructor property");
                } else if (_options.constructorAction === "ignore") {
                  value14();
                } else {
                  object4[key] = value14();
                }
              } else {
                object4[key] = value14();
              }
              white();
              if (ch === "}") {
                next2("}");
                return object4;
              }
              next2(",");
              white();
            }
          }
          error4("Bad object");
        };
        value14 = function() {
          white();
          switch (ch) {
            case "{":
              return object3();
            case "[":
              return array2();
            case '"':
              return string();
            case "-":
              return number();
            default:
              return ch >= "0" && ch <= "9" ? number() : word();
          }
        };
        return function(source3, reviver) {
          var result;
          text8 = source3 + "";
          at = 0;
          ch = " ";
          result = value14();
          white();
          if (ch) {
            error4("Syntax error");
          }
          return typeof reviver === "function" ? function walk(holder, key) {
            var k, v, value15 = holder[key];
            if (value15 && typeof value15 === "object") {
              Object.keys(value15).forEach(function(k2) {
                v = walk(value15, k2);
                if (v !== void 0) {
                  value15[k2] = v;
                } else {
                  delete value15[k2];
                }
              });
            }
            return reviver.call(holder, key, value15);
          }({ "": result }, "") : result;
        };
      };
      module.exports = json_parse;
    }
  });

  // node_modules/json-bigint/index.js
  var require_json_bigint = __commonJS({
    "node_modules/json-bigint/index.js"(exports, module) {
      var json_stringify = require_stringify().stringify;
      var json_parse = require_parse();
      module.exports = function(options2) {
        return {
          parse: json_parse(options2),
          stringify: json_stringify
        };
      };
      module.exports.parse = json_parse();
      module.exports.stringify = json_stringify;
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i2 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i2.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i2.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x) {
          return f(g(x));
        };
      };
    }
  };
  var compose = function(dict) {
    return dict.compose;
  };
  var composeFlipped = function(dictSemigroupoid) {
    var compose1 = compose(dictSemigroupoid);
    return function(f) {
      return function(g) {
        return compose1(g)(f);
      };
    };
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x) {
      return x;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var flip = function(f) {
    return function(b2) {
      return function(a2) {
        return f(a2)(b2);
      };
    };
  };
  var $$const = function(a2) {
    return function(v) {
      return a2;
    };
  };
  var applyFlipped = function(x) {
    return function(f) {
      return f(x);
    };
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f) {
    return function(arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i2 = 0; i2 < l; i2++) {
        result[i2] = f(arr[i2]);
      }
      return result;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Type.Proxy/index.js
  var $$Proxy = /* @__PURE__ */ function() {
    function $$Proxy2() {
    }
    ;
    $$Proxy2.value = new $$Proxy2();
    return $$Proxy2;
  }();

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var mapFlipped = function(dictFunctor) {
    var map118 = map(dictFunctor);
    return function(fa) {
      return function(f) {
        return map118(f)(fa);
      };
    };
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var voidRight = function(dictFunctor) {
    var map118 = map(dictFunctor);
    return function(x) {
      return map118($$const(x));
    };
  };
  var functorFn = {
    map: /* @__PURE__ */ compose(semigroupoidFn)
  };
  var functorArray = {
    map: arrayMap
  };

  // output/Data.Semigroup/foreign.js
  var concatString = function(s1) {
    return function(s2) {
      return s1 + s2;
    };
  };
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0)
        return ys;
      if (ys.length === 0)
        return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Symbol/index.js
  var reflectSymbol = function(dict) {
    return dict.reflectSymbol;
  };

  // output/Record.Unsafe/foreign.js
  var unsafeGet = function(label7) {
    return function(rec) {
      return rec[label7];
    };
  };
  var unsafeSet = function(label7) {
    return function(value14) {
      return function(rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label7] = value14;
        return copy;
      };
    };
  };
  var unsafeDelete = function(label7) {
    return function(rec) {
      var copy = {};
      for (var key in rec) {
        if (key !== label7 && {}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      return copy;
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupString = {
    append: concatString
  };
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Control.Alt/index.js
  var alt = function(dict) {
    return dict.alt;
  };

  // output/Control.Apply/foreign.js
  var arrayApply = function(fs) {
    return function(xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l * k);
      var n = 0;
      for (var i2 = 0; i2 < l; i2++) {
        var f = fs[i2];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var applyFn = {
    apply: function(f) {
      return function(g) {
        return function(x) {
          return f(x)(g(x));
        };
      };
    },
    Functor0: function() {
      return functorFn;
    }
  };
  var applyArray = {
    apply: arrayApply,
    Functor0: function() {
      return functorArray;
    }
  };
  var apply = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply1 = apply(dictApply);
    var map37 = map(dictApply.Functor0());
    return function(a2) {
      return function(b2) {
        return apply1(map37($$const(identity2))(a2))(b2);
      };
    };
  };
  var lift2 = function(dictApply) {
    var apply1 = apply(dictApply);
    var map37 = map(dictApply.Functor0());
    return function(f) {
      return function(a2) {
        return function(b2) {
          return apply1(map37(f)(a2))(b2);
        };
      };
    };
  };
  var lift4 = function(dictApply) {
    var apply1 = apply(dictApply);
    var map37 = map(dictApply.Functor0());
    return function(f) {
      return function(a2) {
        return function(b2) {
          return function(c) {
            return function(d) {
              return apply1(apply1(apply1(map37(f)(a2))(b2))(c))(d);
            };
          };
        };
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var liftA1 = function(dictApplicative) {
    var apply10 = apply(dictApplicative.Apply0());
    var pure114 = pure(dictApplicative);
    return function(f) {
      return function(a2) {
        return apply10(pure114(f))(a2);
      };
    };
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt) {
    return function(eq29) {
      return function(gt) {
        return function(x) {
          return function(y) {
            return x < y ? lt : x === y ? eq29 : gt;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;
  var ordStringImpl = unsafeCompareImpl;

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqBooleanImpl = refEq;
  var eqIntImpl = refEq;
  var eqStringImpl = refEq;

  // output/Data.Eq/index.js
  var eqString = {
    eq: eqStringImpl
  };
  var eqRowNil = {
    eqRecord: function(v) {
      return function(v1) {
        return function(v2) {
          return true;
        };
      };
    }
  };
  var eqRecord = function(dict) {
    return dict.eqRecord;
  };
  var eqRec = function() {
    return function(dictEqRecord) {
      return {
        eq: eqRecord(dictEqRecord)($$Proxy.value)
      };
    };
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eqBoolean = {
    eq: eqBooleanImpl
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eq2 = /* @__PURE__ */ eq(eqBoolean);
  var eqRowCons = function(dictEqRecord) {
    var eqRecord1 = eqRecord(dictEqRecord);
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return function(dictEq) {
          var eq35 = eq(dictEq);
          return {
            eqRecord: function(v) {
              return function(ra) {
                return function(rb2) {
                  var tail3 = eqRecord1($$Proxy.value)(ra)(rb2);
                  var key = reflectSymbol2($$Proxy.value);
                  var get3 = unsafeGet(key);
                  return eq35(get3(ra))(get3(rb2)) && tail3;
                };
              };
            }
          };
        };
      };
    };
  };
  var notEq = function(dictEq) {
    var eq35 = eq(dictEq);
    return function(x) {
      return function(y) {
        return eq2(eq35(x)(y))(false);
      };
    };
  };

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();
  var invert = function(v) {
    if (v instanceof GT) {
      return LT.value;
    }
    ;
    if (v instanceof EQ) {
      return EQ.value;
    }
    ;
    if (v instanceof LT) {
      return GT.value;
    }
    ;
    throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [v.constructor.name]);
  };
  var eqOrdering = {
    eq: function(v) {
      return function(v1) {
        if (v instanceof LT && v1 instanceof LT) {
          return true;
        }
        ;
        if (v instanceof GT && v1 instanceof GT) {
          return true;
        }
        ;
        if (v instanceof EQ && v1 instanceof EQ) {
          return true;
        }
        ;
        return false;
      };
    }
  };

  // output/Data.Ring/foreign.js
  var intSub = function(x) {
    return function(y) {
      return x - y | 0;
    };
  };

  // output/Data.Semiring/foreign.js
  var intAdd = function(x) {
    return function(y) {
      return x + y | 0;
    };
  };
  var intMul = function(x) {
    return function(y) {
      return x * y | 0;
    };
  };

  // output/Data.Semiring/index.js
  var zero = function(dict) {
    return dict.zero;
  };
  var semiringInt = {
    add: intAdd,
    zero: 0,
    mul: intMul,
    one: 1
  };
  var one = function(dict) {
    return dict.one;
  };
  var mul = function(dict) {
    return dict.mul;
  };
  var add = function(dict) {
    return dict.add;
  };

  // output/Data.Ring/index.js
  var sub = function(dict) {
    return dict.sub;
  };
  var ringInt = {
    sub: intSub,
    Semiring0: function() {
      return semiringInt;
    }
  };
  var negate = function(dictRing) {
    var sub1 = sub(dictRing);
    var zero3 = zero(dictRing.Semiring0());
    return function(a2) {
      return sub1(zero3)(a2);
    };
  };

  // output/Data.Ord/index.js
  var eqRec2 = /* @__PURE__ */ eqRec();
  var notEq2 = /* @__PURE__ */ notEq(eqOrdering);
  var ordString = /* @__PURE__ */ function() {
    return {
      compare: ordStringImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqString;
      }
    };
  }();
  var ordRecordNil = {
    compareRecord: function(v) {
      return function(v1) {
        return function(v2) {
          return EQ.value;
        };
      };
    },
    EqRecord0: function() {
      return eqRowNil;
    }
  };
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var compareRecord = function(dict) {
    return dict.compareRecord;
  };
  var ordRecord = function() {
    return function(dictOrdRecord) {
      var eqRec1 = eqRec2(dictOrdRecord.EqRecord0());
      return {
        compare: compareRecord(dictOrdRecord)($$Proxy.value),
        Eq0: function() {
          return eqRec1;
        }
      };
    };
  };
  var compare = function(dict) {
    return dict.compare;
  };
  var comparing = function(dictOrd) {
    var compare33 = compare(dictOrd);
    return function(f) {
      return function(x) {
        return function(y) {
          return compare33(f(x))(f(y));
        };
      };
    };
  };
  var greaterThan = function(dictOrd) {
    var compare33 = compare(dictOrd);
    return function(a1) {
      return function(a2) {
        var v = compare33(a1)(a2);
        if (v instanceof GT) {
          return true;
        }
        ;
        return false;
      };
    };
  };
  var greaterThanOrEq = function(dictOrd) {
    var compare33 = compare(dictOrd);
    return function(a1) {
      return function(a2) {
        var v = compare33(a1)(a2);
        if (v instanceof LT) {
          return false;
        }
        ;
        return true;
      };
    };
  };
  var lessThan = function(dictOrd) {
    var compare33 = compare(dictOrd);
    return function(a1) {
      return function(a2) {
        var v = compare33(a1)(a2);
        if (v instanceof LT) {
          return true;
        }
        ;
        return false;
      };
    };
  };
  var signum = function(dictOrd) {
    var lessThan12 = lessThan(dictOrd);
    var greaterThan12 = greaterThan(dictOrd);
    return function(dictRing) {
      var Semiring0 = dictRing.Semiring0();
      var zero3 = zero(Semiring0);
      var negate12 = negate(dictRing);
      var one2 = one(Semiring0);
      return function(x) {
        var $89 = lessThan12(x)(zero3);
        if ($89) {
          return negate12(one2);
        }
        ;
        var $90 = greaterThan12(x)(zero3);
        if ($90) {
          return one2;
        }
        ;
        return x;
      };
    };
  };
  var lessThanOrEq = function(dictOrd) {
    var compare33 = compare(dictOrd);
    return function(a1) {
      return function(a2) {
        var v = compare33(a1)(a2);
        if (v instanceof GT) {
          return false;
        }
        ;
        return true;
      };
    };
  };
  var ordRecordCons = function(dictOrdRecord) {
    var compareRecord1 = compareRecord(dictOrdRecord);
    var eqRowCons2 = eqRowCons(dictOrdRecord.EqRecord0())();
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        var eqRowCons1 = eqRowCons2(dictIsSymbol);
        return function(dictOrd) {
          var compare33 = compare(dictOrd);
          var eqRowCons22 = eqRowCons1(dictOrd.Eq0());
          return {
            compareRecord: function(v) {
              return function(ra) {
                return function(rb2) {
                  var key = reflectSymbol2($$Proxy.value);
                  var left2 = compare33(unsafeGet(key)(ra))(unsafeGet(key)(rb2));
                  var $95 = notEq2(left2)(EQ.value);
                  if ($95) {
                    return left2;
                  }
                  ;
                  return compareRecord1($$Proxy.value)(ra)(rb2);
                };
              };
            },
            EqRecord0: function() {
              return eqRowCons22;
            }
          };
        };
      };
    };
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n) {
    return n.toString();
  };
  var showNumberImpl = function(n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
  var showStringImpl = function(s2) {
    var l = s2.length;
    return '"' + s2.replace(
      /[\0-\x1F\x7F"\\]/g,
      function(c, i2) {
        switch (c) {
          case '"':
          case "\\":
            return "\\" + c;
          case "\x07":
            return "\\a";
          case "\b":
            return "\\b";
          case "\f":
            return "\\f";
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "	":
            return "\\t";
          case "\v":
            return "\\v";
        }
        var k = i2 + 1;
        var empty6 = k < l && s2[k] >= "0" && s2[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty6;
      }
    ) + '"';
  };
  var showArrayImpl = function(f) {
    return function(xs) {
      var ss = [];
      for (var i2 = 0, l = xs.length; i2 < l; i2++) {
        ss[i2] = f(xs[i2]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  // output/Data.Show/index.js
  var showString = {
    show: showStringImpl
  };
  var showRecordFields = function(dict) {
    return dict.showRecordFields;
  };
  var showRecord = function() {
    return function() {
      return function(dictShowRecordFields) {
        var showRecordFields1 = showRecordFields(dictShowRecordFields);
        return {
          show: function(record) {
            return "{" + (showRecordFields1($$Proxy.value)(record) + "}");
          }
        };
      };
    };
  };
  var showNumber = {
    show: showNumberImpl
  };
  var showInt = {
    show: showIntImpl
  };
  var showBoolean = {
    show: function(v) {
      if (v) {
        return "true";
      }
      ;
      if (!v) {
        return "false";
      }
      ;
      throw new Error("Failed pattern match at Data.Show (line 29, column 1 - line 31, column 23): " + [v.constructor.name]);
    }
  };
  var show = function(dict) {
    return dict.show;
  };
  var showArray = function(dictShow) {
    return {
      show: showArrayImpl(show(dictShow))
    };
  };
  var showRecordFieldsCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(dictShowRecordFields) {
      var showRecordFields1 = showRecordFields(dictShowRecordFields);
      return function(dictShow) {
        var show113 = show(dictShow);
        return {
          showRecordFields: function(v) {
            return function(record) {
              var tail3 = showRecordFields1($$Proxy.value)(record);
              var key = reflectSymbol2($$Proxy.value);
              var focus2 = unsafeGet(key)(record);
              return " " + (key + (": " + (show113(focus2) + ("," + tail3))));
            };
          }
        };
      };
    };
  };
  var showRecordFieldsConsNil = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(dictShow) {
      var show113 = show(dictShow);
      return {
        showRecordFields: function(v) {
          return function(record) {
            var key = reflectSymbol2($$Proxy.value);
            var focus2 = unsafeGet(key)(record);
            return " " + (key + (": " + (show113(focus2) + " ")));
          };
        }
      };
    };
  };

  // output/Data.Generic.Rep/index.js
  var Inl = /* @__PURE__ */ function() {
    function Inl2(value0) {
      this.value0 = value0;
    }
    ;
    Inl2.create = function(value0) {
      return new Inl2(value0);
    };
    return Inl2;
  }();
  var Inr = /* @__PURE__ */ function() {
    function Inr2(value0) {
      this.value0 = value0;
    }
    ;
    Inr2.create = function(value0) {
      return new Inr2(value0);
    };
    return Inr2;
  }();
  var Product = /* @__PURE__ */ function() {
    function Product3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Product3.create = function(value0) {
      return function(value1) {
        return new Product3(value0, value1);
      };
    };
    return Product3;
  }();
  var NoArguments = /* @__PURE__ */ function() {
    function NoArguments2() {
    }
    ;
    NoArguments2.value = new NoArguments2();
    return NoArguments2;
  }();
  var Constructor = function(x) {
    return x;
  };
  var to = function(dict) {
    return dict.to;
  };
  var from = function(dict) {
    return dict.from;
  };

  // output/Data.Maybe/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var showMaybe = function(dictShow) {
    var show29 = show(dictShow);
    return {
      show: function(v) {
        if (v instanceof Just) {
          return "(Just " + (show29(v.value0) + ")");
        }
        ;
        if (v instanceof Nothing) {
          return "Nothing";
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 223, column 1 - line 225, column 28): " + [v.constructor.name]);
      }
    };
  };
  var maybe$prime = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v(unit);
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 250, column 1 - line 250, column 62): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var maybe = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v;
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
  var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
  var functorMaybe = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe$prime = function(a2) {
    return maybe$prime(a2)(identity3);
  };
  var fromMaybe = function(a2) {
    return maybe(a2)(identity3);
  };
  var fromJust = function() {
    return function(v) {
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
    };
  };
  var eqMaybe = function(dictEq) {
    var eq29 = eq(dictEq);
    return {
      eq: function(x) {
        return function(y) {
          if (x instanceof Nothing && y instanceof Nothing) {
            return true;
          }
          ;
          if (x instanceof Just && y instanceof Just) {
            return eq29(x.value0)(y.value0);
          }
          ;
          return false;
        };
      }
    };
  };
  var ordMaybe = function(dictOrd) {
    var compare9 = compare(dictOrd);
    var eqMaybe1 = eqMaybe(dictOrd.Eq0());
    return {
      compare: function(x) {
        return function(y) {
          if (x instanceof Nothing && y instanceof Nothing) {
            return EQ.value;
          }
          ;
          if (x instanceof Nothing) {
            return LT.value;
          }
          ;
          if (y instanceof Nothing) {
            return GT.value;
          }
          ;
          if (x instanceof Just && y instanceof Just) {
            return compare9(x.value0)(y.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqMaybe1;
      }
    };
  };
  var applyMaybe = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return map2(v.value0)(v1);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return v1(v.value0);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };
  var applicativeMaybe = /* @__PURE__ */ function() {
    return {
      pure: Just.create,
      Apply0: function() {
        return applyMaybe;
      }
    };
  }();
  var altMaybe = {
    alt: function(v) {
      return function(v1) {
        if (v instanceof Nothing) {
          return v1;
        }
        ;
        return v;
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };

  // output/React.Basic.DOM/foreign.js
  var import_react_dom = __toESM(require_react_dom(), 1);

  // output/Effect/foreign.js
  var pureE = function(a2) {
    return function() {
      return a2;
    };
  };
  var bindE = function(a2) {
    return function(f) {
      return function() {
        return f(a2())();
      };
    };
  };

  // output/Control.Bind/foreign.js
  var arrayBind = function(arr) {
    return function(f) {
      var result = [];
      for (var i2 = 0, l = arr.length; i2 < l; i2++) {
        Array.prototype.push.apply(result, f(arr[i2]));
      }
      return result;
    };
  };

  // output/Control.Bind/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var bindArray = {
    bind: arrayBind,
    Apply0: function() {
      return applyArray;
    }
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var bindFlipped = function(dictBind) {
    return flip(bind(dictBind));
  };
  var composeKleisliFlipped = function(dictBind) {
    var bindFlipped1 = bindFlipped(dictBind);
    return function(f) {
      return function(g) {
        return function(a2) {
          return bindFlipped1(f)(g(a2));
        };
      };
    };
  };
  var join = function(dictBind) {
    var bind115 = bind(dictBind);
    return function(m) {
      return bind115(m)(identity4);
    };
  };

  // output/Control.Monad/index.js
  var ap = function(dictMonad) {
    var bind31 = bind(dictMonad.Bind1());
    var pure27 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a2) {
        return bind31(f)(function(f$prime) {
          return bind31(a2)(function(a$prime2) {
            return pure27(f$prime(a$prime2));
          });
        });
      };
    };
  };

  // output/Data.EuclideanRing/foreign.js
  var intDegree = function(x) {
    return Math.min(Math.abs(x), 2147483647);
  };
  var intDiv = function(x) {
    return function(y) {
      if (y === 0)
        return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };
  var intMod = function(x) {
    return function(y) {
      if (y === 0)
        return 0;
      var yy = Math.abs(y);
      return (x % yy + yy) % yy;
    };
  };

  // output/Data.CommutativeRing/index.js
  var commutativeRingInt = {
    Ring0: function() {
      return ringInt;
    }
  };

  // output/Data.EuclideanRing/index.js
  var mod = function(dict) {
    return dict.mod;
  };
  var euclideanRingInt = {
    degree: intDegree,
    div: intDiv,
    mod: intMod,
    CommutativeRing0: function() {
      return commutativeRingInt;
    }
  };
  var div = function(dict) {
    return dict.div;
  };

  // output/Data.Monoid/index.js
  var mod2 = /* @__PURE__ */ mod(euclideanRingInt);
  var div2 = /* @__PURE__ */ div(euclideanRingInt);
  var monoidString = {
    mempty: "",
    Semigroup0: function() {
      return semigroupString;
    }
  };
  var monoidArray = {
    mempty: [],
    Semigroup0: function() {
      return semigroupArray;
    }
  };
  var mempty = function(dict) {
    return dict.mempty;
  };
  var power = function(dictMonoid) {
    var mempty1 = mempty(dictMonoid);
    var append5 = append(dictMonoid.Semigroup0());
    return function(x) {
      var go2 = function(p2) {
        if (p2 <= 0) {
          return mempty1;
        }
        ;
        if (p2 === 1) {
          return x;
        }
        ;
        if (mod2(p2)(2) === 0) {
          var x$prime = go2(div2(p2)(2));
          return append5(x$prime)(x$prime);
        }
        ;
        if (otherwise) {
          var x$prime = go2(div2(p2)(2));
          return append5(x$prime)(append5(x$prime)(x));
        }
        ;
        throw new Error("Failed pattern match at Data.Monoid (line 88, column 3 - line 88, column 17): " + [p2.constructor.name]);
      };
      return go2;
    };
  };
  var guard = function(dictMonoid) {
    var mempty1 = mempty(dictMonoid);
    return function(v) {
      return function(v1) {
        if (v) {
          return v1;
        }
        ;
        if (!v) {
          return mempty1;
        }
        ;
        throw new Error("Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);

  // output/Effect.Unsafe/foreign.js
  var unsafePerformEffect = function(f) {
    return f();
  };

  // output/React.Basic/foreign.js
  var import_react = __toESM(require_react(), 1);
  var createElement = import_react.default.createElement;
  var Fragment = import_react.default.Fragment;
  var empty = null;
  function element(component2) {
    return (props) => Array.isArray(props.children) ? createElement.apply(null, [component2, props].concat(props.children)) : createElement(component2, props);
  }
  function fragment(children2) {
    return createElement.apply(null, [Fragment, null].concat(children2));
  }
  function createContext(defaultValue4) {
    return () => import_react.default.createContext(defaultValue4);
  }
  function contextProvider(context) {
    return context.Provider;
  }

  // output/React.Basic/index.js
  var semigroupJSX = {
    append: function(a2) {
      return function(b2) {
        return fragment([a2, b2]);
      };
    }
  };
  var provider = function(context) {
    return function(value14) {
      return function(children2) {
        return element(contextProvider(context))({
          value: value14,
          children: children2
        });
      };
    };
  };
  var monoidJSX = {
    mempty: empty,
    Semigroup0: function() {
      return semigroupJSX;
    }
  };

  // output/React.Basic.DOM.Internal/foreign.js
  var import_react2 = __toESM(require_react(), 1);
  function unsafeCreateDOMComponent_(createElement3) {
    return (el) => {
      const flattenDataProp = (props, ref) => {
        var data = null;
        if (props._data != null) {
          data = { _data: void 0 };
          Object.entries(props._data).forEach(function(entry) {
            data["data-" + entry[0]] = entry[1];
          });
        }
        var aria = null;
        if (props._aria != null) {
          aria = { _aria: void 0 };
          Object.entries(props._aria).forEach(function(entry) {
            aria["aria-" + entry[0]] = entry[1];
          });
        }
        return Object.assign({ ref }, props, data, aria);
      };
      return () => {
        const c = import_react2.default.forwardRef(
          (props, ref) => createElement3(el)(flattenDataProp(props, ref))
        );
        c.displayName = el;
        return c;
      };
    };
  }

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x) {
    return x;
  };

  // output/React.Basic.DOM.Internal/index.js
  var unsafeCreateDOMComponent = /* @__PURE__ */ unsafeCreateDOMComponent_(element);
  var css = unsafeCoerce2;

  // output/React.Basic.DOM.Generated/index.js
  var _textarea$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("textarea"));
  var textarea$prime = function() {
    return _textarea$prime;
  };
  var textarea$prime1 = /* @__PURE__ */ textarea$prime();
  var textarea = function() {
    return element(textarea$prime1);
  };
  var _span$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("span"));
  var span$prime = function() {
    return _span$prime;
  };
  var span$prime1 = /* @__PURE__ */ span$prime();
  var span = function() {
    return element(span$prime1);
  };
  var span1 = /* @__PURE__ */ span();
  var span_ = function(children2) {
    return span1({
      children: children2
    });
  };
  var _input$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("input"));
  var input$prime = function() {
    return _input$prime;
  };
  var input$prime1 = /* @__PURE__ */ input$prime();
  var input = function() {
    return element(input$prime1);
  };
  var _img$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("img"));
  var img$prime = function() {
    return _img$prime;
  };
  var img$prime1 = /* @__PURE__ */ img$prime();
  var img = function() {
    return element(img$prime1);
  };
  var _div$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("div"));
  var div$prime = function() {
    return _div$prime;
  };
  var div$prime1 = /* @__PURE__ */ div$prime();
  var div3 = function() {
    return element(div$prime1);
  };
  var div1 = /* @__PURE__ */ div3();
  var div_ = function(children2) {
    return div1({
      children: children2
    });
  };

  // output/React.Basic.DOM/index.js
  var text = unsafeCoerce2;

  // output/Data.Nullable/foreign.js
  function nullable(a2, r, f) {
    return a2 == null ? r : f(a2);
  }

  // output/Data.Nullable/index.js
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Effect.Uncurried/foreign.js
  var mkEffectFn1 = function mkEffectFn12(fn) {
    return function(x) {
      return fn(x)();
    };
  };
  var runEffectFn2 = function runEffectFn22(fn) {
    return function(a2) {
      return function(b2) {
        return function() {
          return fn(a2, b2);
        };
      };
    };
  };

  // output/Record.Unsafe.Union/foreign.js
  function unsafeUnionFn(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  }

  // output/Data.Function.Uncurried/foreign.js
  var mkFn2 = function(fn) {
    return function(a2, b2) {
      return fn(a2)(b2);
    };
  };
  var runFn2 = function(fn) {
    return function(a2) {
      return function(b2) {
        return fn(a2, b2);
      };
    };
  };
  var runFn3 = function(fn) {
    return function(a2) {
      return function(b2) {
        return function(c) {
          return fn(a2, b2, c);
        };
      };
    };
  };
  var runFn4 = function(fn) {
    return function(a2) {
      return function(b2) {
        return function(c) {
          return function(d) {
            return fn(a2, b2, c, d);
          };
        };
      };
    };
  };

  // output/Record/index.js
  var set = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l) {
          return function(b2) {
            return function(r) {
              return unsafeSet(reflectSymbol2(l))(b2)(r);
            };
          };
        };
      };
    };
  };
  var merge = function() {
    return function() {
      return function(l) {
        return function(r) {
          return unsafeUnionFn(l, r);
        };
      };
    };
  };
  var insert = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l) {
          return function(a2) {
            return function(r) {
              return unsafeSet(reflectSymbol2(l))(a2)(r);
            };
          };
        };
      };
    };
  };
  var get = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function(l) {
        return function(r) {
          return unsafeGet(reflectSymbol2(l))(r);
        };
      };
    };
  };
  var $$delete = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l) {
          return function(r) {
            return unsafeDelete(reflectSymbol2(l))(r);
          };
        };
      };
    };
  };

  // output/React.Basic.Events/index.js
  var EventFn = function(x) {
    return x;
  };
  var unsafeEventFn = EventFn;
  var handler_ = function($30) {
    return mkEffectFn1($$const($30));
  };
  var handler = function(v) {
    return function(cb) {
      return function($31) {
        return cb(v($31))();
      };
    };
  };

  // output/React.Basic.DOM.Events/index.js
  var targetValue = /* @__PURE__ */ unsafeEventFn(function(e2) {
    return toMaybe(e2.target.value);
  });
  var stopPropagation = /* @__PURE__ */ unsafeEventFn(function(e2) {
    return unsafePerformEffect(function __do6() {
      e2.stopPropagation();
      return e2;
    });
  });
  var preventDefault = /* @__PURE__ */ unsafeEventFn(function(e2) {
    return unsafePerformEffect(function __do6() {
      e2.preventDefault();
      return e2;
    });
  });

  // output/Data.Array/foreign.js
  var replicateFill = function(count) {
    return function(value14) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value14);
    };
  };
  var replicatePolyfill = function(count) {
    return function(value14) {
      var result = [];
      var n = 0;
      for (var i2 = 0; i2 < count; i2++) {
        result[n++] = value14;
      }
      return result;
    };
  };
  var replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var fromFoldableImpl = function() {
    function Cons3(head6, tail3) {
      this.head = head6;
      this.tail = tail3;
    }
    var emptyList = {};
    function curryCons(head6) {
      return function(tail3) {
        return new Cons3(head6, tail3);
      };
    }
    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }
    return function(foldr5) {
      return function(xs) {
        return listToArray(foldr5(curryCons)(emptyList)(xs));
      };
    };
  }();
  var length = function(xs) {
    return xs.length;
  };
  var unconsImpl = function(empty6) {
    return function(next2) {
      return function(xs) {
        return xs.length === 0 ? empty6({}) : next2(xs[0])(xs.slice(1));
      };
    };
  };
  var findIndexImpl = function(just) {
    return function(nothing) {
      return function(f) {
        return function(xs) {
          for (var i2 = 0, l = xs.length; i2 < l; i2++) {
            if (f(xs[i2]))
              return just(i2);
          }
          return nothing;
        };
      };
    };
  };
  var sortByImpl = function() {
    function mergeFromTo(compare9, fromOrdering, xs1, xs2, from3, to3) {
      var mid;
      var i2;
      var j;
      var k;
      var x;
      var y;
      var c;
      mid = from3 + (to3 - from3 >> 1);
      if (mid - from3 > 1)
        mergeFromTo(compare9, fromOrdering, xs2, xs1, from3, mid);
      if (to3 - mid > 1)
        mergeFromTo(compare9, fromOrdering, xs2, xs1, mid, to3);
      i2 = from3;
      j = mid;
      k = from3;
      while (i2 < mid && j < to3) {
        x = xs2[i2];
        y = xs2[j];
        c = fromOrdering(compare9(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        } else {
          xs1[k++] = x;
          ++i2;
        }
      }
      while (i2 < mid) {
        xs1[k++] = xs2[i2++];
      }
      while (j < to3) {
        xs1[k++] = xs2[j++];
      }
    }
    return function(compare9) {
      return function(fromOrdering) {
        return function(xs) {
          var out;
          if (xs.length < 2)
            return xs;
          out = xs.slice(0);
          mergeFromTo(compare9, fromOrdering, out, xs.slice(0), 0, xs.length);
          return out;
        };
      };
    };
  }();
  var unsafeIndexImpl = function(xs) {
    return function(n) {
      return xs[n];
    };
  };

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left2(value0) {
      this.value0 = value0;
    }
    ;
    Left2.create = function(value0) {
      return new Left2(value0);
    };
    return Left2;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right2(value0) {
      this.value0 = value0;
    }
    ;
    Right2.create = function(value0) {
      return new Right2(value0);
    };
    return Right2;
  }();
  var note = function(a2) {
    return maybe(new Left(a2))(Right.create);
  };
  var functorEither = {
    map: function(f) {
      return function(m) {
        if (m instanceof Left) {
          return new Left(m.value0);
        }
        ;
        if (m instanceof Right) {
          return new Right(f(m.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
      };
    }
  };
  var map4 = /* @__PURE__ */ map(functorEither);
  var either = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }
        ;
        if (v2 instanceof Right) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var hush = /* @__PURE__ */ function() {
    return either($$const(Nothing.value))(Just.create);
  }();
  var applyEither = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Left) {
          return new Left(v.value0);
        }
        ;
        if (v instanceof Right) {
          return map4(v.value0)(v1);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorEither;
    }
  };
  var bindEither = {
    bind: /* @__PURE__ */ either(function(e2) {
      return function(v) {
        return new Left(e2);
      };
    })(function(a2) {
      return function(f) {
        return f(a2);
      };
    }),
    Apply0: function() {
      return applyEither;
    }
  };
  var applicativeEither = /* @__PURE__ */ function() {
    return {
      pure: Right.create,
      Apply0: function() {
        return applyEither;
      }
    };
  }();
  var monadEither = {
    Applicative0: function() {
      return applicativeEither;
    },
    Bind1: function() {
      return bindEither;
    }
  };
  var altEither = {
    alt: function(v) {
      return function(v1) {
        if (v instanceof Left) {
          return v1;
        }
        ;
        return v;
      };
    },
    Functor0: function() {
      return functorEither;
    }
  };

  // output/Data.Identity/index.js
  var Identity = function(x) {
    return x;
  };
  var functorIdentity = {
    map: function(f) {
      return function(m) {
        return f(m);
      };
    }
  };
  var applyIdentity = {
    apply: function(v) {
      return function(v1) {
        return v(v1);
      };
    },
    Functor0: function() {
      return functorIdentity;
    }
  };
  var bindIdentity = {
    bind: function(v) {
      return function(f) {
        return f(v);
      };
    },
    Apply0: function() {
      return applyIdentity;
    }
  };
  var applicativeIdentity = {
    pure: Identity,
    Apply0: function() {
      return applyIdentity;
    }
  };
  var monadIdentity = {
    Applicative0: function() {
      return applicativeIdentity;
    },
    Bind1: function() {
      return bindIdentity;
    }
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var write = function(val) {
    return function(ref) {
      return function() {
        ref.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$new = _new;

  // output/Data.Array.ST/foreign.js
  var sortByImpl2 = function() {
    function mergeFromTo(compare9, fromOrdering, xs1, xs2, from3, to3) {
      var mid;
      var i2;
      var j;
      var k;
      var x;
      var y;
      var c;
      mid = from3 + (to3 - from3 >> 1);
      if (mid - from3 > 1)
        mergeFromTo(compare9, fromOrdering, xs2, xs1, from3, mid);
      if (to3 - mid > 1)
        mergeFromTo(compare9, fromOrdering, xs2, xs1, mid, to3);
      i2 = from3;
      j = mid;
      k = from3;
      while (i2 < mid && j < to3) {
        x = xs2[i2];
        y = xs2[j];
        c = fromOrdering(compare9(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        } else {
          xs1[k++] = x;
          ++i2;
        }
      }
      while (i2 < mid) {
        xs1[k++] = xs2[i2++];
      }
      while (j < to3) {
        xs1[k++] = xs2[j++];
      }
    }
    return function(compare9) {
      return function(fromOrdering) {
        return function(xs) {
          return function() {
            if (xs.length < 2)
              return xs;
            mergeFromTo(compare9, fromOrdering, xs, xs.slice(0), 0, xs.length);
            return xs;
          };
        };
      };
    };
  }();

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i2 = len - 1; i2 >= 0; i2--) {
          acc = f(xs[i2])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i2 = 0; i2 < len; i2++) {
          acc = f(acc)(xs[i2]);
        }
        return acc;
      };
    };
  };

  // output/Control.Plus/index.js
  var empty2 = function(dict) {
    return dict.empty;
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var uncurry = function(f) {
    return function(v) {
      return f(v.value0)(v.value1);
    };
  };
  var snd = function(v) {
    return v.value1;
  };
  var showTuple = function(dictShow) {
    var show29 = show(dictShow);
    return function(dictShow1) {
      var show113 = show(dictShow1);
      return {
        show: function(v) {
          return "(Tuple " + (show29(v.value0) + (" " + (show113(v.value1) + ")")));
        }
      };
    };
  };
  var functorTuple = {
    map: function(f) {
      return function(m) {
        return new Tuple(m.value0, f(m.value1));
      };
    }
  };
  var fst = function(v) {
    return v.value0;
  };
  var eqTuple = function(dictEq) {
    var eq29 = eq(dictEq);
    return function(dictEq1) {
      var eq111 = eq(dictEq1);
      return {
        eq: function(x) {
          return function(y) {
            return eq29(x.value0)(y.value0) && eq111(x.value1)(y.value1);
          };
        }
      };
    };
  };
  var ordTuple = function(dictOrd) {
    var compare9 = compare(dictOrd);
    var eqTuple1 = eqTuple(dictOrd.Eq0());
    return function(dictOrd1) {
      var compare15 = compare(dictOrd1);
      var eqTuple2 = eqTuple1(dictOrd1.Eq0());
      return {
        compare: function(x) {
          return function(y) {
            var v = compare9(x.value0)(y.value0);
            if (v instanceof LT) {
              return LT.value;
            }
            ;
            if (v instanceof GT) {
              return GT.value;
            }
            ;
            return compare15(x.value1)(y.value1);
          };
        },
        Eq0: function() {
          return eqTuple2;
        }
      };
    };
  };

  // output/Data.Bifunctor/index.js
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var bimap = function(dict) {
    return dict.bimap;
  };
  var lmap = function(dictBifunctor) {
    var bimap1 = bimap(dictBifunctor);
    return function(f) {
      return bimap1(f)(identity5);
    };
  };
  var rmap = function(dictBifunctor) {
    return bimap(dictBifunctor)(identity5);
  };
  var bifunctorTuple = {
    bimap: function(f) {
      return function(g) {
        return function(v) {
          return new Tuple(f(v.value0), g(v.value1));
        };
      };
    }
  };
  var bifunctorEither = {
    bimap: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Left) {
            return new Left(v(v2.value0));
          }
          ;
          if (v2 instanceof Right) {
            return new Right(v1(v2.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    }
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var wrap = function() {
    return coerce2;
  };
  var unwrap = function() {
    return coerce2;
  };
  var unwrap1 = /* @__PURE__ */ unwrap();
  var un = function() {
    return function(v) {
      return unwrap1;
    };
  };
  var over = function() {
    return function() {
      return function(v) {
        return coerce2;
      };
    };
  };

  // output/Data.Foldable/index.js
  var eq12 = /* @__PURE__ */ eq(eqOrdering);
  var foldr = function(dict) {
    return dict.foldr;
  };
  var traverse_ = function(dictApplicative) {
    var applySecond2 = applySecond(dictApplicative.Apply0());
    var pure27 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($454) {
          return applySecond2(f($454));
        })(pure27(unit));
      };
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var intercalate = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(dictMonoid) {
      var append5 = append(dictMonoid.Semigroup0());
      var mempty11 = mempty(dictMonoid);
      return function(sep) {
        return function(xs) {
          var go2 = function(v) {
            return function(v1) {
              if (v.init) {
                return {
                  init: false,
                  acc: v1
                };
              }
              ;
              return {
                init: false,
                acc: append5(v.acc)(append5(sep)(v1))
              };
            };
          };
          return foldl22(go2)({
            init: true,
            acc: mempty11
          })(xs).acc;
        };
      };
    };
  };
  var length2 = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(dictSemiring) {
      var add1 = add(dictSemiring);
      var one2 = one(dictSemiring);
      return foldl22(function(c) {
        return function(v) {
          return add1(one2)(c);
        };
      })(zero(dictSemiring));
    };
  };
  var maximumBy = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(cmp) {
      var max$prime = function(v) {
        return function(v1) {
          if (v instanceof Nothing) {
            return new Just(v1);
          }
          ;
          if (v instanceof Just) {
            return new Just(function() {
              var $303 = eq12(cmp(v.value0)(v1))(GT.value);
              if ($303) {
                return v.value0;
              }
              ;
              return v1;
            }());
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      return foldl22(max$prime)(Nothing.value);
    };
  };
  var maximum = function(dictOrd) {
    var compare9 = compare(dictOrd);
    return function(dictFoldable) {
      return maximumBy(dictFoldable)(compare9);
    };
  };
  var minimumBy = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(cmp) {
      var min$prime = function(v) {
        return function(v1) {
          if (v instanceof Nothing) {
            return new Just(v1);
          }
          ;
          if (v instanceof Just) {
            return new Just(function() {
              var $307 = eq12(cmp(v.value0)(v1))(LT.value);
              if ($307) {
                return v.value0;
              }
              ;
              return v1;
            }());
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 454, column 3 - line 454, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      return foldl22(min$prime)(Nothing.value);
    };
  };
  var minimum = function(dictOrd) {
    var compare9 = compare(dictOrd);
    return function(dictFoldable) {
      return minimumBy(dictFoldable)(compare9);
    };
  };
  var foldableMaybe = {
    foldr: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v2.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldl: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v1)(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty11 = mempty(dictMonoid);
      return function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty11;
          }
          ;
          if (v1 instanceof Just) {
            return v(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append5 = append(dictMonoid.Semigroup0());
      var mempty11 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x) {
          return function(acc) {
            return append5(f(x))(acc);
          };
        })(mempty11);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };
  var foldMap = function(dict) {
    return dict.foldMap;
  };
  var find = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(p2) {
      var go2 = function(v) {
        return function(v1) {
          if (v instanceof Nothing && p2(v1)) {
            return new Just(v1);
          }
          ;
          return v;
        };
      };
      return foldl22(go2)(Nothing.value);
    };
  };

  // output/Data.Traversable/foreign.js
  var traverseArrayImpl = function() {
    function array1(a2) {
      return [a2];
    }
    function array2(a2) {
      return function(b2) {
        return [a2, b2];
      };
    }
    function array3(a2) {
      return function(b2) {
        return function(c) {
          return [a2, b2, c];
        };
      };
    }
    function concat22(xs) {
      return function(ys) {
        return xs.concat(ys);
      };
    }
    return function(apply10) {
      return function(map37) {
        return function(pure27) {
          return function(f) {
            return function(array4) {
              function go2(bot, top3) {
                switch (top3 - bot) {
                  case 0:
                    return pure27([]);
                  case 1:
                    return map37(array1)(f(array4[bot]));
                  case 2:
                    return apply10(map37(array2)(f(array4[bot])))(f(array4[bot + 1]));
                  case 3:
                    return apply10(apply10(map37(array3)(f(array4[bot])))(f(array4[bot + 1])))(f(array4[bot + 2]));
                  default:
                    var pivot = bot + Math.floor((top3 - bot) / 4) * 2;
                    return apply10(map37(concat22)(go2(bot, pivot)))(go2(pivot, top3));
                }
              }
              return go2(0, array4.length);
            };
          };
        };
      };
    };
  }();

  // output/Data.Monoid.Additive/index.js
  var semigroupAdditive = function(dictSemiring) {
    var add6 = add(dictSemiring);
    return {
      append: function(v) {
        return function(v1) {
          return add6(v)(v1);
        };
      }
    };
  };
  var monoidAdditive = function(dictSemiring) {
    var semigroupAdditive1 = semigroupAdditive(dictSemiring);
    return {
      mempty: zero(dictSemiring),
      Semigroup0: function() {
        return semigroupAdditive1;
      }
    };
  };

  // output/Data.Traversable/index.js
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var traverse = function(dict) {
    return dict.traverse;
  };
  var traversableMaybe = {
    traverse: function(dictApplicative) {
      var pure27 = pure(dictApplicative);
      var map37 = map(dictApplicative.Apply0().Functor0());
      return function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return pure27(Nothing.value);
          }
          ;
          if (v1 instanceof Just) {
            return map37(Just.create)(v(v1.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    },
    sequence: function(dictApplicative) {
      var pure27 = pure(dictApplicative);
      var map37 = map(dictApplicative.Apply0().Functor0());
      return function(v) {
        if (v instanceof Nothing) {
          return pure27(Nothing.value);
        }
        ;
        if (v instanceof Just) {
          return map37(Just.create)(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    },
    Foldable1: function() {
      return foldableMaybe;
    }
  };
  var sequenceDefault = function(dictTraversable) {
    var traverse22 = traverse(dictTraversable);
    return function(dictApplicative) {
      return traverse22(dictApplicative)(identity6);
    };
  };
  var traversableArray = {
    traverse: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      return traverseArrayImpl(apply(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
    },
    sequence: function(dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
    },
    Functor0: function() {
      return functorArray;
    },
    Foldable1: function() {
      return foldableArray;
    }
  };
  var sequence = function(dict) {
    return dict.sequence;
  };
  var $$for = function(dictApplicative) {
    return function(dictTraversable) {
      var traverse22 = traverse(dictTraversable)(dictApplicative);
      return function(x) {
        return function(f) {
          return traverse22(f)(x);
        };
      };
    };
  };

  // output/Data.Unfoldable/foreign.js
  var unfoldrArrayImpl = function(isNothing2) {
    return function(fromJust9) {
      return function(fst2) {
        return function(snd2) {
          return function(f) {
            return function(b2) {
              var result = [];
              var value14 = b2;
              while (true) {
                var maybe2 = f(value14);
                if (isNothing2(maybe2))
                  return result;
                var tuple = fromJust9(maybe2);
                result.push(fst2(tuple));
                value14 = snd2(tuple);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/foreign.js
  var unfoldr1ArrayImpl = function(isNothing2) {
    return function(fromJust9) {
      return function(fst2) {
        return function(snd2) {
          return function(f) {
            return function(b2) {
              var result = [];
              var value14 = b2;
              while (true) {
                var tuple = f(value14);
                result.push(fst2(tuple));
                var maybe2 = snd2(tuple);
                if (isNothing2(maybe2))
                  return result;
                value14 = fromJust9(maybe2);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Semigroup.Foldable/index.js
  var foldl1 = function(dict) {
    return dict.foldl1;
  };

  // output/Data.Unfoldable1/index.js
  var fromJust2 = /* @__PURE__ */ fromJust();
  var unfoldr1 = function(dict) {
    return dict.unfoldr1;
  };
  var unfoldable1Array = {
    unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
  };
  var replicate1 = function(dictUnfoldable1) {
    var unfoldr11 = unfoldr1(dictUnfoldable1);
    return function(n) {
      return function(v) {
        var step3 = function(i2) {
          if (i2 <= 0) {
            return new Tuple(v, Nothing.value);
          }
          ;
          if (otherwise) {
            return new Tuple(v, new Just(i2 - 1 | 0));
          }
          ;
          throw new Error("Failed pattern match at Data.Unfoldable1 (line 68, column 5 - line 68, column 39): " + [i2.constructor.name]);
        };
        return unfoldr11(step3)(n - 1 | 0);
      };
    };
  };
  var singleton = function(dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
  };

  // output/Data.Unfoldable/index.js
  var fromJust3 = /* @__PURE__ */ fromJust();
  var unfoldr = function(dict) {
    return dict.unfoldr;
  };
  var unfoldableArray = {
    unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
    Unfoldable10: function() {
      return unfoldable1Array;
    }
  };

  // output/Data.Array/index.js
  var map1 = /* @__PURE__ */ map(functorMaybe);
  var unsafeIndex = function() {
    return unsafeIndexImpl;
  };
  var unsafeIndex1 = /* @__PURE__ */ unsafeIndex();
  var uncons = /* @__PURE__ */ function() {
    return unconsImpl($$const(Nothing.value))(function(x) {
      return function(xs) {
        return new Just({
          head: x,
          tail: xs
        });
      };
    });
  }();
  var toUnfoldable = function(dictUnfoldable) {
    var unfoldr2 = unfoldr(dictUnfoldable);
    return function(xs) {
      var len = length(xs);
      var f = function(i2) {
        if (i2 < len) {
          return new Just(new Tuple(unsafeIndex1(xs)(i2), i2 + 1 | 0));
        }
        ;
        if (otherwise) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Array (line 157, column 3 - line 159, column 26): " + [i2.constructor.name]);
      };
      return unfoldr2(f)(0);
    };
  };
  var singleton2 = function(a2) {
    return [a2];
  };
  var findIndex = /* @__PURE__ */ function() {
    return findIndexImpl(Just.create)(Nothing.value);
  }();
  var find2 = function(f) {
    return function(xs) {
      return map1(unsafeIndex1(xs))(findIndex(f)(xs));
    };
  };
  var elemIndex = function(dictEq) {
    var eq29 = eq(dictEq);
    return function(x) {
      return findIndex(function(v) {
        return eq29(v)(x);
      });
    };
  };
  var elem2 = function(dictEq) {
    var elemIndex1 = elemIndex(dictEq);
    return function(a2) {
      return function(arr) {
        return isJust(elemIndex1(a2)(arr));
      };
    };
  };
  var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
  var mapMaybe = function(f) {
    return concatMap(function() {
      var $190 = maybe([])(singleton2);
      return function($191) {
        return $190(f($191));
      };
    }());
  };
  var catMaybes = /* @__PURE__ */ mapMaybe(/* @__PURE__ */ identity(categoryFn));

  // output/React.Basic.DOM.Simplified.ToJSX/index.js
  var toJSXString = {
    toJSX: function($16) {
      return singleton2($16);
    }
  };
  var toJSXJSX = {
    toJSX: singleton2
  };
  var toJSXArrayJSX = {
    toJSX: /* @__PURE__ */ identity(categoryFn)
  };
  var toJSX = function(dict) {
    return dict.toJSX;
  };

  // output/React.Basic.DOM.Simplified.Generated/index.js
  var merge2 = /* @__PURE__ */ merge()();
  var _internaltr$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("tr"));
  var _internaltr = function() {
    return _internaltr$prime;
  };
  var _internaltr1 = /* @__PURE__ */ _internaltr();
  var tr2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internaltr1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internalthead$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("thead"));
  var _internalthead = function() {
    return _internalthead$prime;
  };
  var _internalthead1 = /* @__PURE__ */ _internalthead();
  var thead2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internalthead1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internalth$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("th"));
  var _internalth = function() {
    return _internalth$prime;
  };
  var _internalth1 = /* @__PURE__ */ _internalth();
  var th2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internalth1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internaltd$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("td"));
  var _internaltd = function() {
    return _internaltd$prime;
  };
  var _internaltd1 = /* @__PURE__ */ _internaltd();
  var td2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internaltd1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internaltbody$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("tbody"));
  var _internaltbody = function() {
    return _internaltbody$prime;
  };
  var _internaltbody1 = /* @__PURE__ */ _internaltbody();
  var tbody2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internaltbody1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internaltable$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("table"));
  var _internaltable = function() {
    return _internaltable$prime;
  };
  var _internaltable1 = /* @__PURE__ */ _internaltable();
  var table2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internaltable1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internalspan$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("span"));
  var _internalspan = function() {
    return _internalspan$prime;
  };
  var _internalspan1 = /* @__PURE__ */ _internalspan();
  var span2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internalspan1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internalselect$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("select"));
  var _internalselect = function() {
    return _internalselect$prime;
  };
  var _internalselect1 = /* @__PURE__ */ _internalselect();
  var select2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internalselect1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internaloption$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("option"));
  var _internaloption = function() {
    return _internaloption$prime;
  };
  var _internaloption1 = /* @__PURE__ */ _internaloption();
  var option2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internaloption1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internallabel$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("label"));
  var _internallabel = function() {
    return _internallabel$prime;
  };
  var _internallabel1 = /* @__PURE__ */ _internallabel();
  var label2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internallabel1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internalh5$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h5"));
  var _internalh5 = function() {
    return _internalh5$prime;
  };
  var _internalh51 = /* @__PURE__ */ _internalh5();
  var h52 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internalh51)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internaldiv$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("div"));
  var _internaldiv = function() {
    return _internaldiv$prime;
  };
  var _internaldiv1 = /* @__PURE__ */ _internaldiv();
  var div4 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internaldiv1)(propsWithChildren);
            };
          };
        };
      };
    };
  };
  var _internalbutton$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("button"));
  var _internalbutton = function() {
    return _internalbutton$prime;
  };
  var _internalbutton1 = /* @__PURE__ */ _internalbutton();
  var button2 = function() {
    return function(dictToJSX) {
      var toJSX2 = toJSX(dictToJSX);
      return function() {
        return function() {
          return function(props) {
            return function(children2) {
              var propsWithChildren = merge2({
                children: toJSX2(children2)
              })(props);
              return element(_internalbutton1)(propsWithChildren);
            };
          };
        };
      };
    };
  };

  // output/React.Icons/index.js
  var icon = function() {
    return function(reactIcon) {
      return function(props) {
        return element(reactIcon)(props);
      };
    };
  };
  var icon1 = /* @__PURE__ */ icon();
  var icon_ = function(reactIcon) {
    return icon1(reactIcon)({});
  };

  // output/Component.Widgets/index.js
  var div5 = /* @__PURE__ */ div4()(toJSXArrayJSX)()();
  var span3 = /* @__PURE__ */ span2()(toJSXArrayJSX)()();
  var button3 = /* @__PURE__ */ button2()(toJSXArrayJSX)()();
  var spinner = function(possibleBody) {
    return div5({
      className: "spinner-border",
      role: "status"
    })([span3({
      className: "visually-hidden"
    })([fromMaybe(text("Loading..."))(possibleBody)])]);
  };
  var linkWithIcon = function(icon3) {
    return function(label7) {
      return function(onClick) {
        return button3({
          className: "btn btn-link",
          onClick: handler(preventDefault)($$const(onClick)),
          type: "button"
        })([icon_(icon3), label7]);
      };
    };
  };

  // output/Data.Array.NonEmpty.Internal/foreign.js
  var traverse1Impl = function() {
    function Cont(fn) {
      this.fn = fn;
    }
    var emptyList = {};
    var ConsCell = function(head6, tail3) {
      this.head = head6;
      this.tail = tail3;
    };
    function finalCell(head6) {
      return new ConsCell(head6, emptyList);
    }
    function consList(x) {
      return function(xs) {
        return new ConsCell(x, xs);
      };
    }
    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }
    return function(apply10) {
      return function(map37) {
        return function(f) {
          var buildFrom = function(x, ys) {
            return apply10(map37(consList)(f(x)))(ys);
          };
          var go2 = function(acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last3 = xs[currentLen - 1];
              return new Cont(function() {
                var built = go2(buildFrom(last3, acc), currentLen - 1, xs);
                return built;
              });
            }
          };
          return function(array2) {
            var acc = map37(finalCell)(f(array2[array2.length - 1]));
            var result = go2(acc, array2.length - 1, array2);
            while (result instanceof Cont) {
              result = result.fn();
            }
            return map37(listToArray)(result);
          };
        };
      };
    };
  }();

  // output/Data.FunctorWithIndex/foreign.js
  var mapWithIndexArray = function(f) {
    return function(xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i2 = 0; i2 < l; i2++) {
        result[i2] = f(i2)(xs[i2]);
      }
      return result;
    };
  };

  // output/Data.FunctorWithIndex/index.js
  var mapWithIndex = function(dict) {
    return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
    mapWithIndex: mapWithIndexArray,
    Functor0: function() {
      return functorArray;
    }
  };

  // output/Data.FoldableWithIndex/index.js
  var foldr8 = /* @__PURE__ */ foldr(foldableArray);
  var mapWithIndex2 = /* @__PURE__ */ mapWithIndex(functorWithIndexArray);
  var foldl8 = /* @__PURE__ */ foldl(foldableArray);
  var foldrWithIndex = function(dict) {
    return dict.foldrWithIndex;
  };
  var foldlWithIndex = function(dict) {
    return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
    var foldrWithIndex1 = foldrWithIndex(dictFoldableWithIndex);
    return function(dictMonoid) {
      var append5 = append(dictMonoid.Semigroup0());
      var mempty11 = mempty(dictMonoid);
      return function(f) {
        return foldrWithIndex1(function(i2) {
          return function(x) {
            return function(acc) {
              return append5(f(i2)(x))(acc);
            };
          };
        })(mempty11);
      };
    };
  };
  var foldableWithIndexArray = {
    foldrWithIndex: function(f) {
      return function(z) {
        var $291 = foldr8(function(v) {
          return function(y) {
            return f(v.value0)(v.value1)(y);
          };
        })(z);
        var $292 = mapWithIndex2(Tuple.create);
        return function($293) {
          return $291($292($293));
        };
      };
    },
    foldlWithIndex: function(f) {
      return function(z) {
        var $294 = foldl8(function(y) {
          return function(v) {
            return f(v.value0)(y)(v.value1);
          };
        })(z);
        var $295 = mapWithIndex2(Tuple.create);
        return function($296) {
          return $294($295($296));
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
    },
    Foldable0: function() {
      return foldableArray;
    }
  };
  var foldMapWithIndex = function(dict) {
    return dict.foldMapWithIndex;
  };

  // output/Data.TraversableWithIndex/index.js
  var traverseWithIndexDefault = function(dictTraversableWithIndex) {
    var sequence2 = sequence(dictTraversableWithIndex.Traversable2());
    var mapWithIndex5 = mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
    return function(dictApplicative) {
      var sequence12 = sequence2(dictApplicative);
      return function(f) {
        var $174 = mapWithIndex5(f);
        return function($175) {
          return sequence12($174($175));
        };
      };
    };
  };
  var traverseWithIndex = function(dict) {
    return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = {
    traverseWithIndex: function(dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
    },
    FunctorWithIndex0: function() {
      return functorWithIndexArray;
    },
    FoldableWithIndex1: function() {
      return foldableWithIndexArray;
    },
    Traversable2: function() {
      return traversableArray;
    }
  };

  // output/Data.Reflectable/index.js
  var reflectType = function(dict) {
    return dict.reflectType;
  };

  // output/Data.NonEmpty/index.js
  var NonEmpty = /* @__PURE__ */ function() {
    function NonEmpty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    NonEmpty2.create = function(value0) {
      return function(value1) {
        return new NonEmpty2(value0, value1);
      };
    };
    return NonEmpty2;
  }();
  var singleton3 = function(dictPlus) {
    var empty6 = empty2(dictPlus);
    return function(a2) {
      return new NonEmpty(a2, empty6);
    };
  };
  var showNonEmpty = function(dictShow) {
    var show29 = show(dictShow);
    return function(dictShow1) {
      var show113 = show(dictShow1);
      return {
        show: function(v) {
          return "(NonEmpty " + (show29(v.value0) + (" " + (show113(v.value1) + ")")));
        }
      };
    };
  };
  var foldableNonEmpty = function(dictFoldable) {
    var foldMap3 = foldMap(dictFoldable);
    var foldl6 = foldl(dictFoldable);
    var foldr5 = foldr(dictFoldable);
    return {
      foldMap: function(dictMonoid) {
        var append12 = append(dictMonoid.Semigroup0());
        var foldMap12 = foldMap3(dictMonoid);
        return function(f) {
          return function(v) {
            return append12(f(v.value0))(foldMap12(f)(v.value1));
          };
        };
      },
      foldl: function(f) {
        return function(b2) {
          return function(v) {
            return foldl6(f)(f(b2)(v.value0))(v.value1);
          };
        };
      },
      foldr: function(f) {
        return function(b2) {
          return function(v) {
            return f(v.value0)(foldr5(f)(b2)(v.value1));
          };
        };
      }
    };
  };
  var foldable1NonEmpty = function(dictFoldable) {
    var foldl6 = foldl(dictFoldable);
    var foldr5 = foldr(dictFoldable);
    var foldableNonEmpty1 = foldableNonEmpty(dictFoldable);
    return {
      foldMap1: function(dictSemigroup) {
        var append12 = append(dictSemigroup);
        return function(f) {
          return function(v) {
            return foldl6(function(s2) {
              return function(a1) {
                return append12(s2)(f(a1));
              };
            })(f(v.value0))(v.value1);
          };
        };
      },
      foldr1: function(f) {
        return function(v) {
          return maybe(v.value0)(f(v.value0))(foldr5(function(a1) {
            var $250 = maybe(a1)(f(a1));
            return function($251) {
              return Just.create($250($251));
            };
          })(Nothing.value)(v.value1));
        };
      },
      foldl1: function(f) {
        return function(v) {
          return foldl6(f)(v.value0)(v.value1);
        };
      },
      Foldable0: function() {
        return foldableNonEmpty1;
      }
    };
  };

  // output/Data.Array.NonEmpty/index.js
  var toArray = function(v) {
    return v;
  };

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n) {
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
  var toNumber = function(n) {
    return n;
  };
  var fromStringAsImpl = function(just) {
    return function(nothing) {
      return function(radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern2 = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
        return function(s2) {
          if (pattern2.test(s2)) {
            var i2 = parseInt(s2, radix);
            return (i2 | 0) === i2 ? just(i2) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  // output/Data.Number/foreign.js
  var isFiniteImpl = isFinite;
  var ceil = Math.ceil;
  var floor = Math.floor;
  var round = Math.round;

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromStringAs = /* @__PURE__ */ function() {
    return fromStringAsImpl(Just.create)(Nothing.value);
  }();
  var fromString = /* @__PURE__ */ fromStringAs(10);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x) {
    if (!isFiniteImpl(x)) {
      return 0;
    }
    ;
    if (x >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
  };
  var round2 = function($37) {
    return unsafeClamp(round($37));
  };
  var floor2 = function($39) {
    return unsafeClamp(floor($39));
  };
  var ceil2 = function($40) {
    return unsafeClamp(ceil($40));
  };

  // output/Partial/foreign.js
  var _crashWith = function(msg) {
    throw new Error(msg);
  };

  // output/Partial/index.js
  var crashWith = function() {
    return _crashWith;
  };

  // output/Effect.Exception/foreign.js
  function showErrorImpl(err) {
    return err.stack || err.toString();
  }
  function error(msg) {
    return new Error(msg);
  }
  function throwException(e2) {
    return function() {
      throw e2;
    };
  }

  // output/Effect.Exception/index.js
  var $$throw = function($4) {
    return throwException(error($4));
  };
  var showError = {
    show: showErrorImpl
  };

  // output/Control.Monad.Error.Class/index.js
  var throwError = function(dict) {
    return dict.throwError;
  };
  var catchError = function(dict) {
    return dict.catchError;
  };

  // output/Control.Monad.Reader.Class/index.js
  var ask = function(dict) {
    return dict.ask;
  };
  var asks = function(dictMonadAsk) {
    var map37 = map(dictMonadAsk.Monad0().Bind1().Apply0().Functor0());
    var ask1 = ask(dictMonadAsk);
    return function(f) {
      return map37(f)(ask1);
    };
  };

  // output/Control.Monad.Trans.Class/index.js
  var lift = function(dict) {
    return dict.lift;
  };

  // output/Effect.Class/index.js
  var monadEffectEffect = {
    liftEffect: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftEffect = function(dict) {
    return dict.liftEffect;
  };

  // output/Data.Enum/index.js
  var apply3 = /* @__PURE__ */ apply(applyFn);
  var toEnum = function(dict) {
    return dict.toEnum;
  };
  var succ = function(dict) {
    return dict.succ;
  };
  var upFromIncluding = function(dictEnum) {
    var succ12 = succ(dictEnum);
    return function(dictUnfoldable1) {
      return unfoldr1(dictUnfoldable1)(apply3(Tuple.create)(succ12));
    };
  };
  var pred = function(dict) {
    return dict.pred;
  };
  var fromEnum = function(dict) {
    return dict.fromEnum;
  };

  // output/Data.List.Types/index.js
  var identity7 = /* @__PURE__ */ identity(categoryFn);
  var Nil = /* @__PURE__ */ function() {
    function Nil3() {
    }
    ;
    Nil3.value = new Nil3();
    return Nil3;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons3.create = function(value0) {
      return function(value1) {
        return new Cons3(value0, value1);
      };
    };
    return Cons3;
  }();
  var NonEmptyList = function(x) {
    return x;
  };
  var toList = function(v) {
    return new Cons(v.value0, v.value1);
  };
  var listMap = function(f) {
    var chunkedRevMap = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Cons)) {
            $tco_var_v = new Cons(v1, v);
            $copy_v1 = v1.value1.value1.value1;
            return;
          }
          ;
          var unrolledMap = function(v2) {
            if (v2 instanceof Cons && (v2.value1 instanceof Cons && v2.value1.value1 instanceof Nil)) {
              return new Cons(f(v2.value0), new Cons(f(v2.value1.value0), Nil.value));
            }
            ;
            if (v2 instanceof Cons && v2.value1 instanceof Nil) {
              return new Cons(f(v2.value0), Nil.value);
            }
            ;
            return Nil.value;
          };
          var reverseUnrolledMap = function($copy_v2) {
            return function($copy_v3) {
              var $tco_var_v2 = $copy_v2;
              var $tco_done1 = false;
              var $tco_result2;
              function $tco_loop2(v2, v3) {
                if (v2 instanceof Cons && (v2.value0 instanceof Cons && (v2.value0.value1 instanceof Cons && v2.value0.value1.value1 instanceof Cons))) {
                  $tco_var_v2 = v2.value1;
                  $copy_v3 = new Cons(f(v2.value0.value0), new Cons(f(v2.value0.value1.value0), new Cons(f(v2.value0.value1.value1.value0), v3)));
                  return;
                }
                ;
                $tco_done1 = true;
                return v3;
              }
              ;
              while (!$tco_done1) {
                $tco_result2 = $tco_loop2($tco_var_v2, $copy_v3);
              }
              ;
              return $tco_result2;
            };
          };
          $tco_done = true;
          return reverseUnrolledMap(v)(unrolledMap(v1));
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return chunkedRevMap(Nil.value);
  };
  var functorList = {
    map: listMap
  };
  var map5 = /* @__PURE__ */ map(functorList);
  var foldableList = {
    foldr: function(f) {
      return function(b2) {
        var rev3 = function() {
          var go2 = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                if (v1 instanceof Nil) {
                  $tco_done = true;
                  return v;
                }
                ;
                if (v1 instanceof Cons) {
                  $tco_var_v = new Cons(v1.value0, v);
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [v.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return go2(Nil.value);
        }();
        var $284 = foldl(foldableList)(flip(f))(b2);
        return function($285) {
          return $284(rev3($285));
        };
      };
    },
    foldl: function(f) {
      var go2 = function($copy_b) {
        return function($copy_v) {
          var $tco_var_b = $copy_b;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(b2, v) {
            if (v instanceof Nil) {
              $tco_done1 = true;
              return b2;
            }
            ;
            if (v instanceof Cons) {
              $tco_var_b = f(b2)(v.value0);
              $copy_v = v.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_b, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append22 = append(dictMonoid.Semigroup0());
      var mempty11 = mempty(dictMonoid);
      return function(f) {
        return foldl(foldableList)(function(acc) {
          var $286 = append22(acc);
          return function($287) {
            return $286(f($287));
          };
        })(mempty11);
      };
    }
  };
  var foldl2 = /* @__PURE__ */ foldl(foldableList);
  var foldr2 = /* @__PURE__ */ foldr(foldableList);
  var intercalate3 = /* @__PURE__ */ intercalate(foldableList)(monoidString);
  var semigroupList = {
    append: function(xs) {
      return function(ys) {
        return foldr2(Cons.create)(ys)(xs);
      };
    }
  };
  var append1 = /* @__PURE__ */ append(semigroupList);
  var monoidList = /* @__PURE__ */ function() {
    return {
      mempty: Nil.value,
      Semigroup0: function() {
        return semigroupList;
      }
    };
  }();
  var semigroupNonEmptyList = {
    append: function(v) {
      return function(as$prime) {
        return new NonEmpty(v.value0, append1(v.value1)(toList(as$prime)));
      };
    }
  };
  var showList = function(dictShow) {
    var show29 = show(dictShow);
    return {
      show: function(v) {
        if (v instanceof Nil) {
          return "Nil";
        }
        ;
        return "(" + (intercalate3(" : ")(map5(show29)(v)) + " : Nil)");
      }
    };
  };
  var showNonEmptyList = function(dictShow) {
    var show29 = show(showNonEmpty(dictShow)(showList(dictShow)));
    return {
      show: function(v) {
        return "(NonEmptyList " + (show29(v) + ")");
      }
    };
  };
  var traversableList = {
    traverse: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      var map118 = map(Apply0.Functor0());
      var lift23 = lift2(Apply0);
      var pure114 = pure(dictApplicative);
      return function(f) {
        var $301 = map118(foldl2(flip(Cons.create))(Nil.value));
        var $302 = foldl2(function(acc) {
          var $304 = lift23(flip(Cons.create))(acc);
          return function($305) {
            return $304(f($305));
          };
        })(pure114(Nil.value));
        return function($303) {
          return $301($302($303));
        };
      };
    },
    sequence: function(dictApplicative) {
      return traverse(traversableList)(dictApplicative)(identity7);
    },
    Functor0: function() {
      return functorList;
    },
    Foldable1: function() {
      return foldableList;
    }
  };
  var unfoldable1List = {
    unfoldr1: function(f) {
      return function(b2) {
        var go2 = function($copy_source) {
          return function($copy_memo) {
            var $tco_var_source = $copy_source;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(source3, memo) {
              var v = f(source3);
              if (v.value1 instanceof Just) {
                $tco_var_source = v.value1.value0;
                $copy_memo = new Cons(v.value0, memo);
                return;
              }
              ;
              if (v.value1 instanceof Nothing) {
                $tco_done = true;
                return foldl2(flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
              }
              ;
              throw new Error("Failed pattern match at Data.List.Types (line 135, column 22 - line 137, column 61): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_source, $copy_memo);
            }
            ;
            return $tco_result;
          };
        };
        return go2(b2)(Nil.value);
      };
    }
  };
  var foldable1NonEmptyList = /* @__PURE__ */ foldable1NonEmpty(foldableList);
  var applyList = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Nil) {
          return Nil.value;
        }
        ;
        if (v instanceof Cons) {
          return append1(map5(v.value0)(v1))(apply(applyList)(v.value1)(v1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Types (line 157, column 1 - line 159, column 48): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorList;
    }
  };
  var bindList = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Nil) {
          return Nil.value;
        }
        ;
        if (v instanceof Cons) {
          return append1(v1(v.value0))(bind(bindList)(v.value1)(v1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Types (line 164, column 1 - line 166, column 37): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyList;
    }
  };
  var altList = {
    alt: append1,
    Functor0: function() {
      return functorList;
    }
  };
  var plusList = /* @__PURE__ */ function() {
    return {
      empty: Nil.value,
      Alt0: function() {
        return altList;
      }
    };
  }();

  // output/Data.List.Internal/index.js
  var Leaf = /* @__PURE__ */ function() {
    function Leaf3() {
    }
    ;
    Leaf3.value = new Leaf3();
    return Leaf3;
  }();
  var Two = /* @__PURE__ */ function() {
    function Two3(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Two3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Two3(value0, value1, value22);
        };
      };
    };
    return Two3;
  }();
  var Three = /* @__PURE__ */ function() {
    function Three3(value0, value1, value22, value32, value42) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
    }
    ;
    Three3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return new Three3(value0, value1, value22, value32, value42);
            };
          };
        };
      };
    };
    return Three3;
  }();
  var TwoLeft = /* @__PURE__ */ function() {
    function TwoLeft3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TwoLeft3.create = function(value0) {
      return function(value1) {
        return new TwoLeft3(value0, value1);
      };
    };
    return TwoLeft3;
  }();
  var TwoRight = /* @__PURE__ */ function() {
    function TwoRight3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TwoRight3.create = function(value0) {
      return function(value1) {
        return new TwoRight3(value0, value1);
      };
    };
    return TwoRight3;
  }();
  var ThreeLeft = /* @__PURE__ */ function() {
    function ThreeLeft3(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    ThreeLeft3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new ThreeLeft3(value0, value1, value22, value32);
          };
        };
      };
    };
    return ThreeLeft3;
  }();
  var ThreeMiddle = /* @__PURE__ */ function() {
    function ThreeMiddle3(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    ThreeMiddle3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new ThreeMiddle3(value0, value1, value22, value32);
          };
        };
      };
    };
    return ThreeMiddle3;
  }();
  var ThreeRight = /* @__PURE__ */ function() {
    function ThreeRight3(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    ThreeRight3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new ThreeRight3(value0, value1, value22, value32);
          };
        };
      };
    };
    return ThreeRight3;
  }();
  var KickUp = /* @__PURE__ */ function() {
    function KickUp3(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    KickUp3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new KickUp3(value0, value1, value22);
        };
      };
    };
    return KickUp3;
  }();
  var fromZipper = function($copy_v) {
    return function($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v, v1) {
        if (v instanceof Nil) {
          $tco_done = true;
          return v1;
        }
        ;
        if (v instanceof Cons) {
          if (v.value0 instanceof TwoLeft) {
            $tco_var_v = v.value1;
            $copy_v1 = new Two(v1, v.value0.value0, v.value0.value1);
            return;
          }
          ;
          if (v.value0 instanceof TwoRight) {
            $tco_var_v = v.value1;
            $copy_v1 = new Two(v.value0.value0, v.value0.value1, v1);
            return;
          }
          ;
          if (v.value0 instanceof ThreeLeft) {
            $tco_var_v = v.value1;
            $copy_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3);
            return;
          }
          ;
          if (v.value0 instanceof ThreeMiddle) {
            $tco_var_v = v.value1;
            $copy_v1 = new Three(v.value0.value0, v.value0.value1, v1, v.value0.value2, v.value0.value3);
            return;
          }
          ;
          if (v.value0 instanceof ThreeRight) {
            $tco_var_v = v.value1;
            $copy_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v1);
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List.Internal (line 25, column 3 - line 30, column 76): " + [v.value0.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Data.List.Internal (line 22, column 1 - line 22, column 63): " + [v.constructor.name, v1.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }
      ;
      return $tco_result;
    };
  };
  var insertAndLookupBy = function(comp) {
    return function(k) {
      return function(orig) {
        var up = function($copy_v) {
          return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
              if (v instanceof Nil) {
                $tco_done = true;
                return new Two(v1.value0, v1.value1, v1.value2);
              }
              ;
              if (v instanceof Cons) {
                if (v.value0 instanceof TwoLeft) {
                  $tco_done = true;
                  return fromZipper(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v.value0.value0, v.value0.value1));
                }
                ;
                if (v.value0 instanceof TwoRight) {
                  $tco_done = true;
                  return fromZipper(v.value1)(new Three(v.value0.value0, v.value0.value1, v1.value0, v1.value1, v1.value2));
                }
                ;
                if (v.value0 instanceof ThreeLeft) {
                  $tco_var_v = v.value1;
                  $copy_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2), v.value0.value0, new Two(v.value0.value1, v.value0.value2, v.value0.value3));
                  return;
                }
                ;
                if (v.value0 instanceof ThreeMiddle) {
                  $tco_var_v = v.value1;
                  $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v1.value0), v1.value1, new Two(v1.value2, v.value0.value2, v.value0.value3));
                  return;
                }
                ;
                if (v.value0 instanceof ThreeRight) {
                  $tco_var_v = v.value1;
                  $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2), v.value0.value3, new Two(v1.value0, v1.value1, v1.value2));
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Internal (line 58, column 5 - line 63, column 90): " + [v.value0.constructor.name, v1.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.List.Internal (line 55, column 3 - line 55, column 50): " + [v.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        var down = function($copy_v) {
          return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(v, v1) {
              if (v1 instanceof Leaf) {
                $tco_done1 = true;
                return {
                  found: false,
                  result: up(v)(new KickUp(Leaf.value, k, Leaf.value))
                };
              }
              ;
              if (v1 instanceof Two) {
                var v2 = comp(k)(v1.value1);
                if (v2 instanceof EQ) {
                  $tco_done1 = true;
                  return {
                    found: true,
                    result: orig
                  };
                }
                ;
                if (v2 instanceof LT) {
                  $tco_var_v = new Cons(new TwoLeft(v1.value1, v1.value2), v);
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                $tco_var_v = new Cons(new TwoRight(v1.value0, v1.value1), v);
                $copy_v1 = v1.value2;
                return;
              }
              ;
              if (v1 instanceof Three) {
                var v2 = comp(k)(v1.value1);
                if (v2 instanceof EQ) {
                  $tco_done1 = true;
                  return {
                    found: true,
                    result: orig
                  };
                }
                ;
                var v3 = comp(k)(v1.value3);
                if (v3 instanceof EQ) {
                  $tco_done1 = true;
                  return {
                    found: true,
                    result: orig
                  };
                }
                ;
                if (v2 instanceof LT) {
                  $tco_var_v = new Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4), v);
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                if (v2 instanceof GT && v3 instanceof LT) {
                  $tco_var_v = new Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value3, v1.value4), v);
                  $copy_v1 = v1.value2;
                  return;
                }
                ;
                $tco_var_v = new Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3), v);
                $copy_v1 = v1.value4;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Internal (line 38, column 3 - line 38, column 81): " + [v.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        return down(Nil.value)(orig);
      };
    };
  };
  var emptySet = /* @__PURE__ */ function() {
    return Leaf.value;
  }();

  // output/Data.List/index.js
  var map6 = /* @__PURE__ */ map(functorMaybe);
  var foldr3 = /* @__PURE__ */ foldr(foldableList);
  var eq3 = /* @__PURE__ */ eq(eqOrdering);
  var notEq3 = /* @__PURE__ */ notEq(eqOrdering);
  var foldl3 = /* @__PURE__ */ foldl(foldableList);
  var bind2 = /* @__PURE__ */ bind(bindList);
  var identity8 = /* @__PURE__ */ identity(categoryFn);
  var unzip2 = /* @__PURE__ */ function() {
    return foldr3(function(v) {
      return function(v1) {
        return new Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
      };
    })(new Tuple(Nil.value, Nil.value));
  }();
  var uncons2 = function(v) {
    if (v instanceof Nil) {
      return Nothing.value;
    }
    ;
    if (v instanceof Cons) {
      return new Just({
        head: v.value0,
        tail: v.value1
      });
    }
    ;
    throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [v.constructor.name]);
  };
  var toUnfoldable2 = function(dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function(xs) {
      return map6(function(rec) {
        return new Tuple(rec.head, rec.tail);
      })(uncons2(xs));
    });
  };
  var tail2 = function(v) {
    if (v instanceof Nil) {
      return Nothing.value;
    }
    ;
    if (v instanceof Cons) {
      return new Just(v.value1);
    }
    ;
    throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [v.constructor.name]);
  };
  var span5 = function(v) {
    return function(v1) {
      if (v1 instanceof Cons && v(v1.value0)) {
        var v2 = span5(v)(v1.value1);
        return {
          init: new Cons(v1.value0, v2.init),
          rest: v2.rest
        };
      }
      ;
      return {
        init: Nil.value,
        rest: v1
      };
    };
  };
  var snoc2 = function(xs) {
    return function(x) {
      return foldr3(Cons.create)(new Cons(x, Nil.value))(xs);
    };
  };
  var singleton4 = function(a2) {
    return new Cons(a2, Nil.value);
  };
  var sortBy2 = function(cmp) {
    var merge3 = function(v) {
      return function(v1) {
        if (v instanceof Cons && v1 instanceof Cons) {
          if (eq3(cmp(v.value0)(v1.value0))(GT.value)) {
            return new Cons(v1.value0, merge3(v)(v1.value1));
          }
          ;
          if (otherwise) {
            return new Cons(v.value0, merge3(v.value1)(v1));
          }
          ;
        }
        ;
        if (v instanceof Nil) {
          return v1;
        }
        ;
        if (v1 instanceof Nil) {
          return v;
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 466, column 3 - line 466, column 38): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    var mergePairs = function(v) {
      if (v instanceof Cons && v.value1 instanceof Cons) {
        return new Cons(merge3(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
      }
      ;
      return v;
    };
    var mergeAll = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Cons && v.value1 instanceof Nil) {
          $tco_done = true;
          return v.value0;
        }
        ;
        $copy_v = mergePairs(v);
        return;
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var sequences = function(v) {
      if (v instanceof Cons && v.value1 instanceof Cons) {
        if (eq3(cmp(v.value0)(v.value1.value0))(GT.value)) {
          return descending(v.value1.value0)(singleton4(v.value0))(v.value1.value1);
        }
        ;
        if (otherwise) {
          return ascending(v.value1.value0)(function(v1) {
            return new Cons(v.value0, v1);
          })(v.value1.value1);
        }
        ;
      }
      ;
      return singleton4(v);
    };
    var descending = function($copy_v) {
      return function($copy_v1) {
        return function($copy_v2) {
          var $tco_var_v = $copy_v;
          var $tco_var_v1 = $copy_v1;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(v, v1, v2) {
            if (v2 instanceof Cons && eq3(cmp(v)(v2.value0))(GT.value)) {
              $tco_var_v = v2.value0;
              $tco_var_v1 = new Cons(v, v1);
              $copy_v2 = v2.value1;
              return;
            }
            ;
            $tco_done1 = true;
            return new Cons(new Cons(v, v1), sequences(v2));
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
          }
          ;
          return $tco_result;
        };
      };
    };
    var ascending = function($copy_v) {
      return function($copy_v1) {
        return function($copy_v2) {
          var $tco_var_v = $copy_v;
          var $tco_var_v1 = $copy_v1;
          var $tco_done2 = false;
          var $tco_result;
          function $tco_loop(v, v1, v2) {
            if (v2 instanceof Cons && notEq3(cmp(v)(v2.value0))(GT.value)) {
              $tco_var_v = v2.value0;
              $tco_var_v1 = function(ys) {
                return v1(new Cons(v, ys));
              };
              $copy_v2 = v2.value1;
              return;
            }
            ;
            $tco_done2 = true;
            return new Cons(v1(singleton4(v)), sequences(v2));
          }
          ;
          while (!$tco_done2) {
            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
          }
          ;
          return $tco_result;
        };
      };
    };
    return function($444) {
      return mergeAll(sequences($444));
    };
  };
  var reverse2 = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Cons) {
            $tco_var_v = new Cons(v1.value0, v);
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();
  var take2 = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        return function($copy_v2) {
          var $tco_var_v = $copy_v;
          var $tco_var_v1 = $copy_v1;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1, v2) {
            if (v1 < 1) {
              $tco_done = true;
              return reverse2(v);
            }
            ;
            if (v2 instanceof Nil) {
              $tco_done = true;
              return reverse2(v);
            }
            ;
            if (v2 instanceof Cons) {
              $tco_var_v = new Cons(v2.value0, v);
              $tco_var_v1 = v1 - 1 | 0;
              $copy_v2 = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 513, column 3 - line 513, column 35): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
          }
          ;
          return $tco_result;
        };
      };
    };
    return go2(Nil.value);
  }();
  var unsnoc2 = function(lst) {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v instanceof Nil) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v instanceof Cons && v.value1 instanceof Nil) {
            $tco_done = true;
            return new Just({
              revInit: v1,
              last: v.value0
            });
          }
          ;
          if (v instanceof Cons) {
            $tco_var_v = v.value1;
            $copy_v1 = new Cons(v.value0, v1);
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 21): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return map6(function(h) {
      return {
        init: reverse2(h.revInit),
        last: h.last
      };
    })(go2(lst)(Nil.value));
  };
  var zipWith2 = function(f) {
    return function(xs) {
      return function(ys) {
        var go2 = function($copy_v) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1, v2) {
                if (v instanceof Nil) {
                  $tco_done = true;
                  return v2;
                }
                ;
                if (v1 instanceof Nil) {
                  $tco_done = true;
                  return v2;
                }
                ;
                if (v instanceof Cons && v1 instanceof Cons) {
                  $tco_var_v = v.value1;
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new Cons(f(v.value0)(v1.value0), v2);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List (line 779, column 3 - line 779, column 21): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        return reverse2(go2(xs)(ys)(Nil.value));
      };
    };
  };
  var zip2 = /* @__PURE__ */ function() {
    return zipWith2(Tuple.create);
  }();
  var range3 = function(start2) {
    return function(end) {
      if (start2 === end) {
        return singleton4(start2);
      }
      ;
      if (otherwise) {
        var go2 = function($copy_s) {
          return function($copy_e) {
            return function($copy_step) {
              return function($copy_rest) {
                var $tco_var_s = $copy_s;
                var $tco_var_e = $copy_e;
                var $tco_var_step = $copy_step;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(s2, e2, step3, rest) {
                  if (s2 === e2) {
                    $tco_done = true;
                    return new Cons(s2, rest);
                  }
                  ;
                  if (otherwise) {
                    $tco_var_s = s2 + step3 | 0;
                    $tco_var_e = e2;
                    $tco_var_step = step3;
                    $copy_rest = new Cons(s2, rest);
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [s2.constructor.name, e2.constructor.name, step3.constructor.name, rest.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                }
                ;
                return $tco_result;
              };
            };
          };
        };
        return go2(end)(start2)(function() {
          var $325 = start2 > end;
          if ($325) {
            return 1;
          }
          ;
          return -1 | 0;
        }())(Nil.value);
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [start2.constructor.name, end.constructor.name]);
    };
  };
  var nubBy2 = function(p2) {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        return function($copy_v2) {
          var $tco_var_v = $copy_v;
          var $tco_var_v1 = $copy_v1;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1, v2) {
            if (v2 instanceof Nil) {
              $tco_done = true;
              return v1;
            }
            ;
            if (v2 instanceof Cons) {
              var v3 = insertAndLookupBy(p2)(v2.value0)(v);
              if (v3.found) {
                $tco_var_v = v3.result;
                $tco_var_v1 = v1;
                $copy_v2 = v2.value1;
                return;
              }
              ;
              $tco_var_v = v3.result;
              $tco_var_v1 = new Cons(v2.value0, v1);
              $copy_v2 = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 673, column 5 - line 673, column 23): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
          }
          ;
          return $tco_result;
        };
      };
    };
    var $445 = go2(emptySet)(Nil.value);
    return function($446) {
      return reverse2($445($446));
    };
  };
  var nub2 = function(dictOrd) {
    return nubBy2(compare(dictOrd));
  };
  var mapMaybe2 = function(f) {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return reverse2(v);
          }
          ;
          if (v1 instanceof Cons) {
            var v2 = f(v1.value0);
            if (v2 instanceof Nothing) {
              $tco_var_v = v;
              $copy_v1 = v1.value1;
              return;
            }
            ;
            if (v2 instanceof Just) {
              $tco_var_v = new Cons(v2.value0, v);
              $copy_v1 = v1.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [v2.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  };
  var length3 = /* @__PURE__ */ foldl3(function(acc) {
    return function(v) {
      return acc + 1 | 0;
    };
  })(0);
  var last2 = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v instanceof Cons && v.value1 instanceof Nil) {
        $tco_done = true;
        return new Just(v.value0);
      }
      ;
      if (v instanceof Cons) {
        $copy_v = v.value1;
        return;
      }
      ;
      $tco_done = true;
      return Nothing.value;
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var init2 = function(lst) {
    return map6(function(v) {
      return v.init;
    })(unsnoc2(lst));
  };
  var head3 = function(v) {
    if (v instanceof Nil) {
      return Nothing.value;
    }
    ;
    if (v instanceof Cons) {
      return new Just(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [v.constructor.name]);
  };
  var groupBy2 = function(v) {
    return function(v1) {
      if (v1 instanceof Nil) {
        return Nil.value;
      }
      ;
      if (v1 instanceof Cons) {
        var v2 = span5(v(v1.value0))(v1.value1);
        return new Cons(new NonEmpty(v1.value0, v2.init), groupBy2(v)(v2.rest));
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 609, column 1 - line 609, column 80): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var filterM = function(dictMonad) {
    var pure27 = pure(dictMonad.Applicative0());
    var bind115 = bind(dictMonad.Bind1());
    return function(v) {
      return function(v1) {
        if (v1 instanceof Nil) {
          return pure27(Nil.value);
        }
        ;
        if (v1 instanceof Cons) {
          return bind115(v(v1.value0))(function(b2) {
            return bind115(filterM(dictMonad)(v)(v1.value1))(function(xs$prime) {
              return pure27(function() {
                if (b2) {
                  return new Cons(v1.value0, xs$prime);
                }
                ;
                return xs$prime;
              }());
            });
          });
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };
  var filter2 = function(p2) {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return reverse2(v);
          }
          ;
          if (v1 instanceof Cons) {
            if (p2(v1.value0)) {
              $tco_var_v = new Cons(v1.value0, v);
              $copy_v1 = v1.value1;
              return;
            }
            ;
            if (otherwise) {
              $tco_var_v = v;
              $copy_v1 = v1.value1;
              return;
            }
            ;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  };
  var dropWhile2 = function(p2) {
    var go2 = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Cons && p2(v.value0)) {
          $copy_v = v.value1;
          return;
        }
        ;
        $tco_done = true;
        return v;
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return go2;
  };
  var dropEnd2 = function(n) {
    return function(xs) {
      return take2(length3(xs) - n | 0)(xs);
    };
  };
  var deleteBy2 = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nil) {
          return Nil.value;
        }
        ;
        if (v2 instanceof Cons && v(v1)(v2.value0)) {
          return v2.value1;
        }
        ;
        if (v2 instanceof Cons) {
          return new Cons(v2.value0, deleteBy2(v)(v1)(v2.value1));
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 732, column 1 - line 732, column 67): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var $$delete3 = function(dictEq) {
    return deleteBy2(eq(dictEq));
  };
  var concatMap2 = /* @__PURE__ */ flip(bind2);
  var concat2 = function(v) {
    return bind2(v)(identity8);
  };

  // output/Effect.Random/foreign.js
  var random = Math.random;

  // output/Data.Array.ArrayAL/index.js
  var fromJust4 = /* @__PURE__ */ fromJust();
  var functorArrayAL = functorArray;
  var toArray2 = unsafeCoerce2;
  var solo = function(x) {
    return [x];
  };
  var fromArray3 = function() {
    return function(dictReflectable) {
      var reflectType2 = reflectType(dictReflectable);
      return function(len) {
        return function(xs) {
          var $156 = length(xs) >= reflectType2(len);
          if ($156) {
            return new Just(xs);
          }
          ;
          return Nothing.value;
        };
      };
    };
  };
  var definitely = function(x) {
    return fromJust4(x);
  };
  var uncons3 = function() {
    return function() {
      return function(v) {
        var raw = definitely(uncons(v));
        return {
          head: raw.head,
          tail: raw.tail
        };
      };
    };
  };

  // output/React.Basic.Hooks/foreign.js
  var import_react3 = __toESM(require_react(), 1);
  var useEqCache = (eq29, a2) => {
    const memoRef = import_react3.default.useRef(a2);
    if (memoRef.current !== a2 && !eq29(memoRef.current, a2)) {
      memoRef.current = a2;
    }
    return memoRef.current;
  };
  var memo_ = import_react3.default.memo;
  var memoEq_ = import_react3.default.memo;
  function useState_(tuple, initialState) {
    const [state3, setState] = import_react3.default.useState(
      typeof initialState === "function" ? () => initialState : initialState
    );
    if (!setState.hasOwnProperty("$$reactBasicHooks$$cachedSetState")) {
      setState.$$reactBasicHooks$$cachedSetState = (update2) => () => setState(update2);
    }
    return tuple(state3, setState.$$reactBasicHooks$$cachedSetState);
  }
  function useEffect_(eq29, deps, effect) {
    const memoizedKey = useEqCache(eq29, deps);
    import_react3.default.useEffect(effect, [memoizedKey]);
  }
  var useRef_ = import_react3.default.useRef;
  var useContext_ = import_react3.default.useContext;
  var useDebugValue_ = import_react3.default.useDebugValue;
  var useId_ = import_react3.default.useId;
  var useDeferredValue_ = import_react3.default.useDeferredValue;
  var useSyncExternalStore2_ = import_react3.default.useSyncExternalStore;
  var useSyncExternalStore3_ = import_react3.default.useSyncExternalStore;
  function unsafeSetDisplayName(displayName2, component2) {
    component2.displayName = displayName2;
    component2.toString = () => displayName2;
    return component2;
  }

  // output/Control.Bind.Indexed/index.js
  var idiscard = function(dict) {
    return dict.idiscard;
  };
  var ibind = function(dict) {
    return dict.ibind;
  };
  var ixDiscardUnit = {
    idiscard: function(dictIxBind) {
      return ibind(dictIxBind);
    }
  };

  // output/React.Basic.Hooks.Internal/index.js
  var map7 = /* @__PURE__ */ map(functorEffect);
  var apply4 = /* @__PURE__ */ apply(applyEffect);
  var pure2 = /* @__PURE__ */ pure(applicativeEffect);
  var Render = function(x) {
    return x;
  };
  var unsafeHook = Render;
  var ixFunctorRender = {
    imap: function(f) {
      return function(v) {
        return map7(f)(v);
      };
    }
  };
  var ixApplyRender = {
    iapply: function(v) {
      return function(v1) {
        return apply4(v)(v1);
      };
    },
    IxFunctor0: function() {
      return ixFunctorRender;
    }
  };
  var ixBindRender = {
    ibind: function(v) {
      return function(f) {
        return function __do6() {
          var a2 = v();
          var v1 = f(a2);
          return v1();
        };
      };
    },
    IxApply0: function() {
      return ixApplyRender;
    }
  };
  var functorRender = {
    map: function(f) {
      return function(v) {
        return map7(f)(v);
      };
    }
  };
  var discard2 = function(dictIxBind) {
    return ibind(dictIxBind);
  };
  var bind3 = function(dictIxBind) {
    return ibind(dictIxBind);
  };
  var applyRender = function(dictTypeEquals) {
    return {
      apply: function(v) {
        return function(v1) {
          return apply4(v)(v1);
        };
      },
      Functor0: function() {
        return functorRender;
      }
    };
  };
  var applicativeRender = function(dictTypeEquals) {
    var applyRender1 = applyRender(dictTypeEquals);
    return {
      pure: function(a2) {
        return pure2(a2);
      },
      Apply0: function() {
        return applyRender1;
      }
    };
  };

  // output/React.Basic.Hooks/index.js
  var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorRender);
  var rmap2 = /* @__PURE__ */ rmap(bifunctorTuple);
  var useState = function(initialState) {
    return unsafeHook(function() {
      return useState_(mkFn2(Tuple.create), initialState);
    });
  };
  var useState$prime = function(initialState) {
    return mapFlipped2(useState(initialState))(rmap2(function(v) {
      return function($36) {
        return v($$const($36));
      };
    }));
  };
  var useEffectOnce = function(effect) {
    return unsafeHook(function() {
      return useEffect_(function(v, v1) {
        return true;
      }, unit, effect);
    });
  };
  var unsafeReactFunctionComponent = unsafeCoerce2;
  var unsafeDiscardRenderEffects = unsafeCoerce2;
  var unsafeReactComponent = function() {
    return function() {
      return function(name16) {
        return function(renderFn) {
          var c = unsafeReactFunctionComponent(function(props) {
            return unsafeDiscardRenderEffects(renderFn(props))();
          });
          return function() {
            return unsafeSetDisplayName(name16, c);
          };
        };
      };
    };
  };
  var unsafeReactComponent1 = /* @__PURE__ */ unsafeReactComponent()();
  var reactComponent = function() {
    return function() {
      return function() {
        return unsafeReactComponent1;
      };
    };
  };
  var reactComponent1 = /* @__PURE__ */ reactComponent()()();
  var component = function(name16) {
    return function(renderFn) {
      return function __do6() {
        var c = reactComponent1(name16)(function($38) {
          return renderFn(function(v) {
            return v.nested;
          }($38));
        })();
        var $39 = element(c);
        return function($40) {
          return $39(function(v) {
            return {
              nested: v
            };
          }($40));
        };
      };
    };
  };

  // output/Type.Equality/index.js
  var refl = {
    proof: function(a2) {
      return a2;
    },
    Coercible0: function() {
      return void 0;
    }
  };

  // output/Component.Widgets.Form/index.js
  var show2 = /* @__PURE__ */ show(showNumber);
  var bind1 = /* @__PURE__ */ bind3(ixBindRender);
  var discard1 = /* @__PURE__ */ discard2(ixBindRender);
  var show1 = /* @__PURE__ */ show(showInt);
  var pure3 = /* @__PURE__ */ pure(applicativeEffect);
  var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorArray);
  var option1 = /* @__PURE__ */ option2()(toJSXArrayJSX)()();
  var select3 = /* @__PURE__ */ select2()(toJSXArrayJSX)()();
  var traverse2 = /* @__PURE__ */ traverse(traversableMaybe)(applicativeEffect);
  var $$void2 = /* @__PURE__ */ $$void(functorEffect);
  var length5 = /* @__PURE__ */ length2(foldableArray)(semiringInt);
  var mapWithIndex4 = /* @__PURE__ */ mapWithIndex(functorWithIndexArray);
  var div6 = /* @__PURE__ */ div4()(toJSXArrayJSX)()();
  var input2 = /* @__PURE__ */ input();
  var label3 = /* @__PURE__ */ label2()(toJSXArrayJSX)()();
  var mempty2 = /* @__PURE__ */ mempty(monoidJSX);
  var pure1 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var RadioButtonField = /* @__PURE__ */ function() {
    function RadioButtonField2(value0) {
      this.value0 = value0;
    }
    ;
    RadioButtonField2.create = function(value0) {
      return new RadioButtonField2(value0);
    };
    return RadioButtonField2;
  }();
  var SelectField = /* @__PURE__ */ function() {
    function SelectField2(value0) {
      this.value0 = value0;
    }
    ;
    SelectField2.create = function(value0) {
      return new SelectField2(value0);
    };
    return SelectField2;
  }();
  var mkSingleChoiceField = function __do() {
    var widgetPrefix = mapFlipped(functorEffect)(random)(function(n) {
      return "single-choice-widget-" + (show2(n) + "-");
    })();
    var counterRef = $$new(0)();
    return component("SingleChoiceField")(function(v) {
      return bind1(useState(v.initialValue))(function(v1) {
        return bind1(useState(Nothing.value))(function(v2) {
          var onChange = function(value14) {
            return function __do6() {
              v.onValueChange(value14)();
              return v1.value1($$const(value14))();
            };
          };
          return discard1(useEffectOnce(function __do6() {
            var counter = read(counterRef)();
            write(counter + 1 | 0)(counterRef)();
            v2.value1($$const(new Just(widgetPrefix + (show1(counter) + "-"))))();
            return pure3(unit);
          }))(function() {
            var jsx = function() {
              if (v.type instanceof SelectField) {
                var choices$prime = toArray2(v.type.value0);
                var options2 = mapFlipped3(choices$prime)(function(v3) {
                  return option1({
                    value: v3.value0,
                    disabled: v3.value1.value1
                  })([text(v3.value1.value0)]);
                });
                return select3({
                  className: "form-control",
                  value: v1.value0,
                  onChange: handler(targetValue)(function() {
                    var $80 = traverse2(onChange);
                    return function($81) {
                      return $$void2($80($81));
                    };
                  }())
                })(options2);
              }
              ;
              if (v.type instanceof RadioButtonField) {
                var choices$prime = toArray2(v.type.value0);
                if (v2.value0 instanceof Just) {
                  return div_(function() {
                    var inputType = function() {
                      var $58 = length5(choices$prime) === 1;
                      if ($58) {
                        return "checkbox";
                      }
                      ;
                      return "radio";
                    }();
                    return flip(mapWithIndex4)(choices$prime)(function(idx) {
                      return function(v3) {
                        var id3 = v2.value0.value0 + show1(idx);
                        var checked2 = v1.value0 === v3.value0;
                        return div6({
                          className: "form-check form-switch"
                        })([input2({
                          className: "form-check-input",
                          type: inputType,
                          checked: checked2,
                          id: id3,
                          onChange: handler_(function() {
                            if (checked2) {
                              return onChange("");
                            }
                            ;
                            return onChange(v3.value0);
                          }()),
                          disabled: v3.value1.value1,
                          name: "radio"
                        }), label3({
                          className: "form-check-label",
                          htmlFor: id3
                        })([v3.value1.value0])]);
                      };
                    });
                  }());
                }
                ;
                if (v2.value0 instanceof Nothing) {
                  return mempty2;
                }
                ;
                throw new Error("Failed pattern match at Component.Widgets.Form (line 84, column 11 - line 110, column 30): " + [v2.value0.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Component.Widgets.Form (line 66, column 13 - line 110, column 30): " + [v.type.constructor.name]);
            }();
            return pure1(jsx);
          });
        });
      });
    })();
  };
  var mkBooleanField = function __do2() {
    var singleChoiceField = mkSingleChoiceField();
    return function(v) {
      return singleChoiceField({
        initialValue: function() {
          if (v.initialValue) {
            return "on";
          }
          ;
          return "";
        }(),
        onValueChange: function(value14) {
          return v.onToggle(value14 === "on");
        },
        type: new RadioButtonField(solo(new Tuple("on", new Tuple(v.label, v.disabled))))
      });
    };
  };
  var choice = function(value14) {
    return function(label1) {
      return new Tuple(value14, new Tuple(label1, false));
    };
  };

  // output/Control.Monad.Reader.Trans/index.js
  var ReaderT = function(x) {
    return x;
  };
  var withReaderT = function(f) {
    return function(v) {
      return function($146) {
        return v(f($146));
      };
    };
  };
  var runReaderT = function(v) {
    return v;
  };
  var monadTransReaderT = {
    lift: function(dictMonad) {
      return function($147) {
        return ReaderT($$const($147));
      };
    }
  };
  var lift3 = /* @__PURE__ */ lift(monadTransReaderT);
  var mapReaderT = function(f) {
    return function(v) {
      return function($148) {
        return f(v($148));
      };
    };
  };
  var functorReaderT = function(dictFunctor) {
    return {
      map: function() {
        var $149 = map(dictFunctor);
        return function($150) {
          return mapReaderT($149($150));
        };
      }()
    };
  };
  var applyReaderT = function(dictApply) {
    var apply10 = apply(dictApply);
    var functorReaderT1 = functorReaderT(dictApply.Functor0());
    return {
      apply: function(v) {
        return function(v1) {
          return function(r) {
            return apply10(v(r))(v1(r));
          };
        };
      },
      Functor0: function() {
        return functorReaderT1;
      }
    };
  };
  var bindReaderT = function(dictBind) {
    var bind31 = bind(dictBind);
    var applyReaderT1 = applyReaderT(dictBind.Apply0());
    return {
      bind: function(v) {
        return function(k) {
          return function(r) {
            return bind31(v(r))(function(a2) {
              var v1 = k(a2);
              return v1(r);
            });
          };
        };
      },
      Apply0: function() {
        return applyReaderT1;
      }
    };
  };
  var applicativeReaderT = function(dictApplicative) {
    var applyReaderT1 = applyReaderT(dictApplicative.Apply0());
    return {
      pure: function() {
        var $154 = pure(dictApplicative);
        return function($155) {
          return ReaderT($$const($154($155)));
        };
      }(),
      Apply0: function() {
        return applyReaderT1;
      }
    };
  };
  var monadReaderT = function(dictMonad) {
    var applicativeReaderT1 = applicativeReaderT(dictMonad.Applicative0());
    var bindReaderT1 = bindReaderT(dictMonad.Bind1());
    return {
      Applicative0: function() {
        return applicativeReaderT1;
      },
      Bind1: function() {
        return bindReaderT1;
      }
    };
  };
  var monadAskReaderT = function(dictMonad) {
    var monadReaderT1 = monadReaderT(dictMonad);
    return {
      ask: pure(dictMonad.Applicative0()),
      Monad0: function() {
        return monadReaderT1;
      }
    };
  };
  var monadEffectReader = function(dictMonadEffect) {
    var Monad0 = dictMonadEffect.Monad0();
    var monadReaderT1 = monadReaderT(Monad0);
    return {
      liftEffect: function() {
        var $157 = lift3(Monad0);
        var $158 = liftEffect(dictMonadEffect);
        return function($159) {
          return $157($158($159));
        };
      }(),
      Monad0: function() {
        return monadReaderT1;
      }
    };
  };
  var altReaderT = function(dictAlt) {
    var alt10 = alt(dictAlt);
    var functorReaderT1 = functorReaderT(dictAlt.Functor0());
    return {
      alt: function(v) {
        return function(v1) {
          return function(r) {
            return alt10(v(r))(v1(r));
          };
        };
      },
      Functor0: function() {
        return functorReaderT1;
      }
    };
  };

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag2, _1, _2, _3) {
      this.tag = tag2;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag2) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag2, _1, _2, _3);
      };
      fn.tag = tag2;
      return fn;
    }
    function nonCanceler2(error4) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error4) {
        setTimeout(function() {
          throw error4;
        }, 0);
      }
    }
    function runSync(left2, right2, eff) {
      try {
        return right2(eff());
      } catch (error4) {
        return left2(error4);
      }
    }
    function runAsync(left2, eff, k) {
      try {
        return eff(k)();
      } catch (error4) {
        k(left2(error4))();
        return nonCanceler2;
      }
    }
    var Scheduler = function() {
      var limit = 1024;
      var size5 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size5 !== 0) {
          size5--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb) {
          var i2, tmp;
          if (size5 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size5) % limit] = cb;
          size5++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function() {
          return count === 0;
        },
        killAll: function(killError, cb) {
          return function() {
            if (count === 0) {
              return cb();
            }
            var killCount = 0;
            var kills = {};
            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }
            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }
            fibers = {};
            fiberId = 0;
            count = 0;
            return function(error4) {
              return new Aff2(SYNC, function() {
                for (var k2 in kills) {
                  if (kills.hasOwnProperty(k2)) {
                    kills[k2]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status2 = SUSPENDED;
      var step3 = aff;
      var fail2 = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run3(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp = null;
          result = null;
          attempt = null;
          switch (status2) {
            case STEP_BIND:
              status2 = CONTINUE;
              try {
                step3 = bhead(step3);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e2) {
                status2 = RETURN;
                fail2 = util.left(e2);
                step3 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step3)) {
                status2 = RETURN;
                fail2 = step3;
                step3 = null;
              } else if (bhead === null) {
                status2 = RETURN;
              } else {
                status2 = STEP_BIND;
                step3 = util.fromRight(step3);
              }
              break;
            case CONTINUE:
              switch (step3.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step3._2;
                  status2 = CONTINUE;
                  step3 = step3._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status2 = RETURN;
                    step3 = util.right(step3._1);
                  } else {
                    status2 = STEP_BIND;
                    step3 = step3._1;
                  }
                  break;
                case SYNC:
                  status2 = STEP_RESULT;
                  step3 = runSync(util.left, util.right, step3._1);
                  break;
                case ASYNC:
                  status2 = PENDING;
                  step3 = runAsync(util.left, step3._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status2 = STEP_RESULT;
                        step3 = result2;
                        run3(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status2 = RETURN;
                  fail2 = util.left(step3._1);
                  step3 = null;
                  break;
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status2 = CONTINUE;
                  step3 = step3._1;
                  break;
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status2 = CONTINUE;
                  step3 = step3._1;
                  break;
                case FORK:
                  status2 = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step3._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step3._1) {
                    tmp.run();
                  }
                  step3 = util.right(tmp);
                  break;
                case SEQ:
                  status2 = CONTINUE;
                  step3 = sequential2(util, supervisor, step3._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status2 = COMPLETED;
                step3 = interrupt || fail2 || step3;
              } else {
                tmp = attempts._3;
                attempt = attempts._1;
                attempts = attempts._2;
                switch (attempt.tag) {
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status2 = RETURN;
                    } else if (fail2) {
                      status2 = CONTINUE;
                      step3 = attempt._2(util.fromLeft(fail2));
                      fail2 = null;
                    }
                    break;
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail2) {
                      status2 = RETURN;
                    } else {
                      bhead = attempt._1;
                      btail = attempt._2;
                      status2 = STEP_BIND;
                      step3 = util.fromRight(step3);
                    }
                    break;
                  case BRACKET:
                    bracketCount--;
                    if (fail2 === null) {
                      result = util.fromRight(step3);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status2 = CONTINUE;
                        step3 = attempt._3(result);
                      }
                    }
                    break;
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail2), attempts, interrupt);
                    status2 = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step3 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                    } else if (fail2) {
                      step3 = attempt._1.failed(util.fromLeft(fail2))(attempt._2);
                    } else {
                      step3 = attempt._1.completed(util.fromRight(step3))(attempt._2);
                    }
                    fail2 = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail2), attempts, interrupt);
                    status2 = CONTINUE;
                    step3 = attempt._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status2 = RETURN;
                    step3 = attempt._1;
                    fail2 = attempt._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k in joins) {
                if (joins.hasOwnProperty(k)) {
                  rethrow = rethrow && joins[k].rethrow;
                  runEff(joins[k].handler(step3));
                }
              }
              joins = null;
              if (interrupt && fail2) {
                setTimeout(function() {
                  throw util.fromLeft(fail2);
                }, 0);
              } else if (util.isLeft(step3) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step3);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status2 = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join4) {
        return function() {
          if (status2 === COMPLETED) {
            rethrow = rethrow && join4.rethrow;
            join4.handler(step3)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join4;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill(error4, cb) {
        return function() {
          if (status2 === COMPLETED) {
            cb(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb(util.right(void 0));
            }
          })();
          switch (status2) {
            case SUSPENDED:
              interrupt = util.left(error4);
              status2 = COMPLETED;
              step3 = interrupt;
              run3(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error4);
              }
              if (bracketCount === 0) {
                if (status2 === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step3(error4)), attempts, interrupt);
                }
                status2 = RETURN;
                step3 = null;
                fail2 = null;
                run3(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error4);
              }
              if (bracketCount === 0) {
                status2 = RETURN;
                step3 = null;
                fail2 = null;
              }
          }
          return canceler;
        };
      }
      function join3(cb) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status2 === SUSPENDED) {
            run3(runTick);
          }
          return canceler;
        };
      }
      return {
        kill,
        join: join3,
        onComplete,
        isSuspended: function() {
          return status2 === SUSPENDED;
        },
        run: function() {
          if (status2 === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function() {
                run3(runTick);
              });
            } else {
              run3(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root = EMPTY;
      function kill(error4, par2, cb2) {
        var step3 = par2;
        var head6 = null;
        var tail3 = null;
        var count = 0;
        var kills2 = {};
        var tmp, kid;
        loop:
          while (true) {
            tmp = null;
            switch (step3.tag) {
              case FORKED:
                if (step3._3 === EMPTY) {
                  tmp = fibers[step3._1];
                  kills2[count++] = tmp.kill(error4, function(result) {
                    return function() {
                      count--;
                      if (count === 0) {
                        cb2(result)();
                      }
                    };
                  });
                }
                if (head6 === null) {
                  break loop;
                }
                step3 = head6._2;
                if (tail3 === null) {
                  head6 = null;
                } else {
                  head6 = tail3._1;
                  tail3 = tail3._2;
                }
                break;
              case MAP:
                step3 = step3._2;
                break;
              case APPLY:
              case ALT:
                if (head6) {
                  tail3 = new Aff2(CONS, head6, tail3);
                }
                head6 = step3;
                step3 = step3._1;
                break;
            }
          }
        if (count === 0) {
          cb2(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join3(result, head6, tail3) {
        var fail2, step3, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail2 = result;
          step3 = null;
        } else {
          step3 = result;
          fail2 = null;
        }
        loop:
          while (true) {
            lhs = null;
            rhs = null;
            tmp = null;
            kid = null;
            if (interrupt !== null) {
              return;
            }
            if (head6 === null) {
              cb(fail2 || step3)();
              return;
            }
            if (head6._3 !== EMPTY) {
              return;
            }
            switch (head6.tag) {
              case MAP:
                if (fail2 === null) {
                  head6._3 = util.right(head6._1(util.fromRight(step3)));
                  step3 = head6._3;
                } else {
                  head6._3 = fail2;
                }
                break;
              case APPLY:
                lhs = head6._1._3;
                rhs = head6._2._3;
                if (fail2) {
                  head6._3 = fail2;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, fail2 === lhs ? head6._2 : head6._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join3(fail2, null, null);
                      } else {
                        join3(fail2, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                } else if (lhs === EMPTY || rhs === EMPTY) {
                  return;
                } else {
                  step3 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                  head6._3 = step3;
                }
                break;
              case ALT:
                lhs = head6._1._3;
                rhs = head6._2._3;
                if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                  return;
                }
                if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                  fail2 = step3 === lhs ? rhs : lhs;
                  step3 = null;
                  head6._3 = fail2;
                } else {
                  head6._3 = step3;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, step3 === lhs ? head6._2 : head6._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join3(step3, null, null);
                      } else {
                        join3(step3, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                }
                break;
            }
            if (tail3 === null) {
              head6 = null;
            } else {
              head6 = tail3._1;
              tail3 = tail3._2;
            }
          }
      }
      function resolve4(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join3(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run3() {
        var status2 = CONTINUE;
        var step3 = par;
        var head6 = null;
        var tail3 = null;
        var tmp, fid;
        loop:
          while (true) {
            tmp = null;
            fid = null;
            switch (status2) {
              case CONTINUE:
                switch (step3.tag) {
                  case MAP:
                    if (head6) {
                      tail3 = new Aff2(CONS, head6, tail3);
                    }
                    head6 = new Aff2(MAP, step3._1, EMPTY, EMPTY);
                    step3 = step3._2;
                    break;
                  case APPLY:
                    if (head6) {
                      tail3 = new Aff2(CONS, head6, tail3);
                    }
                    head6 = new Aff2(APPLY, EMPTY, step3._2, EMPTY);
                    step3 = step3._1;
                    break;
                  case ALT:
                    if (head6) {
                      tail3 = new Aff2(CONS, head6, tail3);
                    }
                    head6 = new Aff2(ALT, EMPTY, step3._2, EMPTY);
                    step3 = step3._1;
                    break;
                  default:
                    fid = fiberId++;
                    status2 = RETURN;
                    tmp = step3;
                    step3 = new Aff2(FORKED, fid, new Aff2(CONS, head6, tail3), EMPTY);
                    tmp = Fiber(util, supervisor, tmp);
                    tmp.onComplete({
                      rethrow: false,
                      handler: resolve4(step3)
                    })();
                    fibers[fid] = tmp;
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                }
                break;
              case RETURN:
                if (head6 === null) {
                  break loop;
                }
                if (head6._1 === EMPTY) {
                  head6._1 = step3;
                  status2 = CONTINUE;
                  step3 = head6._2;
                  head6._2 = EMPTY;
                } else {
                  head6._2 = step3;
                  step3 = head6;
                  if (tail3 === null) {
                    head6 = null;
                  } else {
                    head6 = tail3._1;
                    tail3 = tail3._2;
                  }
                }
            }
          }
        root = step3;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error4, cb2) {
        interrupt = util.left(error4);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill(error4, root, cb2);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler2;
            };
          });
        };
      }
      run3();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential2(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb) {
        return function() {
          return runPar(util, supervisor, par, cb);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler;
    Aff2.nonCanceler = nonCanceler2;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  function _catchError(aff) {
    return function(k) {
      return Aff.Catch(aff, k);
    };
  }
  function _map(f) {
    return function(aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function(value14) {
          return Aff.Pure(f(value14));
        });
      }
    };
  }
  function _bind(aff) {
    return function(k) {
      return Aff.Bind(aff, k);
    };
  }
  var _liftEffect = Aff.Sync;
  function _parAffMap(f) {
    return function(aff) {
      return Aff.ParMap(f, aff);
    };
  }
  function _parAffApply(aff1) {
    return function(aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  }
  var makeAff = Aff.Async;
  function _makeFiber(util, aff) {
    return function() {
      return Aff.Fiber(util, null, aff);
    };
  }
  var _delay = function() {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }
    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }
    return function(right2, ms) {
      return Aff.Async(function(cb) {
        return function() {
          var timer = setDelay(ms, cb(right2()));
          return function() {
            return Aff.Sync(function() {
              return right2(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
  var _sequential = Aff.Seq;

  // output/Control.Monad.Except.Trans/index.js
  var map8 = /* @__PURE__ */ map(functorEither);
  var ExceptT = function(x) {
    return x;
  };
  var runExceptT = function(v) {
    return v;
  };
  var monadTransExceptT = {
    lift: function(dictMonad) {
      var bind31 = bind(dictMonad.Bind1());
      var pure27 = pure(dictMonad.Applicative0());
      return function(m) {
        return bind31(m)(function(a2) {
          return pure27(new Right(a2));
        });
      };
    }
  };
  var mapExceptT = function(f) {
    return function(v) {
      return f(v);
    };
  };
  var functorExceptT = function(dictFunctor) {
    var map118 = map(dictFunctor);
    return {
      map: function(f) {
        return mapExceptT(map118(map8(f)));
      }
    };
  };
  var monadExceptT = function(dictMonad) {
    return {
      Applicative0: function() {
        return applicativeExceptT(dictMonad);
      },
      Bind1: function() {
        return bindExceptT(dictMonad);
      }
    };
  };
  var bindExceptT = function(dictMonad) {
    var bind31 = bind(dictMonad.Bind1());
    var pure27 = pure(dictMonad.Applicative0());
    return {
      bind: function(v) {
        return function(k) {
          return bind31(v)(either(function($187) {
            return pure27(Left.create($187));
          })(function(a2) {
            var v1 = k(a2);
            return v1;
          }));
        };
      },
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var applyExceptT = function(dictMonad) {
    var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    return {
      apply: ap(monadExceptT(dictMonad)),
      Functor0: function() {
        return functorExceptT1;
      }
    };
  };
  var applicativeExceptT = function(dictMonad) {
    return {
      pure: function() {
        var $188 = pure(dictMonad.Applicative0());
        return function($189) {
          return ExceptT($188(Right.create($189)));
        };
      }(),
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var monadThrowExceptT = function(dictMonad) {
    var monadExceptT1 = monadExceptT(dictMonad);
    return {
      throwError: function() {
        var $198 = pure(dictMonad.Applicative0());
        return function($199) {
          return ExceptT($198(Left.create($199)));
        };
      }(),
      Monad0: function() {
        return monadExceptT1;
      }
    };
  };
  var altExceptT = function(dictSemigroup) {
    var append5 = append(dictSemigroup);
    return function(dictMonad) {
      var Bind1 = dictMonad.Bind1();
      var bind31 = bind(Bind1);
      var pure27 = pure(dictMonad.Applicative0());
      var functorExceptT1 = functorExceptT(Bind1.Apply0().Functor0());
      return {
        alt: function(v) {
          return function(v1) {
            return bind31(v)(function(rm) {
              if (rm instanceof Right) {
                return pure27(new Right(rm.value0));
              }
              ;
              if (rm instanceof Left) {
                return bind31(v1)(function(rn) {
                  if (rn instanceof Right) {
                    return pure27(new Right(rn.value0));
                  }
                  ;
                  if (rn instanceof Left) {
                    return pure27(new Left(append5(rm.value0)(rn.value0)));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [rn.constructor.name]);
                });
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [rm.constructor.name]);
            });
          };
        },
        Functor0: function() {
          return functorExceptT1;
        }
      };
    };
  };

  // output/Data.Profunctor/index.js
  var profunctorFn = {
    dimap: function(a2b) {
      return function(c2d) {
        return function(b2c) {
          return function($18) {
            return c2d(b2c(a2b($18)));
          };
        };
      };
    }
  };
  var dimap = function(dict) {
    return dict.dimap;
  };

  // output/Control.Parallel.Class/index.js
  var sequential = function(dict) {
    return dict.sequential;
  };
  var parallel = function(dict) {
    return dict.parallel;
  };

  // output/Control.Parallel/index.js
  var identity9 = /* @__PURE__ */ identity(categoryFn);
  var parTraverse_ = function(dictParallel) {
    var sequential2 = sequential(dictParallel);
    var traverse_2 = traverse_(dictParallel.Applicative1());
    var parallel2 = parallel(dictParallel);
    return function(dictFoldable) {
      var traverse_1 = traverse_2(dictFoldable);
      return function(f) {
        var $48 = traverse_1(function($50) {
          return parallel2(f($50));
        });
        return function($49) {
          return sequential2($48($49));
        };
      };
    };
  };
  var parSequence_ = function(dictParallel) {
    var parTraverse_1 = parTraverse_(dictParallel);
    return function(dictFoldable) {
      return parTraverse_1(dictFoldable)(identity9);
    };
  };

  // output/Data.Time.Duration/index.js
  var show3 = /* @__PURE__ */ show(showNumber);
  var over2 = /* @__PURE__ */ over()();
  var Seconds = function(x) {
    return x;
  };
  var Milliseconds = function(x) {
    return x;
  };
  var Days = function(x) {
    return x;
  };
  var toDuration = function(dict) {
    return dict.toDuration;
  };
  var showMilliseconds = {
    show: function(v) {
      return "(Milliseconds " + (show3(v) + ")");
    }
  };
  var fromDuration = function(dict) {
    return dict.fromDuration;
  };
  var durationSeconds = {
    fromDuration: /* @__PURE__ */ over2(Seconds)(function(v) {
      return v * 1e3;
    }),
    toDuration: /* @__PURE__ */ over2(Milliseconds)(function(v) {
      return v / 1e3;
    })
  };
  var durationDays = {
    fromDuration: /* @__PURE__ */ over2(Days)(function(v) {
      return v * 864e5;
    }),
    toDuration: /* @__PURE__ */ over2(Milliseconds)(function(v) {
      return v / 864e5;
    })
  };

  // output/Partial.Unsafe/foreign.js
  var _unsafePartial = function(f) {
    return f();
  };

  // output/Partial.Unsafe/index.js
  var crashWith2 = /* @__PURE__ */ crashWith();
  var unsafePartial = _unsafePartial;
  var unsafeCrashWith = function(msg) {
    return unsafePartial(function() {
      return crashWith2(msg);
    });
  };

  // output/Effect.Aff/index.js
  var $runtime_lazy2 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var $$void3 = /* @__PURE__ */ $$void(functorEffect);
  var functorParAff = {
    map: _parAffMap
  };
  var functorAff = {
    map: _map
  };
  var ffiUtil = /* @__PURE__ */ function() {
    var unsafeFromRight = function(v) {
      if (v instanceof Right) {
        return v.value0;
      }
      ;
      if (v instanceof Left) {
        return unsafeCrashWith("unsafeFromRight: Left");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 412, column 21 - line 414, column 54): " + [v.constructor.name]);
    };
    var unsafeFromLeft = function(v) {
      if (v instanceof Left) {
        return v.value0;
      }
      ;
      if (v instanceof Right) {
        return unsafeCrashWith("unsafeFromLeft: Right");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 407, column 20 - line 409, column 55): " + [v.constructor.name]);
    };
    var isLeft = function(v) {
      if (v instanceof Left) {
        return true;
      }
      ;
      if (v instanceof Right) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 402, column 12 - line 404, column 21): " + [v.constructor.name]);
    };
    return {
      isLeft,
      fromLeft: unsafeFromLeft,
      fromRight: unsafeFromRight,
      left: Left.create,
      right: Right.create
    };
  }();
  var makeFiber = function(aff) {
    return _makeFiber(ffiUtil, aff);
  };
  var launchAff = function(aff) {
    return function __do6() {
      var fiber = makeFiber(aff)();
      fiber.run();
      return fiber;
    };
  };
  var launchAff_ = function($74) {
    return $$void3(launchAff($74));
  };
  var applyParAff = {
    apply: _parAffApply,
    Functor0: function() {
      return functorParAff;
    }
  };
  var monadAff = {
    Applicative0: function() {
      return applicativeAff;
    },
    Bind1: function() {
      return bindAff;
    }
  };
  var bindAff = {
    bind: _bind,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var applicativeAff = {
    pure: _pure,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy2("applyAff", "Effect.Aff", function() {
    return {
      apply: ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
  });
  var applyAff = /* @__PURE__ */ $lazy_applyAff(73);
  var pure22 = /* @__PURE__ */ pure(applicativeAff);
  var monadEffectAff = {
    liftEffect: _liftEffect,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadThrowAff = {
    throwError: _throwError,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadErrorAff = {
    catchError: _catchError,
    MonadThrow0: function() {
      return monadThrowAff;
    }
  };
  var parallelAff = {
    parallel: unsafeCoerce2,
    sequential: _sequential,
    Monad0: function() {
      return monadAff;
    },
    Applicative1: function() {
      return $lazy_applicativeParAff(0);
    }
  };
  var $lazy_applicativeParAff = /* @__PURE__ */ $runtime_lazy2("applicativeParAff", "Effect.Aff", function() {
    return {
      pure: function() {
        var $82 = parallel(parallelAff);
        return function($83) {
          return $82(pure22($83));
        };
      }(),
      Apply0: function() {
        return applyParAff;
      }
    };
  });
  var parSequence_2 = /* @__PURE__ */ parSequence_(parallelAff)(foldableArray);
  var semigroupCanceler = {
    append: function(v) {
      return function(v1) {
        return function(err) {
          return parSequence_2([v(err), v1(err)]);
        };
      };
    }
  };
  var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure22(unit));
  var monoidCanceler = {
    mempty: nonCanceler,
    Semigroup0: function() {
      return semigroupCanceler;
    }
  };

  // output/Foreign/foreign.js
  function typeOf(value14) {
    return typeof value14;
  }
  function tagOf(value14) {
    return Object.prototype.toString.call(value14).slice(8, -1);
  }
  function isUndefined(value14) {
    return value14 === void 0;
  }
  var isArray = Array.isArray || function(value14) {
    return Object.prototype.toString.call(value14) === "[object Array]";
  };

  // output/Data.List.NonEmpty/index.js
  var wrappedOperation = function(name16) {
    return function(f) {
      return function(v) {
        var v1 = f(new Cons(v.value0, v.value1));
        if (v1 instanceof Cons) {
          return new NonEmpty(v1.value0, v1.value1);
        }
        ;
        if (v1 instanceof Nil) {
          return unsafeCrashWith("Impossible: empty list in NonEmptyList " + name16);
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 92, column 3 - line 94, column 81): " + [v1.constructor.name]);
      };
    };
  };
  var toList2 = function(v) {
    return new Cons(v.value0, v.value1);
  };
  var sortBy3 = /* @__PURE__ */ function() {
    var $198 = wrappedOperation("sortBy");
    return function($199) {
      return $198(sortBy2($199));
    };
  }();
  var singleton6 = /* @__PURE__ */ function() {
    var $200 = singleton3(plusList);
    return function($201) {
      return NonEmptyList($200($201));
    };
  }();

  // output/Data.String.CodeUnits/foreign.js
  var length6 = function(s2) {
    return s2.length;
  };
  var _indexOf = function(just) {
    return function(nothing) {
      return function(x) {
        return function(s2) {
          var i2 = s2.indexOf(x);
          return i2 === -1 ? nothing : just(i2);
        };
      };
    };
  };
  var splitAt2 = function(i2) {
    return function(s2) {
      return { before: s2.substring(0, i2), after: s2.substring(i2) };
    };
  };

  // output/Data.String.CodeUnits/index.js
  var stripPrefix = function(v) {
    return function(str) {
      var v1 = splitAt2(length6(v))(str);
      var $20 = v1.before === v;
      if ($20) {
        return new Just(v1.after);
      }
      ;
      return Nothing.value;
    };
  };
  var indexOf = /* @__PURE__ */ function() {
    return _indexOf(Just.create)(Nothing.value);
  }();
  var contains = function(pat) {
    var $23 = indexOf(pat);
    return function($24) {
      return isJust($23($24));
    };
  };

  // output/Foreign/index.js
  var show4 = /* @__PURE__ */ show(showString);
  var show12 = /* @__PURE__ */ show(showInt);
  var ForeignError = /* @__PURE__ */ function() {
    function ForeignError2(value0) {
      this.value0 = value0;
    }
    ;
    ForeignError2.create = function(value0) {
      return new ForeignError2(value0);
    };
    return ForeignError2;
  }();
  var TypeMismatch = /* @__PURE__ */ function() {
    function TypeMismatch3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TypeMismatch3.create = function(value0) {
      return function(value1) {
        return new TypeMismatch3(value0, value1);
      };
    };
    return TypeMismatch3;
  }();
  var ErrorAtIndex = /* @__PURE__ */ function() {
    function ErrorAtIndex2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ErrorAtIndex2.create = function(value0) {
      return function(value1) {
        return new ErrorAtIndex2(value0, value1);
      };
    };
    return ErrorAtIndex2;
  }();
  var ErrorAtProperty = /* @__PURE__ */ function() {
    function ErrorAtProperty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ErrorAtProperty2.create = function(value0) {
      return function(value1) {
        return new ErrorAtProperty2(value0, value1);
      };
    };
    return ErrorAtProperty2;
  }();
  var unsafeToForeign = unsafeCoerce2;
  var unsafeFromForeign = unsafeCoerce2;
  var showForeignError = {
    show: function(v) {
      if (v instanceof ForeignError) {
        return "(ForeignError " + (show4(v.value0) + ")");
      }
      ;
      if (v instanceof ErrorAtIndex) {
        return "(ErrorAtIndex " + (show12(v.value0) + (" " + (show(showForeignError)(v.value1) + ")")));
      }
      ;
      if (v instanceof ErrorAtProperty) {
        return "(ErrorAtProperty " + (show4(v.value0) + (" " + (show(showForeignError)(v.value1) + ")")));
      }
      ;
      if (v instanceof TypeMismatch) {
        return "(TypeMismatch " + (show4(v.value0) + (" " + (show4(v.value1) + ")")));
      }
      ;
      throw new Error("Failed pattern match at Foreign (line 69, column 1 - line 73, column 89): " + [v.constructor.name]);
    }
  };
  var fail = function(dictMonad) {
    var $153 = throwError(monadThrowExceptT(dictMonad));
    return function($154) {
      return $153(singleton6($154));
    };
  };
  var unsafeReadTagged = function(dictMonad) {
    var pure114 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(tag2) {
      return function(value14) {
        if (tagOf(value14) === tag2) {
          return pure114(unsafeFromForeign(value14));
        }
        ;
        if (otherwise) {
          return fail1(new TypeMismatch(tag2, tagOf(value14)));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 123, column 1 - line 123, column 104): " + [tag2.constructor.name, value14.constructor.name]);
      };
    };
  };
  var readString = function(dictMonad) {
    return unsafeReadTagged(dictMonad)("String");
  };

  // output/Foreign.Index/foreign.js
  function unsafeReadPropImpl(f, s2, key, value14) {
    return value14 == null ? f : s2(value14[key]);
  }

  // output/Foreign.Index/index.js
  var unsafeReadProp = function(dictMonad) {
    var fail2 = fail(dictMonad);
    var pure27 = pure(applicativeExceptT(dictMonad));
    return function(k) {
      return function(value14) {
        return unsafeReadPropImpl(fail2(new TypeMismatch("object", typeOf(value14))), pure27, k, value14);
      };
    };
  };
  var readProp = function(dictMonad) {
    return unsafeReadProp(dictMonad);
  };

  // output/Heterogeneous.Folding/index.js
  var hfoldlWithIndexRowListNil = {
    hfoldlWithIndex: function(v) {
      return function(x) {
        return function(v1) {
          return x;
        };
      };
    }
  };
  var hfoldlWithIndex = function(dict) {
    return dict.hfoldlWithIndex;
  };
  var foldingWithIndex = function(dict) {
    return dict.foldingWithIndex;
  };
  var hfoldlWithIndexRowListCons = function(dictFoldingWithIndex) {
    var foldingWithIndex1 = foldingWithIndex(dictFoldingWithIndex);
    return function(dictHFoldlWithIndex) {
      var hfoldlWithIndex1 = hfoldlWithIndex(dictHFoldlWithIndex);
      return {
        hfoldlWithIndex: function(f) {
          return function(x) {
            return function(v) {
              return hfoldlWithIndex1(f)(foldingWithIndex1(f)($$Proxy.value)(x)($$Proxy.value))($$Proxy.value);
            };
          };
        }
      };
    };
  };

  // output/JS.Object/foreign.js
  function unsafeRunEffectProp(mth, obj) {
    return obj[mth];
  }
  function unsafeRunEffectMth0(mth, obj) {
    return obj[mth]();
  }

  // output/JS.Object.Generic/index.js
  var MkFFIStep = /* @__PURE__ */ function() {
    function MkFFIStep2() {
    }
    ;
    MkFFIStep2.value = new MkFFIStep2();
    return MkFFIStep2;
  }();
  var unsafeEffectMthToEffectFn3 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      mthFn: function(mthName) {
        return function(v) {
          return runEffectFn2(unsafeRunEffectMth0)(reflectSymbol2(mthName));
        };
      }
    };
  };
  var unsafeEffectMthToEffectFn4 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      mthFn: function(mthName) {
        return function(v) {
          return runEffectFn2(unsafeRunEffectProp)(reflectSymbol2(mthName));
        };
      }
    };
  };
  var mthFn = function(dict) {
    return dict.mthFn;
  };
  var foldingWithIndexMkFFIStep = function(dictIsSymbol) {
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function(dictUnsafeEffectMthToEffectFn) {
        var mthFn1 = mthFn(dictUnsafeEffectMthToEffectFn);
        return function() {
          return function() {
            return {
              foldingWithIndex: function(v) {
                return function(mthName) {
                  return function(ffi) {
                    return function(v1) {
                      return insert6(mthName)(mthFn1(mthName)($$Proxy.value))(ffi);
                    };
                  };
                };
              }
            };
          };
        };
      };
    };
  };
  var mkFFI = function() {
    return function(dictHFoldlWithIndex) {
      var hfoldlWithIndex2 = hfoldlWithIndex(dictHFoldlWithIndex);
      return function(v) {
        return hfoldlWithIndex2(MkFFIStep.value)({})($$Proxy.value);
      };
    };
  };

  // output/Control.Monad.Except/index.js
  var unwrap2 = /* @__PURE__ */ unwrap();
  var runExcept = function($3) {
    return unwrap2(runExceptT($3));
  };

  // output/Promise.Internal/foreign.js
  function thenOrCatch(k, c, p2) {
    return p2.then(k, c);
  }
  function resolve(a2) {
    return Promise.resolve(a2);
  }

  // output/Promise.Rejection/foreign.js
  function _toError(just, nothing, ref) {
    if (ref instanceof Error) {
      return just(ref);
    }
    return nothing;
  }

  // output/Promise.Rejection/index.js
  var toError = /* @__PURE__ */ function() {
    return runFn3(_toError)(Just.create)(Nothing.value);
  }();

  // output/Promise/index.js
  var thenOrCatch2 = function() {
    return function(k) {
      return function(c) {
        return function(p2) {
          return function() {
            return thenOrCatch(mkEffectFn1(k), mkEffectFn1(c), p2);
          };
        };
      };
    };
  };
  var resolve2 = function() {
    return resolve;
  };

  // output/Promise.Aff/index.js
  var voidRight2 = /* @__PURE__ */ voidRight(functorEffect);
  var mempty3 = /* @__PURE__ */ mempty(monoidCanceler);
  var thenOrCatch3 = /* @__PURE__ */ thenOrCatch2();
  var map9 = /* @__PURE__ */ map(functorEffect);
  var resolve3 = /* @__PURE__ */ resolve2();
  var alt2 = /* @__PURE__ */ alt(altMaybe);
  var map12 = /* @__PURE__ */ map(functorMaybe);
  var readString2 = /* @__PURE__ */ readString(monadIdentity);
  var bind4 = /* @__PURE__ */ bind(bindAff);
  var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var toAff$prime = function(customCoerce) {
    return function(p2) {
      return makeAff(function(cb) {
        return voidRight2(mempty3)(thenOrCatch3(function(a2) {
          return map9(resolve3)(cb(new Right(a2)));
        })(function(e2) {
          return map9(resolve3)(cb(new Left(customCoerce(e2))));
        })(p2));
      });
    };
  };
  var coerce3 = function(rej) {
    return fromMaybe$prime(function(v) {
      return error("Promise failed, couldn't extract JS Error or String");
    })(alt2(toError(rej))(map12(error)(hush(runExcept(readString2(unsafeToForeign(rej)))))));
  };
  var toAff = /* @__PURE__ */ toAff$prime(coerce3);
  var toAffE = function(f) {
    return bind4(liftEffect2(f))(toAff);
  };

  // output/Wallet/index.js
  var readProp2 = /* @__PURE__ */ readProp(monadEffect);
  var show13 = /* @__PURE__ */ show(/* @__PURE__ */ showNonEmptyList(showForeignError));
  var mkFFI2 = /* @__PURE__ */ mkFFI();
  var apiVersionIsSymbol = {
    reflectSymbol: function() {
      return "apiVersion";
    }
  };
  var enableIsSymbol = {
    reflectSymbol: function() {
      return "enable";
    }
  };
  var iconIsSymbol = {
    reflectSymbol: function() {
      return "icon";
    }
  };
  var isEnabledIsSymbol = {
    reflectSymbol: function() {
      return "isEnabled";
    }
  };
  var nameIsSymbol = {
    reflectSymbol: function() {
      return "name";
    }
  };
  var namiIsSymbol = {
    reflectSymbol: function() {
      return "nami";
    }
  };
  var yoroiIsSymbol = {
    reflectSymbol: function() {
      return "yoroi";
    }
  };
  var map10 = /* @__PURE__ */ map(functorEffect);
  var cardano = function(w) {
    return function __do6() {
      var eProp = runExceptT(readProp2("cardano")(unsafeToForeign(w)))();
      if (eProp instanceof Left) {
        return $$throw(show13(eProp.value0))();
      }
      ;
      if (eProp instanceof Right) {
        if (isUndefined(eProp.value0)) {
          return Nothing.value;
        }
        ;
        if (otherwise) {
          return new Just(unsafeFromForeign(eProp.value0));
        }
        ;
      }
      ;
      throw new Error("Failed pattern match at Wallet (line 146, column 3 - line 150, column 66): " + [eProp.constructor.name]);
    };
  };
  var _Wallet = /* @__PURE__ */ function() {
    return mkFFI2(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(apiVersionIsSymbol)()(unsafeEffectMthToEffectFn4(apiVersionIsSymbol))()())(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(enableIsSymbol)()(unsafeEffectMthToEffectFn3(enableIsSymbol))()())(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(iconIsSymbol)()(unsafeEffectMthToEffectFn4(iconIsSymbol))()())(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(isEnabledIsSymbol)()(unsafeEffectMthToEffectFn3(isEnabledIsSymbol))()())(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(nameIsSymbol)()(unsafeEffectMthToEffectFn4(nameIsSymbol))()())(hfoldlWithIndexRowListNil))))))($$Proxy.value);
  }();
  var apiVersion = /* @__PURE__ */ function() {
    return _Wallet.apiVersion;
  }();
  var icon2 = /* @__PURE__ */ function() {
    return _Wallet.icon;
  }();
  var isEnabled = function($186) {
    return toAffE(_Wallet.isEnabled($186));
  };
  var name2 = /* @__PURE__ */ function() {
    return _Wallet.name;
  }();
  var _Cardano = /* @__PURE__ */ function() {
    return mkFFI2(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(namiIsSymbol)()(unsafeEffectMthToEffectFn4(namiIsSymbol))()())(hfoldlWithIndexRowListCons(foldingWithIndexMkFFIStep(yoroiIsSymbol)()(unsafeEffectMthToEffectFn4(yoroiIsSymbol))()())(hfoldlWithIndexRowListNil)))($$Proxy.value);
  }();
  var nami = /* @__PURE__ */ function() {
    var $187 = map10(toMaybe);
    return function($188) {
      return $187(_Cardano.nami($188));
    };
  }();
  var yoroi = /* @__PURE__ */ function() {
    var $189 = map10(toMaybe);
    return function($190) {
      return $189(_Cardano.yoroi($190));
    };
  }();

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.HTML.HTMLDocument/index.js
  var toNonElementParentNode = unsafeCoerce2;
  var toDocument = unsafeCoerce2;

  // output/Web.HTML.Window/foreign.js
  function document2(window2) {
    return function() {
      return window2.document;
    };
  }

  // output/Component.ConnectWallet/index.js
  var apply5 = /* @__PURE__ */ apply(applyAff);
  var map11 = /* @__PURE__ */ map(functorAff);
  var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var bind5 = /* @__PURE__ */ bind(/* @__PURE__ */ bindReaderT(bindEffect));
  var liftEffect1 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReader(monadEffectEffect));
  var asks2 = /* @__PURE__ */ asks(/* @__PURE__ */ monadAskReaderT(monadEffect));
  var bind12 = /* @__PURE__ */ bind3(ixBindRender);
  var discard3 = /* @__PURE__ */ discard2(ixBindRender);
  var liftEffect22 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
  var pure4 = /* @__PURE__ */ pure(applicativeEffect);
  var bind32 = /* @__PURE__ */ bind(bindAff);
  var traverse3 = /* @__PURE__ */ traverse(traversableMaybe)(applicativeAff);
  var fromArray4 = /* @__PURE__ */ fromArray3()({
    reflectType: function() {
      return 1;
    }
  });
  var pure12 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var uncons4 = /* @__PURE__ */ uncons3()();
  var mapFlipped4 = /* @__PURE__ */ mapFlipped(functorArrayAL);
  var span7 = /* @__PURE__ */ span2()(toJSXArrayJSX)()();
  var img2 = /* @__PURE__ */ img();
  var NoWallets = /* @__PURE__ */ function() {
    function NoWallets2() {
    }
    ;
    NoWallets2.value = new NoWallets2();
    return NoWallets2;
  }();
  var walletInfo = function(wallet) {
    return apply5(apply5(apply5(map11(function(v) {
      return function(v1) {
        return function(v2) {
          return function(v3) {
            return {
              name: v,
              icon: v1,
              isEnabled: v2,
              apiVersion: v3,
              wallet
            };
          };
        };
      };
    })(liftEffect3(name2(wallet))))(liftEffect3(icon2(wallet))))(isEnabled(wallet)))(liftEffect3(apiVersion(wallet)));
  };
  var mkConnectWallet = /* @__PURE__ */ bind5(/* @__PURE__ */ liftEffect1(mkSingleChoiceField))(function(singleChoiceField) {
    return bind5(asks2(function(v) {
      return v.logger;
    }))(function(logger) {
      return liftEffect1(component("Wallet")(function(v) {
        return bind12(useState$prime(Nothing.value))(function(v1) {
          return bind12(useState$prime(Nothing.value))(function(v2) {
            return discard3(useEffectOnce(function __do6() {
              (function __do7() {
                var v3 = liftEffect22(bindFlipped2(cardano)(windowImpl))();
                if (v3 instanceof Nothing) {
                  return unit;
                }
                ;
                if (v3 instanceof Just) {
                  return launchAff_(bind32(bind32(liftEffect3(nami(v3.value0)))(traverse3(walletInfo)))(function(v4) {
                    return bind32(bind32(liftEffect3(yoroi(v3.value0)))(traverse3(walletInfo)))(function(yoroi2) {
                      var v5 = fromArray4($$Proxy.value)(catMaybes([v4, yoroi2]));
                      if (v5 instanceof Nothing) {
                        return liftEffect3(v.onWalletConnected(NoWallets.value));
                      }
                      ;
                      if (v5 instanceof Just) {
                        return liftEffect3(v1.value1(new Just(v5.value0)));
                      }
                      ;
                      throw new Error("Failed pattern match at Component.ConnectWallet (line 68, column 11 - line 70, column 67): " + [v5.constructor.name]);
                    });
                  }))();
                }
                ;
                throw new Error("Failed pattern match at Component.ConnectWallet (line 63, column 50 - line 70, column 67): " + [v3.constructor.name]);
              })();
              return pure4(unit);
            }))(function() {
              return pure12(function() {
                if (v1.value0 instanceof Nothing) {
                  return spinner(Nothing.value);
                }
                ;
                if (v1.value0 instanceof Just) {
                  var v3 = uncons4(v1.value0.value0);
                  var choices = mapFlipped4(v1.value0.value0)(function(wallet) {
                    return choice(wallet.name)(span7({})([img2({
                      src: wallet.icon,
                      alt: wallet.name
                    }), span_([text(wallet.name)])]));
                  });
                  return singleChoiceField({
                    initialValue: v3.head.name,
                    onValueChange: function(walletName) {
                      var v4 = find2(function(wallet) {
                        return wallet.name === walletName;
                      })(toArray2(v1.value0.value0));
                      if (v4 instanceof Nothing) {
                        return function __do6() {
                          logger("INVALID WALLET NAME")();
                          return unit;
                        };
                      }
                      ;
                      if (v4 instanceof Just) {
                        return v2.value1(new Just(v4.value0));
                      }
                      ;
                      throw new Error("Failed pattern match at Component.ConnectWallet (line 87, column 15 - line 91, column 71): " + [v4.constructor.name]);
                    },
                    type: new RadioButtonField(choices)
                  });
                }
                ;
                throw new Error("Failed pattern match at Component.ConnectWallet (line 73, column 12 - line 93, column 12): " + [v1.value0.constructor.name]);
              }());
            });
          });
        });
      }));
    });
  });

  // output/Data.Map.Internal/index.js
  var Leaf2 = /* @__PURE__ */ function() {
    function Leaf3() {
    }
    ;
    Leaf3.value = new Leaf3();
    return Leaf3;
  }();
  var Two2 = /* @__PURE__ */ function() {
    function Two3(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Two3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Two3(value0, value1, value22, value32);
          };
        };
      };
    };
    return Two3;
  }();
  var Three2 = /* @__PURE__ */ function() {
    function Three3(value0, value1, value22, value32, value42, value52, value62) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
      this.value6 = value62;
    }
    ;
    Three3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return function(value62) {
                  return new Three3(value0, value1, value22, value32, value42, value52, value62);
                };
              };
            };
          };
        };
      };
    };
    return Three3;
  }();
  var TwoLeft2 = /* @__PURE__ */ function() {
    function TwoLeft3(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    TwoLeft3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new TwoLeft3(value0, value1, value22);
        };
      };
    };
    return TwoLeft3;
  }();
  var TwoRight2 = /* @__PURE__ */ function() {
    function TwoRight3(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    TwoRight3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new TwoRight3(value0, value1, value22);
        };
      };
    };
    return TwoRight3;
  }();
  var ThreeLeft2 = /* @__PURE__ */ function() {
    function ThreeLeft3(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeLeft3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeLeft3(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeLeft3;
  }();
  var ThreeMiddle2 = /* @__PURE__ */ function() {
    function ThreeMiddle3(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeMiddle3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeMiddle3(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeMiddle3;
  }();
  var ThreeRight2 = /* @__PURE__ */ function() {
    function ThreeRight3(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeRight3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeRight3(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeRight3;
  }();
  var KickUp2 = /* @__PURE__ */ function() {
    function KickUp3(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    KickUp3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new KickUp3(value0, value1, value22, value32);
          };
        };
      };
    };
    return KickUp3;
  }();
  var lookup2 = function(dictOrd) {
    var compare9 = compare(dictOrd);
    return function(k) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Leaf2) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v instanceof Two2) {
            var v2 = compare9(k)(v.value1);
            if (v2 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value2);
            }
            ;
            if (v2 instanceof LT) {
              $copy_v = v.value0;
              return;
            }
            ;
            $copy_v = v.value3;
            return;
          }
          ;
          if (v instanceof Three2) {
            var v3 = compare9(k)(v.value1);
            if (v3 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value2);
            }
            ;
            var v4 = compare9(k)(v.value4);
            if (v4 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value5);
            }
            ;
            if (v3 instanceof LT) {
              $copy_v = v.value0;
              return;
            }
            ;
            if (v4 instanceof GT) {
              $copy_v = v.value6;
              return;
            }
            ;
            $copy_v = v.value3;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go2;
    };
  };
  var member = function(dictOrd) {
    var lookup12 = lookup2(dictOrd);
    return function(k) {
      return function(m) {
        return isJust(lookup12(k)(m));
      };
    };
  };
  var functorMap = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Leaf2) {
          return Leaf2.value;
        }
        ;
        if (v1 instanceof Two2) {
          return new Two2(map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), map(functorMap)(v)(v1.value3));
        }
        ;
        if (v1 instanceof Three2) {
          return new Three2(map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), map(functorMap)(v)(v1.value6));
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 116, column 1 - line 119, column 110): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
  var fromZipper2 = function($copy_dictOrd) {
    return function($copy_v) {
      return function($copy_v1) {
        var $tco_var_dictOrd = $copy_dictOrd;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(dictOrd, v, v1) {
          if (v instanceof Nil) {
            $tco_done = true;
            return v1;
          }
          ;
          if (v instanceof Cons) {
            if (v.value0 instanceof TwoLeft2) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_v1 = new Two2(v1, v.value0.value0, v.value0.value1, v.value0.value2);
              return;
            }
            ;
            if (v.value0 instanceof TwoRight2) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_v1 = new Two2(v.value0.value0, v.value0.value1, v.value0.value2, v1);
              return;
            }
            ;
            if (v.value0 instanceof ThreeLeft2) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_v1 = new Three2(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
              return;
            }
            ;
            if (v.value0 instanceof ThreeMiddle2) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_v1 = new Three2(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
              return;
            }
            ;
            if (v.value0 instanceof ThreeRight2) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_v1 = new Three2(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 462, column 3 - line 467, column 88): " + [v.value0.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 459, column 1 - line 459, column 80): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
  };
  var insert3 = function(dictOrd) {
    var fromZipper1 = fromZipper2(dictOrd);
    var compare9 = compare(dictOrd);
    return function(k) {
      return function(v) {
        var up = function($copy_v1) {
          return function($copy_v2) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v1, v2) {
              if (v1 instanceof Nil) {
                $tco_done = true;
                return new Two2(v2.value0, v2.value1, v2.value2, v2.value3);
              }
              ;
              if (v1 instanceof Cons) {
                if (v1.value0 instanceof TwoLeft2) {
                  $tco_done = true;
                  return fromZipper1(v1.value1)(new Three2(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                }
                ;
                if (v1.value0 instanceof TwoRight2) {
                  $tco_done = true;
                  return fromZipper1(v1.value1)(new Three2(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                }
                ;
                if (v1.value0 instanceof ThreeLeft2) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp2(new Two2(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two2(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }
                ;
                if (v1.value0 instanceof ThreeMiddle2) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp2(new Two2(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two2(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }
                ;
                if (v1.value0 instanceof ThreeRight2) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp2(new Two2(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two2(v2.value0, v2.value1, v2.value2, v2.value3));
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 498, column 5 - line 503, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 3 - line 495, column 56): " + [v1.constructor.name, v2.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_v2);
            }
            ;
            return $tco_result;
          };
        };
        var down = function($copy_v1) {
          return function($copy_v2) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(v1, v2) {
              if (v2 instanceof Leaf2) {
                $tco_done1 = true;
                return up(v1)(new KickUp2(Leaf2.value, k, v, Leaf2.value));
              }
              ;
              if (v2 instanceof Two2) {
                var v3 = compare9(k)(v2.value1);
                if (v3 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(v1)(new Two2(v2.value0, k, v, v2.value3));
                }
                ;
                if (v3 instanceof LT) {
                  $tco_var_v1 = new Cons(new TwoLeft2(v2.value1, v2.value2, v2.value3), v1);
                  $copy_v2 = v2.value0;
                  return;
                }
                ;
                $tco_var_v1 = new Cons(new TwoRight2(v2.value0, v2.value1, v2.value2), v1);
                $copy_v2 = v2.value3;
                return;
              }
              ;
              if (v2 instanceof Three2) {
                var v3 = compare9(k)(v2.value1);
                if (v3 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(v1)(new Three2(v2.value0, k, v, v2.value3, v2.value4, v2.value5, v2.value6));
                }
                ;
                var v4 = compare9(k)(v2.value4);
                if (v4 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(v1)(new Three2(v2.value0, v2.value1, v2.value2, v2.value3, k, v, v2.value6));
                }
                ;
                if (v3 instanceof LT) {
                  $tco_var_v1 = new Cons(new ThreeLeft2(v2.value1, v2.value2, v2.value3, v2.value4, v2.value5, v2.value6), v1);
                  $copy_v2 = v2.value0;
                  return;
                }
                ;
                if (v3 instanceof GT && v4 instanceof LT) {
                  $tco_var_v1 = new Cons(new ThreeMiddle2(v2.value0, v2.value1, v2.value2, v2.value4, v2.value5, v2.value6), v1);
                  $copy_v2 = v2.value3;
                  return;
                }
                ;
                $tco_var_v1 = new Cons(new ThreeRight2(v2.value0, v2.value1, v2.value2, v2.value3, v2.value4, v2.value5), v1);
                $copy_v2 = v2.value6;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 478, column 3 - line 478, column 55): " + [v1.constructor.name, v2.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_v1, $copy_v2);
            }
            ;
            return $tco_result;
          };
        };
        return down(Nil.value);
      };
    };
  };
  var foldableMap = {
    foldr: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf2) {
            return z;
          }
          ;
          if (m instanceof Two2) {
            return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(z)(m.value3)))(m.value0);
          }
          ;
          if (m instanceof Three2) {
            return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(f(m.value5)(foldr(foldableMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 133, column 17 - line 136, column 85): " + [m.constructor.name]);
        };
      };
    },
    foldl: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf2) {
            return z;
          }
          ;
          if (m instanceof Two2) {
            return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3);
          }
          ;
          if (m instanceof Three2) {
            return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 137, column 17 - line 140, column 85): " + [m.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty11 = mempty(dictMonoid);
      var append22 = append(dictMonoid.Semigroup0());
      return function(f) {
        return function(m) {
          if (m instanceof Leaf2) {
            return mempty11;
          }
          ;
          if (m instanceof Two2) {
            return append22(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append22(f(m.value2))(foldMap(foldableMap)(dictMonoid)(f)(m.value3)));
          }
          ;
          if (m instanceof Three2) {
            return append22(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append22(f(m.value2))(append22(foldMap(foldableMap)(dictMonoid)(f)(m.value3))(append22(f(m.value5))(foldMap(foldableMap)(dictMonoid)(f)(m.value6)))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 141, column 17 - line 144, column 93): " + [m.constructor.name]);
        };
      };
    }
  };
  var foldableWithIndexMap = {
    foldrWithIndex: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf2) {
            return z;
          }
          ;
          if (m instanceof Two2) {
            return foldrWithIndex(foldableWithIndexMap)(f)(f(m.value1)(m.value2)(foldrWithIndex(foldableWithIndexMap)(f)(z)(m.value3)))(m.value0);
          }
          ;
          if (m instanceof Three2) {
            return foldrWithIndex(foldableWithIndexMap)(f)(f(m.value1)(m.value2)(foldrWithIndex(foldableWithIndexMap)(f)(f(m.value4)(m.value5)(foldrWithIndex(foldableWithIndexMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 147, column 26 - line 150, column 120): " + [m.constructor.name]);
        };
      };
    },
    foldlWithIndex: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf2) {
            return z;
          }
          ;
          if (m instanceof Two2) {
            return foldlWithIndex(foldableWithIndexMap)(f)(f(m.value1)(foldlWithIndex(foldableWithIndexMap)(f)(z)(m.value0))(m.value2))(m.value3);
          }
          ;
          if (m instanceof Three2) {
            return foldlWithIndex(foldableWithIndexMap)(f)(f(m.value4)(foldlWithIndex(foldableWithIndexMap)(f)(f(m.value1)(foldlWithIndex(foldableWithIndexMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 151, column 26 - line 154, column 120): " + [m.constructor.name]);
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      var mempty11 = mempty(dictMonoid);
      var append22 = append(dictMonoid.Semigroup0());
      return function(f) {
        return function(m) {
          if (m instanceof Leaf2) {
            return mempty11;
          }
          ;
          if (m instanceof Two2) {
            return append22(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value0))(append22(f(m.value1)(m.value2))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value3)));
          }
          ;
          if (m instanceof Three2) {
            return append22(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value0))(append22(f(m.value1)(m.value2))(append22(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value3))(append22(f(m.value4)(m.value5))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value6)))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 155, column 26 - line 158, column 128): " + [m.constructor.name]);
        };
      };
    },
    Foldable0: function() {
      return foldableMap;
    }
  };
  var foldrWithIndex2 = /* @__PURE__ */ foldrWithIndex(foldableWithIndexMap);
  var keys = /* @__PURE__ */ function() {
    return foldrWithIndex2(function(k) {
      return function(v) {
        return function(acc) {
          return new Cons(k, acc);
        };
      };
    })(Nil.value);
  }();
  var empty3 = /* @__PURE__ */ function() {
    return Leaf2.value;
  }();
  var fromFoldable3 = function(dictOrd) {
    var insert12 = insert3(dictOrd);
    return function(dictFoldable) {
      return foldl(dictFoldable)(function(m) {
        return function(v) {
          return insert12(v.value0)(v.value1)(m);
        };
      })(empty3);
    };
  };

  // output/Data.Profunctor.Strong/index.js
  var identity10 = /* @__PURE__ */ identity(categoryFn);
  var strongFn = {
    first: function(a2b) {
      return function(v) {
        return new Tuple(a2b(v.value0), v.value1);
      };
    },
    second: /* @__PURE__ */ map(functorTuple),
    Profunctor0: function() {
      return profunctorFn;
    }
  };
  var second = function(dict) {
    return dict.second;
  };
  var first = function(dict) {
    return dict.first;
  };
  var splitStrong = function(dictCategory) {
    var composeFlipped3 = composeFlipped(dictCategory.Semigroupoid0());
    return function(dictStrong) {
      var first1 = first(dictStrong);
      var second1 = second(dictStrong);
      return function(l) {
        return function(r) {
          return composeFlipped3(first1(l))(second1(r));
        };
      };
    };
  };
  var fanout = function(dictCategory) {
    var identity1 = identity(dictCategory);
    var composeFlipped3 = composeFlipped(dictCategory.Semigroupoid0());
    var splitStrong1 = splitStrong(dictCategory);
    return function(dictStrong) {
      var dimap2 = dimap(dictStrong.Profunctor0());
      var splitStrong22 = splitStrong1(dictStrong);
      return function(l) {
        return function(r) {
          var split3 = dimap2(identity10)(function(a2) {
            return new Tuple(a2, a2);
          })(identity1);
          return composeFlipped3(split3)(splitStrong22(l)(r));
        };
      };
    };
  };

  // output/Contrib.Data.String/index.js
  var fromFoldable4 = /* @__PURE__ */ fromFoldable3(ordString)(foldableArray);
  var map13 = /* @__PURE__ */ map(functorArray);
  var fanout2 = /* @__PURE__ */ fanout(categoryFn)(strongFn);
  var identity11 = /* @__PURE__ */ identity(categoryFn);
  var lookup3 = /* @__PURE__ */ lookup2(ordString);
  var tryStripPrefix = function(pattern2) {
    return function(str) {
      return fromMaybe(str)(stripPrefix(pattern2)(str));
    };
  };
  var decodeEnumWith = function(dictShow) {
    var show29 = show(dictShow);
    return function(dictBoundedEnum) {
      var upFromIncluding3 = upFromIncluding(dictBoundedEnum.Enum1())(unfoldable1Array);
      var bottom4 = bottom(dictBoundedEnum.Bounded0());
      return function(adaptConstructorName) {
        var values3 = fromFoldable4(map13(fanout2(function($19) {
          return adaptConstructorName(show29($19));
        })(identity11))(upFromIncluding3(bottom4)));
        return function(v) {
          return flip(lookup3)(values3)(v);
        };
      };
    };
  };

  // output/Data.Argonaut.Core/foreign.js
  function id(x) {
    return x;
  }
  function stringify(j) {
    return JSON.stringify(j);
  }
  function _caseJson(isNull3, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null)
      return isNull3();
    else if (typeof j === "boolean")
      return isBool(j);
    else if (typeof j === "number")
      return isNum(j);
    else if (typeof j === "string")
      return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else
      return isObj(j);
  }

  // output/Foreign.Object/foreign.js
  function _copyST(m) {
    return function() {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  }
  var empty4 = {};
  function runST(f) {
    return f();
  }
  function _fmapObject(m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  }
  function _mapWithKey(m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  }
  function _foldM(bind31) {
    return function(f) {
      return function(mz) {
        return function(m) {
          var acc = mz;
          function g(k2) {
            return function(z) {
              return f(z)(k2)(m[k2]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind31(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  }
  function _lookup(no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  }
  function toArrayWithKey(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
  var keys2 = Object.keys || toArrayWithKey(function(k) {
    return function() {
      return k;
    };
  });

  // output/Foreign.Object.ST/foreign.js
  function poke2(k) {
    return function(v) {
      return function(m) {
        return function() {
          m[k] = v;
          return m;
        };
      };
    };
  }

  // output/Foreign.Object/index.js
  var foldr4 = /* @__PURE__ */ foldr(foldableArray);
  var identity12 = /* @__PURE__ */ identity(categoryFn);
  var values = /* @__PURE__ */ toArrayWithKey(function(v) {
    return function(v1) {
      return v1;
    };
  });
  var toUnfoldable3 = function(dictUnfoldable) {
    var $89 = toUnfoldable(dictUnfoldable);
    var $90 = toArrayWithKey(Tuple.create);
    return function($91) {
      return $89($90($91));
    };
  };
  var thawST = _copyST;
  var mutate = function(f) {
    return function(m) {
      return runST(function __do6() {
        var s2 = thawST(m)();
        f(s2)();
        return s2;
      });
    };
  };
  var mapWithKey = function(f) {
    return function(m) {
      return _mapWithKey(m, f);
    };
  };
  var lookup4 = /* @__PURE__ */ function() {
    return runFn4(_lookup)(Nothing.value)(Just.create);
  }();
  var insert4 = function(k) {
    return function(v) {
      return mutate(poke2(k)(v));
    };
  };
  var functorObject = {
    map: function(f) {
      return function(m) {
        return _fmapObject(m, f);
      };
    }
  };
  var functorWithIndexObject = {
    mapWithIndex: mapWithKey,
    Functor0: function() {
      return functorObject;
    }
  };
  var fromHomogeneous = function() {
    return unsafeCoerce2;
  };
  var fold2 = /* @__PURE__ */ _foldM(applyFlipped);
  var foldMap2 = function(dictMonoid) {
    var append12 = append(dictMonoid.Semigroup0());
    var mempty11 = mempty(dictMonoid);
    return function(f) {
      return fold2(function(acc) {
        return function(k) {
          return function(v) {
            return append12(acc)(f(k)(v));
          };
        };
      })(mempty11);
    };
  };
  var foldableObject = {
    foldl: function(f) {
      return fold2(function(z) {
        return function(v) {
          return f(z);
        };
      });
    },
    foldr: function(f) {
      return function(z) {
        return function(m) {
          return foldr4(f)(z)(values(m));
        };
      };
    },
    foldMap: function(dictMonoid) {
      var foldMap12 = foldMap2(dictMonoid);
      return function(f) {
        return foldMap12($$const(f));
      };
    }
  };
  var foldableWithIndexObject = {
    foldlWithIndex: function(f) {
      return fold2(flip(f));
    },
    foldrWithIndex: function(f) {
      return function(z) {
        return function(m) {
          return foldr4(uncurry(f))(z)(toArrayWithKey(Tuple.create)(m));
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      return foldMap2(dictMonoid);
    },
    Foldable0: function() {
      return foldableObject;
    }
  };
  var traversableWithIndexObject = {
    traverseWithIndex: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      var apply10 = apply(Apply0);
      var map37 = map(Apply0.Functor0());
      var pure114 = pure(dictApplicative);
      return function(f) {
        return function(ms) {
          return fold2(function(acc) {
            return function(k) {
              return function(v) {
                return apply10(map37(flip(insert4(k)))(acc))(f(k)(v));
              };
            };
          })(pure114(empty4))(ms);
        };
      };
    },
    FunctorWithIndex0: function() {
      return functorWithIndexObject;
    },
    FoldableWithIndex1: function() {
      return foldableWithIndexObject;
    },
    Traversable2: function() {
      return traversableObject;
    }
  };
  var traversableObject = {
    traverse: function(dictApplicative) {
      var $96 = traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function($97) {
        return $96($$const($97));
      };
    },
    sequence: function(dictApplicative) {
      return traverse(traversableObject)(dictApplicative)(identity12);
    },
    Functor0: function() {
      return functorObject;
    },
    Foldable1: function() {
      return foldableObject;
    }
  };

  // output/Data.Argonaut.Core/index.js
  var verbJsonType = function(def) {
    return function(f) {
      return function(g) {
        return g(def)(f);
      };
    };
  };
  var toJsonType = /* @__PURE__ */ function() {
    return verbJsonType(Nothing.value)(Just.create);
  }();
  var isJsonType = /* @__PURE__ */ verbJsonType(false)(/* @__PURE__ */ $$const(true));
  var caseJsonString = function(d) {
    return function(f) {
      return function(j) {
        return _caseJson($$const(d), $$const(d), $$const(d), f, $$const(d), $$const(d), j);
      };
    };
  };
  var caseJsonObject = function(d) {
    return function(f) {
      return function(j) {
        return _caseJson($$const(d), $$const(d), $$const(d), $$const(d), $$const(d), f, j);
      };
    };
  };
  var toObject = /* @__PURE__ */ toJsonType(caseJsonObject);
  var caseJsonNumber = function(d) {
    return function(f) {
      return function(j) {
        return _caseJson($$const(d), $$const(d), f, $$const(d), $$const(d), $$const(d), j);
      };
    };
  };
  var caseJsonNull = function(d) {
    return function(f) {
      return function(j) {
        return _caseJson(f, $$const(d), $$const(d), $$const(d), $$const(d), $$const(d), j);
      };
    };
  };
  var isNull2 = /* @__PURE__ */ isJsonType(caseJsonNull);
  var caseJsonBoolean = function(d) {
    return function(f) {
      return function(j) {
        return _caseJson($$const(d), f, $$const(d), $$const(d), $$const(d), $$const(d), j);
      };
    };
  };
  var caseJsonArray = function(d) {
    return function(f) {
      return function(j) {
        return _caseJson($$const(d), $$const(d), $$const(d), $$const(d), f, $$const(d), j);
      };
    };
  };
  var toArray3 = /* @__PURE__ */ toJsonType(caseJsonArray);

  // output/Data.Argonaut.Decode.Error/index.js
  var show5 = /* @__PURE__ */ show(showString);
  var show14 = /* @__PURE__ */ show(showInt);
  var TypeMismatch2 = /* @__PURE__ */ function() {
    function TypeMismatch3(value0) {
      this.value0 = value0;
    }
    ;
    TypeMismatch3.create = function(value0) {
      return new TypeMismatch3(value0);
    };
    return TypeMismatch3;
  }();
  var UnexpectedValue = /* @__PURE__ */ function() {
    function UnexpectedValue2(value0) {
      this.value0 = value0;
    }
    ;
    UnexpectedValue2.create = function(value0) {
      return new UnexpectedValue2(value0);
    };
    return UnexpectedValue2;
  }();
  var AtIndex = /* @__PURE__ */ function() {
    function AtIndex2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AtIndex2.create = function(value0) {
      return function(value1) {
        return new AtIndex2(value0, value1);
      };
    };
    return AtIndex2;
  }();
  var AtKey = /* @__PURE__ */ function() {
    function AtKey2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AtKey2.create = function(value0) {
      return function(value1) {
        return new AtKey2(value0, value1);
      };
    };
    return AtKey2;
  }();
  var Named = /* @__PURE__ */ function() {
    function Named2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Named2.create = function(value0) {
      return function(value1) {
        return new Named2(value0, value1);
      };
    };
    return Named2;
  }();
  var MissingValue = /* @__PURE__ */ function() {
    function MissingValue2() {
    }
    ;
    MissingValue2.value = new MissingValue2();
    return MissingValue2;
  }();
  var showJsonDecodeError = {
    show: function(v) {
      if (v instanceof TypeMismatch2) {
        return "(TypeMismatch " + (show5(v.value0) + ")");
      }
      ;
      if (v instanceof UnexpectedValue) {
        return "(UnexpectedValue " + (stringify(v.value0) + ")");
      }
      ;
      if (v instanceof AtIndex) {
        return "(AtIndex " + (show14(v.value0) + (" " + (show(showJsonDecodeError)(v.value1) + ")")));
      }
      ;
      if (v instanceof AtKey) {
        return "(AtKey " + (show5(v.value0) + (" " + (show(showJsonDecodeError)(v.value1) + ")")));
      }
      ;
      if (v instanceof Named) {
        return "(Named " + (show5(v.value0) + (" " + (show(showJsonDecodeError)(v.value1) + ")")));
      }
      ;
      if (v instanceof MissingValue) {
        return "MissingValue";
      }
      ;
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [v.constructor.name]);
    }
  };

  // output/Contrib.Data.Argonaut/index.js
  var decodeFromString = function(decode2) {
    return function(json3) {
      var decode$prime = function(str) {
        var err = new TypeMismatch2("Unexpected constructor name:" + str);
        return note(err)(decode2(str));
      };
      return caseJsonString(new Left(new TypeMismatch2("Unexpected json value: " + stringify(json3))))(decode$prime)(json3);
    };
  };
  var decodeJsonEnumWith = function(dictShow) {
    var decodeEnumWith2 = decodeEnumWith(dictShow);
    return function(dictBoundedEnum) {
      var decodeEnumWith1 = decodeEnumWith2(dictBoundedEnum);
      return function(adaptConstructorName) {
        return decodeFromString(decodeEnumWith1(adaptConstructorName));
      };
    };
  };

  // output/Contrib.Record.BuilderT/index.js
  var map14 = /* @__PURE__ */ map(functorTuple);
  var splitStrong2 = /* @__PURE__ */ splitStrong(categoryFn)(strongFn);
  var lmap2 = /* @__PURE__ */ lmap(bifunctorTuple);
  var composeFlipped2 = /* @__PURE__ */ composeFlipped(semigroupoidFn);
  var un2 = /* @__PURE__ */ un();
  var identity13 = /* @__PURE__ */ identity(categoryFn);
  var BuilderT = function(x) {
    return x;
  };
  var ixFunctorBuilderT = function(dictFunctor) {
    var map118 = map(dictFunctor);
    return {
      imap: function(f) {
        return function(v) {
          return map118(map14(f))(v);
        };
      }
    };
  };
  var ixApplyBuilderT = function(dictApply) {
    var apply10 = apply(dictApply);
    var Functor0 = dictApply.Functor0();
    var map118 = map(Functor0);
    var ixFunctorBuilderT1 = ixFunctorBuilderT(Functor0);
    return {
      iapply: function(v) {
        return function(v1) {
          return apply10(map118(function() {
            var $77 = uncurry(splitStrong2);
            var $78 = lmap2(composeFlipped2);
            return function($79) {
              return $77($78($79));
            };
          }())(v))(v1);
        };
      },
      IxFunctor0: function() {
        return ixFunctorBuilderT1;
      }
    };
  };
  var ixBindBuilderT = function(dictApplicative) {
    var pure27 = pure(dictApplicative);
    var ixApplyBuilderT1 = ixApplyBuilderT(dictApplicative.Apply0());
    return function(dictBind) {
      var bind31 = bind(dictBind);
      return {
        ibind: function(v) {
          return function(f) {
            return bind31(v)(function(v1) {
              return bind31(un2(BuilderT)(f(v1.value1)))(function(v2) {
                return pure27(new Tuple(function($80) {
                  return v2.value0(v1.value0($80));
                }, v2.value1));
              });
            });
          };
        },
        IxApply0: function() {
          return ixApplyBuilderT1;
        }
      };
    };
  };
  var ixApplicativeBuilderT = function(dictApplicative) {
    var pure27 = pure(dictApplicative);
    var ixApplyBuilderT1 = ixApplyBuilderT(dictApplicative.Apply0());
    return {
      ipure: function(a2) {
        return pure27(new Tuple(identity13, a2));
      },
      IxApply0: function() {
        return ixApplyBuilderT1;
      }
    };
  };
  var ixMonadBuilderT = function(dictMonad) {
    var Applicative0 = dictMonad.Applicative0();
    var ixApplicativeBuilderT1 = ixApplicativeBuilderT(Applicative0);
    var ixBindBuilderT1 = ixBindBuilderT(Applicative0)(dictMonad.Bind1());
    return {
      IxApplicative0: function() {
        return ixApplicativeBuilderT1;
      },
      IxBind1: function() {
        return ixBindBuilderT1;
      }
    };
  };
  var functorBuilderT = function(dictFunctor) {
    var map118 = map(dictFunctor);
    return {
      map: function(f) {
        return function(v) {
          return map118(map14(f))(v);
        };
      }
    };
  };
  var altBuilderT = function(dictAlt) {
    var alt10 = alt(dictAlt);
    var functorBuilderT1 = functorBuilderT(dictAlt.Functor0());
    return {
      alt: function(v) {
        return function(v1) {
          return alt10(v)(v1);
        };
      },
      Functor0: function() {
        return functorBuilderT1;
      }
    };
  };
  var execBuilderT = function(dictApplicative) {
    var map118 = map(dictApplicative.Apply0().Functor0());
    return function(v) {
      return function(i2) {
        return map118(function() {
          var $81 = applyFlipped(i2);
          return function($82) {
            return $81(fst($82));
          };
        }())(v);
      };
    };
  };

  // output/Control.Monad.Indexed.Qualified/index.js
  var discard4 = function(dictIxBind) {
    return function(dictIxDiscard) {
      return idiscard(dictIxDiscard)(dictIxBind);
    };
  };
  var bind6 = function(dictIxMonad) {
    return ibind(dictIxMonad.IxBind1());
  };

  // output/Data.Set/index.js
  var $$Set = function(x) {
    return x;
  };
  var toList3 = function(v) {
    return keys(v);
  };
  var toUnfoldable4 = function(dictUnfoldable) {
    var $127 = toUnfoldable2(dictUnfoldable);
    return function($128) {
      return $127(toList3($128));
    };
  };
  var toUnfoldable1 = /* @__PURE__ */ toUnfoldable4(unfoldableArray);
  var showSet = function(dictShow) {
    var show29 = show(showArray(dictShow));
    return {
      show: function(s2) {
        return "(fromFoldable " + (show29(toUnfoldable1(s2)) + ")");
      }
    };
  };
  var fromMap = $$Set;

  // output/Data.String.CodePoints/foreign.js
  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  // output/Data.String.Common/foreign.js
  var split = function(sep) {
    return function(s2) {
      return s2.split(sep);
    };
  };
  var toLower = function(s2) {
    return s2.toLowerCase();
  };
  var joinWith = function(s2) {
    return function(xs) {
      return xs.join(s2);
    };
  };

  // output/Data.Argonaut.Decode.Decoders/index.js
  var pure5 = /* @__PURE__ */ pure(applicativeEither);
  var map15 = /* @__PURE__ */ map(functorEither);
  var lmap3 = /* @__PURE__ */ lmap(bifunctorEither);
  var composeKleisliFlipped2 = /* @__PURE__ */ composeKleisliFlipped(bindEither);
  var traverse5 = /* @__PURE__ */ traverse(traversableObject)(applicativeEither);
  var traverseWithIndex2 = /* @__PURE__ */ traverseWithIndex(traversableWithIndexArray)(applicativeEither);
  var getFieldOptional$prime = function(decoder) {
    return function(obj) {
      return function(str) {
        var decode2 = function(json3) {
          var $35 = isNull2(json3);
          if ($35) {
            return pure5(Nothing.value);
          }
          ;
          return map15(Just.create)(lmap3(AtKey.create(str))(decoder(json3)));
        };
        return maybe(pure5(Nothing.value))(decode2)(lookup4(str)(obj));
      };
    };
  };
  var getFieldOptional = function(decoder) {
    return function(obj) {
      return function(str) {
        var decode2 = function() {
          var $44 = lmap3(AtKey.create(str));
          return function($45) {
            return $44(decoder($45));
          };
        }();
        return maybe(pure5(Nothing.value))(function() {
          var $46 = map15(Just.create);
          return function($47) {
            return $46(decode2($47));
          };
        }())(lookup4(str)(obj));
      };
    };
  };
  var getField = function(decoder) {
    return function(obj) {
      return function(str) {
        return maybe(new Left(new AtKey(str, MissingValue.value)))(function() {
          var $48 = lmap3(AtKey.create(str));
          return function($49) {
            return $48(decoder($49));
          };
        }())(lookup4(str)(obj));
      };
    };
  };
  var decodeString = /* @__PURE__ */ function() {
    return caseJsonString(new Left(new TypeMismatch2("String")))(Right.create);
  }();
  var decodeNumber = /* @__PURE__ */ function() {
    return caseJsonNumber(new Left(new TypeMismatch2("Number")))(Right.create);
  }();
  var decodeMaybe = function(decoder) {
    return function(json3) {
      if (isNull2(json3)) {
        return pure5(Nothing.value);
      }
      ;
      if (otherwise) {
        return map15(Just.create)(decoder(json3));
      }
      ;
      throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 37, column 1 - line 41, column 38): " + [decoder.constructor.name, json3.constructor.name]);
    };
  };
  var decodeJObject = /* @__PURE__ */ function() {
    var $50 = note(new TypeMismatch2("Object"));
    return function($51) {
      return $50(toObject($51));
    };
  }();
  var decodeJArray = /* @__PURE__ */ function() {
    var $52 = note(new TypeMismatch2("Array"));
    return function($53) {
      return $52(toArray3($53));
    };
  }();
  var decodeInt = /* @__PURE__ */ composeKleisliFlipped2(/* @__PURE__ */ function() {
    var $84 = note(new TypeMismatch2("Integer"));
    return function($85) {
      return $84(fromNumber($85));
    };
  }())(decodeNumber);
  var decodeForeignObject = function(decoder) {
    return composeKleisliFlipped2(function() {
      var $86 = lmap3(Named.create("ForeignObject"));
      var $87 = traverse5(decoder);
      return function($88) {
        return $86($87($88));
      };
    }())(decodeJObject);
  };
  var decodeBoolean = /* @__PURE__ */ function() {
    return caseJsonBoolean(new Left(new TypeMismatch2("Boolean")))(Right.create);
  }();
  var decodeArray = function(decoder) {
    return composeKleisliFlipped2(function() {
      var $89 = lmap3(Named.create("Array"));
      var $90 = traverseWithIndex2(function(i2) {
        var $92 = lmap3(AtIndex.create(i2));
        return function($93) {
          return $92(decoder($93));
        };
      });
      return function($91) {
        return $89($90($91));
      };
    }())(decodeJArray);
  };

  // output/Data.Argonaut.Decode.Class/index.js
  var bind7 = /* @__PURE__ */ bind(bindEither);
  var lmap4 = /* @__PURE__ */ lmap(bifunctorEither);
  var map16 = /* @__PURE__ */ map(functorMaybe);
  var gDecodeJsonNil = {
    gDecodeJson: function(v) {
      return function(v1) {
        return new Right({});
      };
    }
  };
  var gDecodeJson = function(dict) {
    return dict.gDecodeJson;
  };
  var decodeRecord = function(dictGDecodeJson) {
    var gDecodeJson1 = gDecodeJson(dictGDecodeJson);
    return function() {
      return {
        decodeJson: function(json3) {
          var v = toObject(json3);
          if (v instanceof Just) {
            return gDecodeJson1(v.value0)($$Proxy.value);
          }
          ;
          if (v instanceof Nothing) {
            return new Left(new TypeMismatch2("Object"));
          }
          ;
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 103, column 5 - line 105, column 46): " + [v.constructor.name]);
        }
      };
    };
  };
  var decodeJsonString = {
    decodeJson: decodeString
  };
  var decodeJsonJson = /* @__PURE__ */ function() {
    return {
      decodeJson: Right.create
    };
  }();
  var decodeJsonInt = {
    decodeJson: decodeInt
  };
  var decodeJsonField = function(dict) {
    return dict.decodeJsonField;
  };
  var gDecodeJsonCons = function(dictDecodeJsonField) {
    var decodeJsonField1 = decodeJsonField(dictDecodeJsonField);
    return function(dictGDecodeJson) {
      var gDecodeJson1 = gDecodeJson(dictGDecodeJson);
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        var insert6 = insert(dictIsSymbol)()();
        return function() {
          return function() {
            return {
              gDecodeJson: function(object3) {
                return function(v) {
                  var fieldName = reflectSymbol2($$Proxy.value);
                  var fieldValue = lookup4(fieldName)(object3);
                  var v1 = decodeJsonField1(fieldValue);
                  if (v1 instanceof Just) {
                    return bind7(lmap4(AtKey.create(fieldName))(v1.value0))(function(val) {
                      return bind7(gDecodeJson1(object3)($$Proxy.value))(function(rest) {
                        return new Right(insert6($$Proxy.value)(val)(rest));
                      });
                    });
                  }
                  ;
                  if (v1 instanceof Nothing) {
                    return new Left(new AtKey(fieldName, MissingValue.value));
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 127, column 5 - line 134, column 44): " + [v1.constructor.name]);
                };
              }
            };
          };
        };
      };
    };
  };
  var decodeJsonBoolean = {
    decodeJson: decodeBoolean
  };
  var decodeJson = function(dict) {
    return dict.decodeJson;
  };
  var decodeJsonMaybe = function(dictDecodeJson) {
    return {
      decodeJson: decodeMaybe(decodeJson(dictDecodeJson))
    };
  };
  var decodeForeignObject2 = function(dictDecodeJson) {
    return {
      decodeJson: decodeForeignObject(decodeJson(dictDecodeJson))
    };
  };
  var decodeFieldMaybe = function(dictDecodeJson) {
    var decodeJson111 = decodeJson(decodeJsonMaybe(dictDecodeJson));
    return {
      decodeJsonField: function(v) {
        if (v instanceof Nothing) {
          return new Just(new Right(Nothing.value));
        }
        ;
        if (v instanceof Just) {
          return new Just(decodeJson111(v.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 139, column 1 - line 143, column 49): " + [v.constructor.name]);
      }
    };
  };
  var decodeFieldId = function(dictDecodeJson) {
    var decodeJson111 = decodeJson(dictDecodeJson);
    return {
      decodeJsonField: function(j) {
        return map16(decodeJson111)(j);
      }
    };
  };
  var decodeArray2 = function(dictDecodeJson) {
    return {
      decodeJson: decodeArray(decodeJson(dictDecodeJson))
    };
  };

  // output/Data.Argonaut.Decode.Combinators/index.js
  var getFieldOptional$prime2 = function(dictDecodeJson) {
    return getFieldOptional$prime(decodeJson(dictDecodeJson));
  };
  var getFieldOptional2 = function(dictDecodeJson) {
    return getFieldOptional(decodeJson(dictDecodeJson));
  };
  var getField2 = function(dictDecodeJson) {
    return getField(decodeJson(dictDecodeJson));
  };

  // output/Contrib.Data.Argonaut.Decode.Record.Field/index.js
  var bind8 = /* @__PURE__ */ bind(/* @__PURE__ */ bindReaderT(bindEither));
  var lift5 = /* @__PURE__ */ lift(monadTransReaderT)(monadEither);
  var applicativeReaderT2 = /* @__PURE__ */ applicativeReaderT(applicativeEither);
  var pure6 = /* @__PURE__ */ pure(applicativeReaderT2);
  var identity14 = /* @__PURE__ */ identity(categoryFn);
  var bind13 = /* @__PURE__ */ bind(bindEither);
  var decodeJson2 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeForeignObject2(decodeJsonJson));
  var execBuilderT2 = /* @__PURE__ */ execBuilderT(applicativeReaderT2);
  var ask2 = /* @__PURE__ */ ask(/* @__PURE__ */ monadAskReaderT(monadEither));
  var getFieldOptional3 = /* @__PURE__ */ getFieldOptional2(decodeJsonJson);
  var lmap5 = /* @__PURE__ */ lmap(bifunctorEither);
  var pure13 = /* @__PURE__ */ pure(applicativeEither);
  var getFieldOptional$prime3 = /* @__PURE__ */ getFieldOptional$prime2(decodeJsonJson);
  var $$for2 = /* @__PURE__ */ $$for(applicativeEither)(traversableMaybe);
  var getField3 = /* @__PURE__ */ getField2(decodeJsonJson);
  var liftEither = function(v) {
    return bind8(lift5(v))(function(v$prime) {
      return pure6(new Tuple(identity14, v$prime));
    });
  };
  var insertProp = function(dictIsSymbol) {
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function(l) {
          return function(a2) {
            return pure6(new Tuple(insert6(l)(a2), unit));
          };
        };
      };
    };
  };
  var execRecordBuilderM = function(json3) {
    return function(builder) {
      return bind13(decodeJson2(json3))(function(obj) {
        return runReaderT(execBuilderT2(builder)({}))(obj);
      });
    };
  };
  var decodeFieldOptionalDefault = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function(l) {
          return function(decode2) {
            return function($$default) {
              return bind8(ask2)(function(obj) {
                var l$prime = reflectSymbol2(l);
                return bind8(lift5(getFieldOptional3(obj)(l$prime)))(function(json3) {
                  return bind8(lift5(lmap5(AtKey.create(l$prime))(maybe(pure13($$default))(decode2)(json3))))(function(v) {
                    return pure6(new Tuple(insert6(l)(new Just(v)), unit));
                  });
                });
              });
            };
          };
        };
      };
    };
  };
  var decodeFieldOptional = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function(l) {
          return function(decode2) {
            return bind8(ask2)(function(obj) {
              var l$prime = reflectSymbol2(l);
              return bind8(lift5(getFieldOptional$prime3(obj)(l$prime)))(function(json3) {
                return bind8(lift5(lmap5(AtKey.create(l$prime))($$for2(json3)(decode2))))(function(v) {
                  return pure6(new Tuple(insert6(l)(v), unit));
                });
              });
            });
          };
        };
      };
    };
  };
  var decodeFieldDefault = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function(l) {
          return function(decode2) {
            return function($$default) {
              return bind8(ask2)(function(obj) {
                var l$prime = reflectSymbol2(l);
                return bind8(lift5(getFieldOptional3(obj)(l$prime)))(function(json3) {
                  return bind8(lift5(lmap5(AtKey.create(l$prime))(maybe(pure13($$default))(decode2)(json3))))(function(v) {
                    return pure6(new Tuple(insert6(l)(v), unit));
                  });
                });
              });
            };
          };
        };
      };
    };
  };
  var decodeField = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function(l) {
          return function(decode2) {
            return bind8(ask2)(function(obj) {
              return bind8(lift5(getField3(obj)(reflectSymbol2(l))))(function(json3) {
                return bind8(lift5(decode2(json3)))(function(v) {
                  return pure6(new Tuple(insert6(l)(v), unit));
                });
              });
            });
          };
        };
      };
    };
  };
  var askObject = /* @__PURE__ */ bind8(ask2)(function(obj) {
    return pure6(new Tuple(identity14, obj));
  });
  var askField = function(fieldName) {
    return bind8(ask2)(function(obj) {
      return lift5(getField(function(json3) {
        return pure13(new Tuple(identity14, json3));
      })(obj)(fieldName));
    });
  };

  // output/Data.Bounded.Generic/index.js
  var genericTopNoArguments = /* @__PURE__ */ function() {
    return {
      "genericTop'": NoArguments.value
    };
  }();
  var genericTop$prime = function(dict) {
    return dict["genericTop'"];
  };
  var genericTopConstructor = function(dictGenericTop) {
    return {
      "genericTop'": genericTop$prime(dictGenericTop)
    };
  };
  var genericTopSum = function(dictGenericTop) {
    return {
      "genericTop'": new Inr(genericTop$prime(dictGenericTop))
    };
  };
  var genericTop = function(dictGeneric) {
    var to3 = to(dictGeneric);
    return function(dictGenericTop) {
      return to3(genericTop$prime(dictGenericTop));
    };
  };
  var genericBottomNoArguments = /* @__PURE__ */ function() {
    return {
      "genericBottom'": NoArguments.value
    };
  }();
  var genericBottom$prime = function(dict) {
    return dict["genericBottom'"];
  };
  var genericBottomConstructor = function(dictGenericBottom) {
    return {
      "genericBottom'": genericBottom$prime(dictGenericBottom)
    };
  };
  var genericBottomSum = function(dictGenericBottom) {
    return {
      "genericBottom'": new Inl(genericBottom$prime(dictGenericBottom))
    };
  };
  var genericBottom = function(dictGeneric) {
    var to3 = to(dictGeneric);
    return function(dictGenericBottom) {
      return to3(genericBottom$prime(dictGenericBottom));
    };
  };

  // output/Data.DateTime/foreign.js
  var createUTC = function(y, mo, d, h, m, s2, ms) {
    var date2 = new Date(Date.UTC(y, mo, d, h, m, s2, ms));
    if (y >= 0 && y < 100) {
      date2.setUTCFullYear(y);
    }
    return date2.getTime();
  };
  function adjustImpl(just) {
    return function(nothing) {
      return function(offset) {
        return function(rec) {
          var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
          var dt2 = new Date(msUTC + offset);
          return isNaN(dt2.getTime()) ? nothing : just({
            year: dt2.getUTCFullYear(),
            month: dt2.getUTCMonth() + 1,
            day: dt2.getUTCDate(),
            hour: dt2.getUTCHours(),
            minute: dt2.getUTCMinutes(),
            second: dt2.getUTCSeconds(),
            millisecond: dt2.getUTCMilliseconds()
          });
        };
      };
    };
  }

  // output/Data.Date/foreign.js
  var createDate = function(y, m, d) {
    var date2 = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date2.setUTCFullYear(y);
    }
    return date2;
  };
  function canonicalDateImpl(ctor, y, m, d) {
    var date2 = createDate(y, m - 1, d);
    return ctor(date2.getUTCFullYear())(date2.getUTCMonth() + 1)(date2.getUTCDate());
  }
  function calcWeekday(y, m, d) {
    return createDate(y, m - 1, d).getUTCDay();
  }
  function calcDiff(y1, m1, d1, y2, m2, d2) {
    var dt1 = createDate(y1, m1 - 1, d1);
    var dt2 = createDate(y2, m2 - 1, d2);
    return dt1.getTime() - dt2.getTime();
  }

  // output/Data.Date.Component/index.js
  var $runtime_lazy3 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var show6 = /* @__PURE__ */ show(showInt);
  var Monday = /* @__PURE__ */ function() {
    function Monday2() {
    }
    ;
    Monday2.value = new Monday2();
    return Monday2;
  }();
  var Tuesday = /* @__PURE__ */ function() {
    function Tuesday2() {
    }
    ;
    Tuesday2.value = new Tuesday2();
    return Tuesday2;
  }();
  var Wednesday = /* @__PURE__ */ function() {
    function Wednesday2() {
    }
    ;
    Wednesday2.value = new Wednesday2();
    return Wednesday2;
  }();
  var Thursday = /* @__PURE__ */ function() {
    function Thursday2() {
    }
    ;
    Thursday2.value = new Thursday2();
    return Thursday2;
  }();
  var Friday = /* @__PURE__ */ function() {
    function Friday2() {
    }
    ;
    Friday2.value = new Friday2();
    return Friday2;
  }();
  var Saturday = /* @__PURE__ */ function() {
    function Saturday2() {
    }
    ;
    Saturday2.value = new Saturday2();
    return Saturday2;
  }();
  var Sunday = /* @__PURE__ */ function() {
    function Sunday2() {
    }
    ;
    Sunday2.value = new Sunday2();
    return Sunday2;
  }();
  var January = /* @__PURE__ */ function() {
    function January2() {
    }
    ;
    January2.value = new January2();
    return January2;
  }();
  var February = /* @__PURE__ */ function() {
    function February2() {
    }
    ;
    February2.value = new February2();
    return February2;
  }();
  var March = /* @__PURE__ */ function() {
    function March2() {
    }
    ;
    March2.value = new March2();
    return March2;
  }();
  var April = /* @__PURE__ */ function() {
    function April2() {
    }
    ;
    April2.value = new April2();
    return April2;
  }();
  var May = /* @__PURE__ */ function() {
    function May2() {
    }
    ;
    May2.value = new May2();
    return May2;
  }();
  var June = /* @__PURE__ */ function() {
    function June2() {
    }
    ;
    June2.value = new June2();
    return June2;
  }();
  var July = /* @__PURE__ */ function() {
    function July2() {
    }
    ;
    July2.value = new July2();
    return July2;
  }();
  var August = /* @__PURE__ */ function() {
    function August2() {
    }
    ;
    August2.value = new August2();
    return August2;
  }();
  var September = /* @__PURE__ */ function() {
    function September2() {
    }
    ;
    September2.value = new September2();
    return September2;
  }();
  var October = /* @__PURE__ */ function() {
    function October2() {
    }
    ;
    October2.value = new October2();
    return October2;
  }();
  var November = /* @__PURE__ */ function() {
    function November2() {
    }
    ;
    November2.value = new November2();
    return November2;
  }();
  var December = /* @__PURE__ */ function() {
    function December2() {
    }
    ;
    December2.value = new December2();
    return December2;
  }();
  var showYear = {
    show: function(v) {
      return "(Year " + (show6(v) + ")");
    }
  };
  var showMonth = {
    show: function(v) {
      if (v instanceof January) {
        return "January";
      }
      ;
      if (v instanceof February) {
        return "February";
      }
      ;
      if (v instanceof March) {
        return "March";
      }
      ;
      if (v instanceof April) {
        return "April";
      }
      ;
      if (v instanceof May) {
        return "May";
      }
      ;
      if (v instanceof June) {
        return "June";
      }
      ;
      if (v instanceof July) {
        return "July";
      }
      ;
      if (v instanceof August) {
        return "August";
      }
      ;
      if (v instanceof September) {
        return "September";
      }
      ;
      if (v instanceof October) {
        return "October";
      }
      ;
      if (v instanceof November) {
        return "November";
      }
      ;
      if (v instanceof December) {
        return "December";
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [v.constructor.name]);
    }
  };
  var showDay = {
    show: function(v) {
      return "(Day " + (show6(v) + ")");
    }
  };
  var ordYear = ordInt;
  var ordDay = ordInt;
  var eqYear = eqInt;
  var eqWeekday = {
    eq: function(x) {
      return function(y) {
        if (x instanceof Monday && y instanceof Monday) {
          return true;
        }
        ;
        if (x instanceof Tuesday && y instanceof Tuesday) {
          return true;
        }
        ;
        if (x instanceof Wednesday && y instanceof Wednesday) {
          return true;
        }
        ;
        if (x instanceof Thursday && y instanceof Thursday) {
          return true;
        }
        ;
        if (x instanceof Friday && y instanceof Friday) {
          return true;
        }
        ;
        if (x instanceof Saturday && y instanceof Saturday) {
          return true;
        }
        ;
        if (x instanceof Sunday && y instanceof Sunday) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordWeekday = {
    compare: function(x) {
      return function(y) {
        if (x instanceof Monday && y instanceof Monday) {
          return EQ.value;
        }
        ;
        if (x instanceof Monday) {
          return LT.value;
        }
        ;
        if (y instanceof Monday) {
          return GT.value;
        }
        ;
        if (x instanceof Tuesday && y instanceof Tuesday) {
          return EQ.value;
        }
        ;
        if (x instanceof Tuesday) {
          return LT.value;
        }
        ;
        if (y instanceof Tuesday) {
          return GT.value;
        }
        ;
        if (x instanceof Wednesday && y instanceof Wednesday) {
          return EQ.value;
        }
        ;
        if (x instanceof Wednesday) {
          return LT.value;
        }
        ;
        if (y instanceof Wednesday) {
          return GT.value;
        }
        ;
        if (x instanceof Thursday && y instanceof Thursday) {
          return EQ.value;
        }
        ;
        if (x instanceof Thursday) {
          return LT.value;
        }
        ;
        if (y instanceof Thursday) {
          return GT.value;
        }
        ;
        if (x instanceof Friday && y instanceof Friday) {
          return EQ.value;
        }
        ;
        if (x instanceof Friday) {
          return LT.value;
        }
        ;
        if (y instanceof Friday) {
          return GT.value;
        }
        ;
        if (x instanceof Saturday && y instanceof Saturday) {
          return EQ.value;
        }
        ;
        if (x instanceof Saturday) {
          return LT.value;
        }
        ;
        if (y instanceof Saturday) {
          return GT.value;
        }
        ;
        if (x instanceof Sunday && y instanceof Sunday) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqWeekday;
    }
  };
  var eqMonth = {
    eq: function(x) {
      return function(y) {
        if (x instanceof January && y instanceof January) {
          return true;
        }
        ;
        if (x instanceof February && y instanceof February) {
          return true;
        }
        ;
        if (x instanceof March && y instanceof March) {
          return true;
        }
        ;
        if (x instanceof April && y instanceof April) {
          return true;
        }
        ;
        if (x instanceof May && y instanceof May) {
          return true;
        }
        ;
        if (x instanceof June && y instanceof June) {
          return true;
        }
        ;
        if (x instanceof July && y instanceof July) {
          return true;
        }
        ;
        if (x instanceof August && y instanceof August) {
          return true;
        }
        ;
        if (x instanceof September && y instanceof September) {
          return true;
        }
        ;
        if (x instanceof October && y instanceof October) {
          return true;
        }
        ;
        if (x instanceof November && y instanceof November) {
          return true;
        }
        ;
        if (x instanceof December && y instanceof December) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordMonth = {
    compare: function(x) {
      return function(y) {
        if (x instanceof January && y instanceof January) {
          return EQ.value;
        }
        ;
        if (x instanceof January) {
          return LT.value;
        }
        ;
        if (y instanceof January) {
          return GT.value;
        }
        ;
        if (x instanceof February && y instanceof February) {
          return EQ.value;
        }
        ;
        if (x instanceof February) {
          return LT.value;
        }
        ;
        if (y instanceof February) {
          return GT.value;
        }
        ;
        if (x instanceof March && y instanceof March) {
          return EQ.value;
        }
        ;
        if (x instanceof March) {
          return LT.value;
        }
        ;
        if (y instanceof March) {
          return GT.value;
        }
        ;
        if (x instanceof April && y instanceof April) {
          return EQ.value;
        }
        ;
        if (x instanceof April) {
          return LT.value;
        }
        ;
        if (y instanceof April) {
          return GT.value;
        }
        ;
        if (x instanceof May && y instanceof May) {
          return EQ.value;
        }
        ;
        if (x instanceof May) {
          return LT.value;
        }
        ;
        if (y instanceof May) {
          return GT.value;
        }
        ;
        if (x instanceof June && y instanceof June) {
          return EQ.value;
        }
        ;
        if (x instanceof June) {
          return LT.value;
        }
        ;
        if (y instanceof June) {
          return GT.value;
        }
        ;
        if (x instanceof July && y instanceof July) {
          return EQ.value;
        }
        ;
        if (x instanceof July) {
          return LT.value;
        }
        ;
        if (y instanceof July) {
          return GT.value;
        }
        ;
        if (x instanceof August && y instanceof August) {
          return EQ.value;
        }
        ;
        if (x instanceof August) {
          return LT.value;
        }
        ;
        if (y instanceof August) {
          return GT.value;
        }
        ;
        if (x instanceof September && y instanceof September) {
          return EQ.value;
        }
        ;
        if (x instanceof September) {
          return LT.value;
        }
        ;
        if (y instanceof September) {
          return GT.value;
        }
        ;
        if (x instanceof October && y instanceof October) {
          return EQ.value;
        }
        ;
        if (x instanceof October) {
          return LT.value;
        }
        ;
        if (y instanceof October) {
          return GT.value;
        }
        ;
        if (x instanceof November && y instanceof November) {
          return EQ.value;
        }
        ;
        if (x instanceof November) {
          return LT.value;
        }
        ;
        if (y instanceof November) {
          return GT.value;
        }
        ;
        if (x instanceof December && y instanceof December) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqMonth;
    }
  };
  var eqDay = eqInt;
  var boundedYear = /* @__PURE__ */ function() {
    return {
      bottom: -271820 | 0,
      top: 275759,
      Ord0: function() {
        return ordYear;
      }
    };
  }();
  var boundedWeekday = /* @__PURE__ */ function() {
    return {
      bottom: Monday.value,
      top: Sunday.value,
      Ord0: function() {
        return ordWeekday;
      }
    };
  }();
  var boundedMonth = /* @__PURE__ */ function() {
    return {
      bottom: January.value,
      top: December.value,
      Ord0: function() {
        return ordMonth;
      }
    };
  }();
  var boundedEnumYear = {
    cardinality: 547580,
    toEnum: function(n) {
      if (n >= (-271820 | 0) && n <= 275759) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedYear;
    },
    Enum1: function() {
      return $lazy_enumYear(0);
    }
  };
  var $lazy_enumYear = /* @__PURE__ */ $runtime_lazy3("enumYear", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $55 = toEnum(boundedEnumYear);
        var $56 = fromEnum(boundedEnumYear);
        return function($57) {
          return $55(function(v) {
            return v + 1 | 0;
          }($56($57)));
        };
      }(),
      pred: function() {
        var $58 = toEnum(boundedEnumYear);
        var $59 = fromEnum(boundedEnumYear);
        return function($60) {
          return $58(function(v) {
            return v - 1 | 0;
          }($59($60)));
        };
      }(),
      Ord0: function() {
        return ordYear;
      }
    };
  });
  var enumYear = /* @__PURE__ */ $lazy_enumYear(31);
  var boundedEnumWeekday = {
    cardinality: 7,
    toEnum: function(v) {
      if (v === 1) {
        return new Just(Monday.value);
      }
      ;
      if (v === 2) {
        return new Just(Tuesday.value);
      }
      ;
      if (v === 3) {
        return new Just(Wednesday.value);
      }
      ;
      if (v === 4) {
        return new Just(Thursday.value);
      }
      ;
      if (v === 5) {
        return new Just(Friday.value);
      }
      ;
      if (v === 6) {
        return new Just(Saturday.value);
      }
      ;
      if (v === 7) {
        return new Just(Sunday.value);
      }
      ;
      return Nothing.value;
    },
    fromEnum: function(v) {
      if (v instanceof Monday) {
        return 1;
      }
      ;
      if (v instanceof Tuesday) {
        return 2;
      }
      ;
      if (v instanceof Wednesday) {
        return 3;
      }
      ;
      if (v instanceof Thursday) {
        return 4;
      }
      ;
      if (v instanceof Friday) {
        return 5;
      }
      ;
      if (v instanceof Saturday) {
        return 6;
      }
      ;
      if (v instanceof Sunday) {
        return 7;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 182, column 16): " + [v.constructor.name]);
    },
    Bounded0: function() {
      return boundedWeekday;
    },
    Enum1: function() {
      return $lazy_enumWeekday(0);
    }
  };
  var $lazy_enumWeekday = /* @__PURE__ */ $runtime_lazy3("enumWeekday", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $61 = toEnum(boundedEnumWeekday);
        var $62 = fromEnum(boundedEnumWeekday);
        return function($63) {
          return $61(function(v) {
            return v + 1 | 0;
          }($62($63)));
        };
      }(),
      pred: function() {
        var $64 = toEnum(boundedEnumWeekday);
        var $65 = fromEnum(boundedEnumWeekday);
        return function($66) {
          return $64(function(v) {
            return v - 1 | 0;
          }($65($66)));
        };
      }(),
      Ord0: function() {
        return ordWeekday;
      }
    };
  });
  var boundedEnumMonth = {
    cardinality: 12,
    toEnum: function(v) {
      if (v === 1) {
        return new Just(January.value);
      }
      ;
      if (v === 2) {
        return new Just(February.value);
      }
      ;
      if (v === 3) {
        return new Just(March.value);
      }
      ;
      if (v === 4) {
        return new Just(April.value);
      }
      ;
      if (v === 5) {
        return new Just(May.value);
      }
      ;
      if (v === 6) {
        return new Just(June.value);
      }
      ;
      if (v === 7) {
        return new Just(July.value);
      }
      ;
      if (v === 8) {
        return new Just(August.value);
      }
      ;
      if (v === 9) {
        return new Just(September.value);
      }
      ;
      if (v === 10) {
        return new Just(October.value);
      }
      ;
      if (v === 11) {
        return new Just(November.value);
      }
      ;
      if (v === 12) {
        return new Just(December.value);
      }
      ;
      return Nothing.value;
    },
    fromEnum: function(v) {
      if (v instanceof January) {
        return 1;
      }
      ;
      if (v instanceof February) {
        return 2;
      }
      ;
      if (v instanceof March) {
        return 3;
      }
      ;
      if (v instanceof April) {
        return 4;
      }
      ;
      if (v instanceof May) {
        return 5;
      }
      ;
      if (v instanceof June) {
        return 6;
      }
      ;
      if (v instanceof July) {
        return 7;
      }
      ;
      if (v instanceof August) {
        return 8;
      }
      ;
      if (v instanceof September) {
        return 9;
      }
      ;
      if (v instanceof October) {
        return 10;
      }
      ;
      if (v instanceof November) {
        return 11;
      }
      ;
      if (v instanceof December) {
        return 12;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [v.constructor.name]);
    },
    Bounded0: function() {
      return boundedMonth;
    },
    Enum1: function() {
      return $lazy_enumMonth(0);
    }
  };
  var $lazy_enumMonth = /* @__PURE__ */ $runtime_lazy3("enumMonth", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $67 = toEnum(boundedEnumMonth);
        var $68 = fromEnum(boundedEnumMonth);
        return function($69) {
          return $67(function(v) {
            return v + 1 | 0;
          }($68($69)));
        };
      }(),
      pred: function() {
        var $70 = toEnum(boundedEnumMonth);
        var $71 = fromEnum(boundedEnumMonth);
        return function($72) {
          return $70(function(v) {
            return v - 1 | 0;
          }($71($72)));
        };
      }(),
      Ord0: function() {
        return ordMonth;
      }
    };
  });
  var enumMonth = /* @__PURE__ */ $lazy_enumMonth(67);
  var boundedDay = {
    bottom: 1,
    top: 31,
    Ord0: function() {
      return ordDay;
    }
  };
  var boundedEnumDay = {
    cardinality: 31,
    toEnum: function(n) {
      if (n >= 1 && n <= 31) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedDay;
    },
    Enum1: function() {
      return $lazy_enumDay(0);
    }
  };
  var $lazy_enumDay = /* @__PURE__ */ $runtime_lazy3("enumDay", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $73 = toEnum(boundedEnumDay);
        var $74 = fromEnum(boundedEnumDay);
        return function($75) {
          return $73(function(v) {
            return v + 1 | 0;
          }($74($75)));
        };
      }(),
      pred: function() {
        var $76 = toEnum(boundedEnumDay);
        var $77 = fromEnum(boundedEnumDay);
        return function($78) {
          return $76(function(v) {
            return v - 1 | 0;
          }($77($78)));
        };
      }(),
      Ord0: function() {
        return ordDay;
      }
    };
  });
  var enumDay = /* @__PURE__ */ $lazy_enumDay(129);

  // output/Data.Date/index.js
  var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromJust5 = /* @__PURE__ */ fromJust();
  var toEnum2 = /* @__PURE__ */ toEnum(boundedEnumWeekday);
  var show7 = /* @__PURE__ */ show(showYear);
  var show15 = /* @__PURE__ */ show(showMonth);
  var show22 = /* @__PURE__ */ show(showDay);
  var fromEnum1 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var mod3 = /* @__PURE__ */ mod(euclideanRingInt);
  var toEnum1 = /* @__PURE__ */ toEnum(boundedEnumDay);
  var eq13 = /* @__PURE__ */ eq(eqYear);
  var eq22 = /* @__PURE__ */ eq(eqMonth);
  var eq32 = /* @__PURE__ */ eq(eqDay);
  var compare2 = /* @__PURE__ */ compare(ordYear);
  var compare12 = /* @__PURE__ */ compare(ordMonth);
  var compare22 = /* @__PURE__ */ compare(ordDay);
  var succ2 = /* @__PURE__ */ succ(enumMonth);
  var succ1 = /* @__PURE__ */ succ(enumDay);
  var greaterThan2 = /* @__PURE__ */ greaterThan(/* @__PURE__ */ ordMaybe(ordDay));
  var succ22 = /* @__PURE__ */ succ(enumYear);
  var apply6 = /* @__PURE__ */ apply(applyMaybe);
  var map17 = /* @__PURE__ */ map(functorMaybe);
  var pure7 = /* @__PURE__ */ pure(applicativeMaybe);
  var pred2 = /* @__PURE__ */ pred(enumMonth);
  var pred1 = /* @__PURE__ */ pred(enumDay);
  var pred22 = /* @__PURE__ */ pred(enumYear);
  var toEnum22 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var $$Date = /* @__PURE__ */ function() {
    function $$Date2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    $$Date2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new $$Date2(value0, value1, value22);
        };
      };
    };
    return $$Date2;
  }();
  var year = function(v) {
    return v.value0;
  };
  var weekday = function(v) {
    var n = calcWeekday(v.value0, fromEnum2(v.value1), v.value2);
    var $86 = n === 0;
    if ($86) {
      return fromJust5(toEnum2(7));
    }
    ;
    return fromJust5(toEnum2(n));
  };
  var showDate = {
    show: function(v) {
      return "(Date " + (show7(v.value0) + (" " + (show15(v.value1) + (" " + (show22(v.value2) + ")")))));
    }
  };
  var month = function(v) {
    return v.value1;
  };
  var isLeapYear = function(y) {
    var y$prime = fromEnum1(y);
    return mod3(y$prime)(4) === 0 && (mod3(y$prime)(400) === 0 || !(mod3(y$prime)(100) === 0));
  };
  var lastDayOfMonth = function(y) {
    return function(m) {
      var unsafeDay = function($154) {
        return fromJust5(toEnum1($154));
      };
      if (m instanceof January) {
        return unsafeDay(31);
      }
      ;
      if (m instanceof February) {
        if (isLeapYear(y)) {
          return unsafeDay(29);
        }
        ;
        if (otherwise) {
          return unsafeDay(28);
        }
        ;
      }
      ;
      if (m instanceof March) {
        return unsafeDay(31);
      }
      ;
      if (m instanceof April) {
        return unsafeDay(30);
      }
      ;
      if (m instanceof May) {
        return unsafeDay(31);
      }
      ;
      if (m instanceof June) {
        return unsafeDay(30);
      }
      ;
      if (m instanceof July) {
        return unsafeDay(31);
      }
      ;
      if (m instanceof August) {
        return unsafeDay(31);
      }
      ;
      if (m instanceof September) {
        return unsafeDay(30);
      }
      ;
      if (m instanceof October) {
        return unsafeDay(31);
      }
      ;
      if (m instanceof November) {
        return unsafeDay(30);
      }
      ;
      if (m instanceof December) {
        return unsafeDay(31);
      }
      ;
      throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 141, column 27): " + [m.constructor.name]);
    };
  };
  var eqDate = {
    eq: function(x) {
      return function(y) {
        return eq13(x.value0)(y.value0) && eq22(x.value1)(y.value1) && eq32(x.value2)(y.value2);
      };
    }
  };
  var eq4 = /* @__PURE__ */ eq(eqDate);
  var ordDate = {
    compare: function(x) {
      return function(y) {
        var v = compare2(x.value0)(y.value0);
        if (v instanceof LT) {
          return LT.value;
        }
        ;
        if (v instanceof GT) {
          return GT.value;
        }
        ;
        var v1 = compare12(x.value1)(y.value1);
        if (v1 instanceof LT) {
          return LT.value;
        }
        ;
        if (v1 instanceof GT) {
          return GT.value;
        }
        ;
        return compare22(x.value2)(y.value2);
      };
    },
    Eq0: function() {
      return eqDate;
    }
  };
  var enumDate = {
    succ: function(v) {
      var sm = succ2(v.value1);
      var l = lastDayOfMonth(v.value0)(v.value1);
      var sd = function() {
        var v1 = succ1(v.value2);
        var $118 = greaterThan2(v1)(new Just(l));
        if ($118) {
          return Nothing.value;
        }
        ;
        return v1;
      }();
      var m$prime = function() {
        var $119 = isNothing(sd);
        if ($119) {
          return fromMaybe(January.value)(sm);
        }
        ;
        return v.value1;
      }();
      var y$prime = function() {
        var $120 = isNothing(sd) && isNothing(sm);
        if ($120) {
          return succ22(v.value0);
        }
        ;
        return new Just(v.value0);
      }();
      var d$prime = function() {
        var $121 = isNothing(sd);
        if ($121) {
          return toEnum1(1);
        }
        ;
        return sd;
      }();
      return apply6(apply6(map17($$Date.create)(y$prime))(pure7(m$prime)))(d$prime);
    },
    pred: function(v) {
      var pm = pred2(v.value1);
      var pd = pred1(v.value2);
      var y$prime = function() {
        var $126 = isNothing(pd) && isNothing(pm);
        if ($126) {
          return pred22(v.value0);
        }
        ;
        return new Just(v.value0);
      }();
      var m$prime = function() {
        var $127 = isNothing(pd);
        if ($127) {
          return fromMaybe(December.value)(pm);
        }
        ;
        return v.value1;
      }();
      var l = lastDayOfMonth(v.value0)(m$prime);
      var d$prime = function() {
        var $128 = isNothing(pd);
        if ($128) {
          return new Just(l);
        }
        ;
        return pd;
      }();
      return apply6(apply6(map17($$Date.create)(y$prime))(pure7(m$prime)))(d$prime);
    },
    Ord0: function() {
      return ordDate;
    }
  };
  var diff = function(dictDuration) {
    var toDuration2 = toDuration(dictDuration);
    return function(v) {
      return function(v1) {
        return toDuration2(calcDiff(v.value0, fromEnum2(v.value1), v.value2, v1.value0, fromEnum2(v1.value1), v1.value2));
      };
    };
  };
  var day = function(v) {
    return v.value2;
  };
  var canonicalDate = function(y) {
    return function(m) {
      return function(d) {
        var mkDate = function(y$prime) {
          return function(m$prime) {
            return function(d$prime) {
              return new $$Date(y$prime, fromJust5(toEnum22(m$prime)), d$prime);
            };
          };
        };
        return canonicalDateImpl(mkDate, y, fromEnum2(m), d);
      };
    };
  };
  var exactDate = function(y) {
    return function(m) {
      return function(d) {
        var dt2 = new $$Date(y, m, d);
        var $144 = eq4(canonicalDate(y)(m)(d))(dt2);
        if ($144) {
          return new Just(dt2);
        }
        ;
        return Nothing.value;
      };
    };
  };

  // output/Data.Time.Component/index.js
  var $runtime_lazy4 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var show8 = /* @__PURE__ */ show(showInt);
  var showSecond = {
    show: function(v) {
      return "(Second " + (show8(v) + ")");
    }
  };
  var showMinute = {
    show: function(v) {
      return "(Minute " + (show8(v) + ")");
    }
  };
  var showMillisecond = {
    show: function(v) {
      return "(Millisecond " + (show8(v) + ")");
    }
  };
  var showHour = {
    show: function(v) {
      return "(Hour " + (show8(v) + ")");
    }
  };
  var ordSecond = ordInt;
  var ordMinute = ordInt;
  var ordMillisecond = ordInt;
  var ordHour = ordInt;
  var eqSecond = eqInt;
  var eqMinute = eqInt;
  var eqMillisecond = eqInt;
  var eqHour = eqInt;
  var boundedSecond = {
    bottom: 0,
    top: 59,
    Ord0: function() {
      return ordSecond;
    }
  };
  var boundedMinute = {
    bottom: 0,
    top: 59,
    Ord0: function() {
      return ordMinute;
    }
  };
  var boundedMillisecond = {
    bottom: 0,
    top: 999,
    Ord0: function() {
      return ordMillisecond;
    }
  };
  var boundedHour = {
    bottom: 0,
    top: 23,
    Ord0: function() {
      return ordHour;
    }
  };
  var boundedEnumSecond = {
    cardinality: 60,
    toEnum: function(n) {
      if (n >= 0 && n <= 59) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedSecond;
    },
    Enum1: function() {
      return $lazy_enumSecond(0);
    }
  };
  var $lazy_enumSecond = /* @__PURE__ */ $runtime_lazy4("enumSecond", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $36 = toEnum(boundedEnumSecond);
        var $37 = fromEnum(boundedEnumSecond);
        return function($38) {
          return $36(function(v) {
            return v + 1 | 0;
          }($37($38)));
        };
      }(),
      pred: function() {
        var $39 = toEnum(boundedEnumSecond);
        var $40 = fromEnum(boundedEnumSecond);
        return function($41) {
          return $39(function(v) {
            return v - 1 | 0;
          }($40($41)));
        };
      }(),
      Ord0: function() {
        return ordSecond;
      }
    };
  });
  var boundedEnumMinute = {
    cardinality: 60,
    toEnum: function(n) {
      if (n >= 0 && n <= 59) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedMinute;
    },
    Enum1: function() {
      return $lazy_enumMinute(0);
    }
  };
  var $lazy_enumMinute = /* @__PURE__ */ $runtime_lazy4("enumMinute", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $42 = toEnum(boundedEnumMinute);
        var $43 = fromEnum(boundedEnumMinute);
        return function($44) {
          return $42(function(v) {
            return v + 1 | 0;
          }($43($44)));
        };
      }(),
      pred: function() {
        var $45 = toEnum(boundedEnumMinute);
        var $46 = fromEnum(boundedEnumMinute);
        return function($47) {
          return $45(function(v) {
            return v - 1 | 0;
          }($46($47)));
        };
      }(),
      Ord0: function() {
        return ordMinute;
      }
    };
  });
  var boundedEnumMillisecond = {
    cardinality: 1e3,
    toEnum: function(n) {
      if (n >= 0 && n <= 999) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedMillisecond;
    },
    Enum1: function() {
      return $lazy_enumMillisecond(0);
    }
  };
  var $lazy_enumMillisecond = /* @__PURE__ */ $runtime_lazy4("enumMillisecond", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $48 = toEnum(boundedEnumMillisecond);
        var $49 = fromEnum(boundedEnumMillisecond);
        return function($50) {
          return $48(function(v) {
            return v + 1 | 0;
          }($49($50)));
        };
      }(),
      pred: function() {
        var $51 = toEnum(boundedEnumMillisecond);
        var $52 = fromEnum(boundedEnumMillisecond);
        return function($53) {
          return $51(function(v) {
            return v - 1 | 0;
          }($52($53)));
        };
      }(),
      Ord0: function() {
        return ordMillisecond;
      }
    };
  });
  var boundedEnumHour = {
    cardinality: 24,
    toEnum: function(n) {
      if (n >= 0 && n <= 23) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedHour;
    },
    Enum1: function() {
      return $lazy_enumHour(0);
    }
  };
  var $lazy_enumHour = /* @__PURE__ */ $runtime_lazy4("enumHour", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $54 = toEnum(boundedEnumHour);
        var $55 = fromEnum(boundedEnumHour);
        return function($56) {
          return $54(function(v) {
            return v + 1 | 0;
          }($55($56)));
        };
      }(),
      pred: function() {
        var $57 = toEnum(boundedEnumHour);
        var $58 = fromEnum(boundedEnumHour);
        return function($59) {
          return $57(function(v) {
            return v - 1 | 0;
          }($58($59)));
        };
      }(),
      Ord0: function() {
        return ordHour;
      }
    };
  });

  // output/Data.Time/index.js
  var show9 = /* @__PURE__ */ show(showHour);
  var show16 = /* @__PURE__ */ show(showMinute);
  var show23 = /* @__PURE__ */ show(showSecond);
  var show32 = /* @__PURE__ */ show(showMillisecond);
  var eq5 = /* @__PURE__ */ eq(eqHour);
  var eq14 = /* @__PURE__ */ eq(eqMinute);
  var eq23 = /* @__PURE__ */ eq(eqSecond);
  var eq33 = /* @__PURE__ */ eq(eqMillisecond);
  var compare3 = /* @__PURE__ */ compare(ordHour);
  var compare13 = /* @__PURE__ */ compare(ordMinute);
  var compare23 = /* @__PURE__ */ compare(ordSecond);
  var compare32 = /* @__PURE__ */ compare(ordMillisecond);
  var Time = /* @__PURE__ */ function() {
    function Time2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Time2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Time2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Time2;
  }();
  var showTime = {
    show: function(v) {
      return "(Time " + (show9(v.value0) + (" " + (show16(v.value1) + (" " + (show23(v.value2) + (" " + (show32(v.value3) + ")")))))));
    }
  };
  var second2 = function(v) {
    return v.value2;
  };
  var minute = function(v) {
    return v.value1;
  };
  var millisecond = function(v) {
    return v.value3;
  };
  var hour = function(v) {
    return v.value0;
  };
  var eqTime = {
    eq: function(x) {
      return function(y) {
        return eq5(x.value0)(y.value0) && eq14(x.value1)(y.value1) && eq23(x.value2)(y.value2) && eq33(x.value3)(y.value3);
      };
    }
  };
  var ordTime = {
    compare: function(x) {
      return function(y) {
        var v = compare3(x.value0)(y.value0);
        if (v instanceof LT) {
          return LT.value;
        }
        ;
        if (v instanceof GT) {
          return GT.value;
        }
        ;
        var v1 = compare13(x.value1)(y.value1);
        if (v1 instanceof LT) {
          return LT.value;
        }
        ;
        if (v1 instanceof GT) {
          return GT.value;
        }
        ;
        var v2 = compare23(x.value2)(y.value2);
        if (v2 instanceof LT) {
          return LT.value;
        }
        ;
        if (v2 instanceof GT) {
          return GT.value;
        }
        ;
        return compare32(x.value3)(y.value3);
      };
    },
    Eq0: function() {
      return eqTime;
    }
  };

  // output/Data.DateTime/index.js
  var fromEnum3 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var fromEnum12 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromEnum22 = /* @__PURE__ */ fromEnum(boundedEnumDay);
  var fromEnum32 = /* @__PURE__ */ fromEnum(boundedEnumHour);
  var fromEnum4 = /* @__PURE__ */ fromEnum(boundedEnumMinute);
  var fromEnum5 = /* @__PURE__ */ fromEnum(boundedEnumSecond);
  var fromEnum6 = /* @__PURE__ */ fromEnum(boundedEnumMillisecond);
  var show10 = /* @__PURE__ */ show(showDate);
  var show17 = /* @__PURE__ */ show(showTime);
  var eq6 = /* @__PURE__ */ eq(eqDate);
  var eq15 = /* @__PURE__ */ eq(eqTime);
  var compare4 = /* @__PURE__ */ compare(ordDate);
  var compare14 = /* @__PURE__ */ compare(ordTime);
  var bind9 = /* @__PURE__ */ bind(bindMaybe);
  var apply7 = /* @__PURE__ */ apply(applyMaybe);
  var map18 = /* @__PURE__ */ map(functorMaybe);
  var join2 = /* @__PURE__ */ join(bindMaybe);
  var toEnum3 = /* @__PURE__ */ toEnum(boundedEnumYear);
  var toEnum12 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var toEnum23 = /* @__PURE__ */ toEnum(boundedEnumDay);
  var toEnum32 = /* @__PURE__ */ toEnum(boundedEnumHour);
  var toEnum4 = /* @__PURE__ */ toEnum(boundedEnumMinute);
  var toEnum5 = /* @__PURE__ */ toEnum(boundedEnumSecond);
  var toEnum6 = /* @__PURE__ */ toEnum(boundedEnumMillisecond);
  var DateTime = /* @__PURE__ */ function() {
    function DateTime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    DateTime2.create = function(value0) {
      return function(value1) {
        return new DateTime2(value0, value1);
      };
    };
    return DateTime2;
  }();
  var toRecord = function(v) {
    return {
      year: fromEnum3(year(v.value0)),
      month: fromEnum12(month(v.value0)),
      day: fromEnum22(day(v.value0)),
      hour: fromEnum32(hour(v.value1)),
      minute: fromEnum4(minute(v.value1)),
      second: fromEnum5(second2(v.value1)),
      millisecond: fromEnum6(millisecond(v.value1))
    };
  };
  var showDateTime = {
    show: function(v) {
      return "(DateTime " + (show10(v.value0) + (" " + (show17(v.value1) + ")")));
    }
  };
  var eqDateTime = {
    eq: function(x) {
      return function(y) {
        return eq6(x.value0)(y.value0) && eq15(x.value1)(y.value1);
      };
    }
  };
  var ordDateTime = {
    compare: function(x) {
      return function(y) {
        var v = compare4(x.value0)(y.value0);
        if (v instanceof LT) {
          return LT.value;
        }
        ;
        if (v instanceof GT) {
          return GT.value;
        }
        ;
        return compare14(x.value1)(y.value1);
      };
    },
    Eq0: function() {
      return eqDateTime;
    }
  };
  var date = function(v) {
    return v.value0;
  };
  var adjust = function(dictDuration) {
    var fromDuration2 = fromDuration(dictDuration);
    return function(d) {
      return function(dt2) {
        return bind9(adjustImpl(Just.create)(Nothing.value)(fromDuration2(d))(toRecord(dt2)))(function(rec) {
          return apply7(map18(DateTime.create)(join2(apply7(apply7(map18(exactDate)(toEnum3(rec.year)))(toEnum12(rec.month)))(toEnum23(rec.day)))))(apply7(apply7(apply7(map18(Time.create)(toEnum32(rec.hour)))(toEnum4(rec.minute)))(toEnum5(rec.second)))(toEnum6(rec.millisecond)));
        });
      };
    };
  };

  // node_modules/decimal.js/decimal.mjs
  var EXP_LIMIT = 9e15;
  var MAX_DIGITS = 1e9;
  var NUMERALS = "0123456789abcdef";
  var LN10 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
  var PI = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
  var DEFAULTS = {
    precision: 20,
    rounding: 4,
    modulo: 1,
    toExpNeg: -7,
    toExpPos: 21,
    minE: -EXP_LIMIT,
    maxE: EXP_LIMIT,
    crypto: false
  };
  var inexact;
  var quadrant;
  var external = true;
  var decimalError = "[DecimalError] ";
  var invalidArgument = decimalError + "Invalid argument: ";
  var precisionLimitExceeded = decimalError + "Precision limit exceeded";
  var cryptoUnavailable = decimalError + "crypto unavailable";
  var tag = "[object Decimal]";
  var mathfloor = Math.floor;
  var mathpow = Math.pow;
  var isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
  var isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
  var isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
  var isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
  var BASE = 1e7;
  var LOG_BASE = 7;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var LN10_PRECISION = LN10.length - 1;
  var PI_PRECISION = PI.length - 1;
  var P = { toStringTag: tag };
  P.absoluteValue = P.abs = function() {
    var x = new this.constructor(this);
    if (x.s < 0)
      x.s = 1;
    return finalise(x);
  };
  P.ceil = function() {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };
  P.clampedTo = P.clamp = function(min7, max8) {
    var k, x = this, Ctor = x.constructor;
    min7 = new Ctor(min7);
    max8 = new Ctor(max8);
    if (!min7.s || !max8.s)
      return new Ctor(NaN);
    if (min7.gt(max8))
      throw Error(invalidArgument + max8);
    k = x.cmp(min7);
    return k < 0 ? min7 : x.cmp(max8) > 0 ? max8 : new Ctor(x);
  };
  P.comparedTo = P.cmp = function(y) {
    var i2, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }
    if (!xd[0] || !yd[0])
      return xd[0] ? xs : yd[0] ? -ys : 0;
    if (xs !== ys)
      return xs;
    if (x.e !== y.e)
      return x.e > y.e ^ xs < 0 ? 1 : -1;
    xdL = xd.length;
    ydL = yd.length;
    for (i2 = 0, j = xdL < ydL ? xdL : ydL; i2 < j; ++i2) {
      if (xd[i2] !== yd[i2])
        return xd[i2] > yd[i2] ^ xs < 0 ? 1 : -1;
    }
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };
  P.cosine = P.cos = function() {
    var pr, rm, x = this, Ctor = x.constructor;
    if (!x.d)
      return new Ctor(NaN);
    if (!x.d[0])
      return new Ctor(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;
    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };
  P.cubeRoot = P.cbrt = function() {
    var e2, m, n, r, rep, s2, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
    if (!x.isFinite() || x.isZero())
      return new Ctor(x);
    external = false;
    s2 = x.s * mathpow(x.s * x, 1 / 3);
    if (!s2 || Math.abs(s2) == 1 / 0) {
      n = digitsToString(x.d);
      e2 = x.e;
      if (s2 = (e2 - n.length + 1) % 3)
        n += s2 == 1 || s2 == -2 ? "0" : "00";
      s2 = mathpow(n, 1 / 3);
      e2 = mathfloor((e2 + 1) / 3) - (e2 % 3 == (e2 < 0 ? -1 : 2));
      if (s2 == 1 / 0) {
        n = "5e" + e2;
      } else {
        n = s2.toExponential();
        n = n.slice(0, n.indexOf("e") + 1) + e2;
      }
      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s2.toString());
    }
    sd = (e2 = Ctor.precision) + 3;
    for (; ; ) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);
        if (n == "9999" || !rep && n == "4999") {
          if (!rep) {
            finalise(t, e2 + 1, 0);
            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }
          sd += 4;
          rep = 1;
        } else {
          if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
            finalise(r, e2 + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }
          break;
        }
      }
    }
    external = true;
    return finalise(r, e2, Ctor.rounding, m);
  };
  P.decimalPlaces = P.dp = function() {
    var w, d = this.d, n = NaN;
    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
      w = d[w];
      if (w)
        for (; w % 10 == 0; w /= 10)
          n--;
      if (n < 0)
        n = 0;
    }
    return n;
  };
  P.dividedBy = P.div = function(y) {
    return divide(this, new this.constructor(y));
  };
  P.dividedToIntegerBy = P.divToInt = function(y) {
    var x = this, Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };
  P.equals = P.eq = function(y) {
    return this.cmp(y) === 0;
  };
  P.floor = function() {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };
  P.greaterThan = P.gt = function(y) {
    return this.cmp(y) > 0;
  };
  P.greaterThanOrEqualTo = P.gte = function(y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };
  P.hyperbolicCosine = P.cosh = function() {
    var k, n, pr, rm, len, x = this, Ctor = x.constructor, one2 = new Ctor(1);
    if (!x.isFinite())
      return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero())
      return one2;
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      n = "2.3283064365386962890625e-10";
    }
    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
    var cosh2_x, i2 = k, d8 = new Ctor(8);
    for (; i2--; ) {
      cosh2_x = x.times(x);
      x = one2.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }
    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };
  P.hyperbolicSine = P.sinh = function() {
    var k, pr, rm, len, x = this, Ctor = x.constructor;
    if (!x.isFinite() || x.isZero())
      return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;
    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;
      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x, true);
      var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
      for (; k--; ) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(x, pr, rm, true);
  };
  P.hyperbolicTangent = P.tanh = function() {
    var pr, rm, x = this, Ctor = x.constructor;
    if (!x.isFinite())
      return new Ctor(x.s);
    if (x.isZero())
      return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;
    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };
  P.inverseCosine = P.acos = function() {
    var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
    if (k !== -1) {
      return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
    }
    if (x.isZero())
      return getPi(Ctor, pr + 4, rm).times(0.5);
    Ctor.precision = pr + 6;
    Ctor.rounding = 1;
    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return halfPi.minus(x);
  };
  P.inverseHyperbolicCosine = P.acosh = function() {
    var pr, rm, x = this, Ctor = x.constructor;
    if (x.lte(1))
      return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite())
      return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;
    x = x.times(x).minus(1).sqrt().plus(x);
    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.ln();
  };
  P.inverseHyperbolicSine = P.asinh = function() {
    var pr, rm, x = this, Ctor = x.constructor;
    if (!x.isFinite() || x.isZero())
      return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;
    x = x.times(x).plus(1).sqrt().plus(x);
    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.ln();
  };
  P.inverseHyperbolicTangent = P.atanh = function() {
    var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
    if (!x.isFinite())
      return new Ctor(NaN);
    if (x.e >= 0)
      return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();
    if (Math.max(xsd, pr) < 2 * -x.e - 1)
      return finalise(new Ctor(x), pr, rm, true);
    Ctor.precision = wpr = xsd - x.e;
    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
    Ctor.precision = pr + 4;
    Ctor.rounding = 1;
    x = x.ln();
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.times(0.5);
  };
  P.inverseSine = P.asin = function() {
    var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
    if (x.isZero())
      return new Ctor(x);
    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    if (k !== -1) {
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }
      return new Ctor(NaN);
    }
    Ctor.precision = pr + 6;
    Ctor.rounding = 1;
    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.times(2);
  };
  P.inverseTangent = P.atan = function() {
    var i2, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
    if (!x.isFinite()) {
      if (!x.s)
        return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }
    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;
    k = Math.min(28, wpr / LOG_BASE + 2 | 0);
    for (i2 = k; i2; --i2)
      x = x.div(x.times(x).plus(1).sqrt().plus(1));
    external = false;
    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;
    for (; i2 !== -1; ) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));
      px = px.times(x2);
      r = t.plus(px.div(n += 2));
      if (r.d[j] !== void 0)
        for (i2 = j; r.d[i2] === t.d[i2] && i2--; )
          ;
    }
    if (k)
      r = r.times(2 << k - 1);
    external = true;
    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };
  P.isFinite = function() {
    return !!this.d;
  };
  P.isInteger = P.isInt = function() {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };
  P.isNaN = function() {
    return !this.s;
  };
  P.isNegative = P.isNeg = function() {
    return this.s < 0;
  };
  P.isPositive = P.isPos = function() {
    return this.s > 0;
  };
  P.isZero = function() {
    return !!this.d && this.d[0] === 0;
  };
  P.lessThan = P.lt = function(y) {
    return this.cmp(y) < 0;
  };
  P.lessThanOrEqualTo = P.lte = function(y) {
    return this.cmp(y) < 1;
  };
  P.logarithm = P.log = function(base2) {
    var isBase10, d, denominator, k, inf5, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard4 = 5;
    if (base2 == null) {
      base2 = new Ctor(10);
      isBase10 = true;
    } else {
      base2 = new Ctor(base2);
      d = base2.d;
      if (base2.s < 0 || !d || !d[0] || base2.eq(1))
        return new Ctor(NaN);
      isBase10 = base2.eq(10);
    }
    d = arg.d;
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }
    if (isBase10) {
      if (d.length > 1) {
        inf5 = true;
      } else {
        for (k = d[0]; k % 10 === 0; )
          k /= 10;
        inf5 = k !== 1;
      }
    }
    external = false;
    sd = pr + guard4;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base2, sd);
    r = divide(num, denominator, sd, 1);
    if (checkRoundingDigits(r.d, k = pr, rm)) {
      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base2, sd);
        r = divide(num, denominator, sd, 1);
        if (!inf5) {
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }
          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }
    external = true;
    return finalise(r, pr, rm);
  };
  P.minus = P.sub = function(y) {
    var d, e2, i2, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
    y = new Ctor(y);
    if (!x.d || !y.d) {
      if (!x.s || !y.s)
        y = new Ctor(NaN);
      else if (x.d)
        y.s = -y.s;
      else
        y = new Ctor(y.d || x.s !== y.s ? x : NaN);
      return y;
    }
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }
    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;
    if (!xd[0] || !yd[0]) {
      if (yd[0])
        y.s = -y.s;
      else if (xd[0])
        y = new Ctor(x);
      else
        return new Ctor(rm === 3 ? -0 : 0);
      return external ? finalise(y, pr, rm) : y;
    }
    e2 = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);
    xd = xd.slice();
    k = xe - e2;
    if (k) {
      xLTy = k < 0;
      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e2 = xe;
        len = xd.length;
      }
      i2 = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
      if (k > i2) {
        k = i2;
        d.length = 1;
      }
      d.reverse();
      for (i2 = k; i2--; )
        d.push(0);
      d.reverse();
    } else {
      i2 = xd.length;
      len = yd.length;
      xLTy = i2 < len;
      if (xLTy)
        len = i2;
      for (i2 = 0; i2 < len; i2++) {
        if (xd[i2] != yd[i2]) {
          xLTy = xd[i2] < yd[i2];
          break;
        }
      }
      k = 0;
    }
    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }
    len = xd.length;
    for (i2 = yd.length - len; i2 > 0; --i2)
      xd[len++] = 0;
    for (i2 = yd.length; i2 > k; ) {
      if (xd[--i2] < yd[i2]) {
        for (j = i2; j && xd[--j] === 0; )
          xd[j] = BASE - 1;
        --xd[j];
        xd[i2] += BASE;
      }
      xd[i2] -= yd[i2];
    }
    for (; xd[--len] === 0; )
      xd.pop();
    for (; xd[0] === 0; xd.shift())
      --e2;
    if (!xd[0])
      return new Ctor(rm === 3 ? -0 : 0);
    y.d = xd;
    y.e = getBase10Exponent(xd, e2);
    return external ? finalise(y, pr, rm) : y;
  };
  P.modulo = P.mod = function(y) {
    var q2, x = this, Ctor = x.constructor;
    y = new Ctor(y);
    if (!x.d || !y.s || y.d && !y.d[0])
      return new Ctor(NaN);
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }
    external = false;
    if (Ctor.modulo == 9) {
      q2 = divide(x, y.abs(), 0, 3, 1);
      q2.s *= y.s;
    } else {
      q2 = divide(x, y, 0, Ctor.modulo, 1);
    }
    q2 = q2.times(y);
    external = true;
    return x.minus(q2);
  };
  P.naturalExponential = P.exp = function() {
    return naturalExponential(this);
  };
  P.naturalLogarithm = P.ln = function() {
    return naturalLogarithm(this);
  };
  P.negated = P.neg = function() {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };
  P.plus = P.add = function(y) {
    var carry, d, e2, i2, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
    y = new Ctor(y);
    if (!x.d || !y.d) {
      if (!x.s || !y.s)
        y = new Ctor(NaN);
      else if (!x.d)
        y = new Ctor(y.d || x.s === y.s ? x : NaN);
      return y;
    }
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }
    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;
    if (!xd[0] || !yd[0]) {
      if (!yd[0])
        y = new Ctor(x);
      return external ? finalise(y, pr, rm) : y;
    }
    k = mathfloor(x.e / LOG_BASE);
    e2 = mathfloor(y.e / LOG_BASE);
    xd = xd.slice();
    i2 = k - e2;
    if (i2) {
      if (i2 < 0) {
        d = xd;
        i2 = -i2;
        len = yd.length;
      } else {
        d = yd;
        e2 = k;
        len = xd.length;
      }
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;
      if (i2 > len) {
        i2 = len;
        d.length = 1;
      }
      d.reverse();
      for (; i2--; )
        d.push(0);
      d.reverse();
    }
    len = xd.length;
    i2 = yd.length;
    if (len - i2 < 0) {
      i2 = len;
      d = yd;
      yd = xd;
      xd = d;
    }
    for (carry = 0; i2; ) {
      carry = (xd[--i2] = xd[i2] + yd[i2] + carry) / BASE | 0;
      xd[i2] %= BASE;
    }
    if (carry) {
      xd.unshift(carry);
      ++e2;
    }
    for (len = xd.length; xd[--len] == 0; )
      xd.pop();
    y.d = xd;
    y.e = getBase10Exponent(xd, e2);
    return external ? finalise(y, pr, rm) : y;
  };
  P.precision = P.sd = function(z) {
    var k, x = this;
    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
      throw Error(invalidArgument + z);
    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k)
        k = x.e + 1;
    } else {
      k = NaN;
    }
    return k;
  };
  P.round = function() {
    var x = this, Ctor = x.constructor;
    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };
  P.sine = P.sin = function() {
    var pr, rm, x = this, Ctor = x.constructor;
    if (!x.isFinite())
      return new Ctor(NaN);
    if (x.isZero())
      return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;
    x = sine(Ctor, toLessThanHalfPi(Ctor, x));
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };
  P.squareRoot = P.sqrt = function() {
    var m, n, sd, r, rep, t, x = this, d = x.d, e2 = x.e, s2 = x.s, Ctor = x.constructor;
    if (s2 !== 1 || !d || !d[0]) {
      return new Ctor(!s2 || s2 < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }
    external = false;
    s2 = Math.sqrt(+x);
    if (s2 == 0 || s2 == 1 / 0) {
      n = digitsToString(d);
      if ((n.length + e2) % 2 == 0)
        n += "0";
      s2 = Math.sqrt(n);
      e2 = mathfloor((e2 + 1) / 2) - (e2 < 0 || e2 % 2);
      if (s2 == 1 / 0) {
        n = "5e" + e2;
      } else {
        n = s2.toExponential();
        n = n.slice(0, n.indexOf("e") + 1) + e2;
      }
      r = new Ctor(n);
    } else {
      r = new Ctor(s2.toString());
    }
    sd = (e2 = Ctor.precision) + 3;
    for (; ; ) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);
        if (n == "9999" || !rep && n == "4999") {
          if (!rep) {
            finalise(t, e2 + 1, 0);
            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }
          sd += 4;
          rep = 1;
        } else {
          if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
            finalise(r, e2 + 1, 1);
            m = !r.times(r).eq(x);
          }
          break;
        }
      }
    }
    external = true;
    return finalise(r, e2, Ctor.rounding, m);
  };
  P.tangent = P.tan = function() {
    var pr, rm, x = this, Ctor = x.constructor;
    if (!x.isFinite())
      return new Ctor(NaN);
    if (x.isZero())
      return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;
    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };
  P.times = P.mul = function(y) {
    var carry, e2, i2, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
    y.s *= x.s;
    if (!xd || !xd[0] || !yd || !yd[0]) {
      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
    }
    e2 = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }
    r = [];
    rL = xdL + ydL;
    for (i2 = rL; i2--; )
      r.push(0);
    for (i2 = ydL; --i2 >= 0; ) {
      carry = 0;
      for (k = xdL + i2; k > i2; ) {
        t = r[k] + yd[i2] * xd[k - i2 - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }
      r[k] = (r[k] + carry) % BASE | 0;
    }
    for (; !r[--rL]; )
      r.pop();
    if (carry)
      ++e2;
    else
      r.shift();
    y.d = r;
    y.e = getBase10Exponent(r, e2);
    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };
  P.toBinary = function(sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };
  P.toDecimalPlaces = P.toDP = function(dp, rm) {
    var x = this, Ctor = x.constructor;
    x = new Ctor(x);
    if (dp === void 0)
      return x;
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    return finalise(x, dp + x.e + 1, rm);
  };
  P.toExponential = function(dp, rm) {
    var str, x = this, Ctor = x.constructor;
    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }
    return x.isNeg() && !x.isZero() ? "-" + str : str;
  };
  P.toFixed = function(dp, rm) {
    var str, y, x = this, Ctor = x.constructor;
    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }
    return x.isNeg() && !x.isZero() ? "-" + str : str;
  };
  P.toFraction = function(maxD) {
    var d, d0, d1, d2, e2, k, n, n0, n1, pr, q2, r, x = this, xd = x.d, Ctor = x.constructor;
    if (!xd)
      return new Ctor(x);
    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);
    d = new Ctor(d1);
    e2 = d.e = getPrecision(xd) - x.e - 1;
    k = e2 % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
    if (maxD == null) {
      maxD = e2 > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1))
        throw Error(invalidArgument + n);
      maxD = n.gt(d) ? e2 > 0 ? d : n1 : n;
    }
    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e2 = xd.length * LOG_BASE * 2;
    for (; ; ) {
      q2 = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q2.times(d1));
      if (d2.cmp(maxD) == 1)
        break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q2.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q2.times(d2));
      n = d2;
    }
    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    r = divide(n1, d1, e2, 1).minus(x).abs().cmp(divide(n0, d0, e2, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
    Ctor.precision = pr;
    external = true;
    return r;
  };
  P.toHexadecimal = P.toHex = function(sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };
  P.toNearest = function(y, rm) {
    var x = this, Ctor = x.constructor;
    x = new Ctor(x);
    if (y == null) {
      if (!x.d)
        return x;
      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm === void 0) {
        rm = Ctor.rounding;
      } else {
        checkInt32(rm, 0, 8);
      }
      if (!x.d)
        return y.s ? x : y;
      if (!y.d) {
        if (y.s)
          y.s = x.s;
        return y;
      }
    }
    if (y.d[0]) {
      external = false;
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);
    } else {
      y.s = x.s;
      x = y;
    }
    return x;
  };
  P.toNumber = function() {
    return +this;
  };
  P.toOctal = function(sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };
  P.toPower = P.pow = function(y) {
    var e2, k, pr, r, rm, s2, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
    if (!x.d || !y.d || !x.d[0] || !y.d[0])
      return new Ctor(mathpow(+x, yn));
    x = new Ctor(x);
    if (x.eq(1))
      return x;
    pr = Ctor.precision;
    rm = Ctor.rounding;
    if (y.eq(1))
      return finalise(x, pr, rm);
    e2 = mathfloor(y.e / LOG_BASE);
    if (e2 >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }
    s2 = x.s;
    if (s2 < 0) {
      if (e2 < y.d.length - 1)
        return new Ctor(NaN);
      if ((y.d[e2] & 1) == 0)
        s2 = 1;
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s2;
        return x;
      }
    }
    k = mathpow(+x, yn);
    e2 = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log("0." + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + "").e;
    if (e2 > Ctor.maxE + 1 || e2 < Ctor.minE - 1)
      return new Ctor(e2 > 0 ? s2 / 0 : 0);
    external = false;
    Ctor.rounding = x.s = 1;
    k = Math.min(12, (e2 + "").length);
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
    if (r.d) {
      r = finalise(r, pr + 5, 1);
      if (checkRoundingDigits(r.d, pr, rm)) {
        e2 = pr + 10;
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e2 + k)), e2), e2 + 5, 1);
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }
    r.s = s2;
    external = true;
    Ctor.rounding = rm;
    return finalise(r, pr, rm);
  };
  P.toPrecision = function(sd, rm) {
    var str, x = this, Ctor = x.constructor;
    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }
    return x.isNeg() && !x.isZero() ? "-" + str : str;
  };
  P.toSignificantDigits = P.toSD = function(sd, rm) {
    var x = this, Ctor = x.constructor;
    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
    }
    return finalise(new Ctor(x), sd, rm);
  };
  P.toString = function() {
    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    return x.isNeg() && !x.isZero() ? "-" + str : str;
  };
  P.truncated = P.trunc = function() {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };
  P.valueOf = P.toJSON = function() {
    var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    return x.isNeg() ? "-" + str : str;
  };
  function digitsToString(d) {
    var i2, k, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
    if (indexOfLastWord > 0) {
      str += w;
      for (i2 = 1; i2 < indexOfLastWord; i2++) {
        ws = d[i2] + "";
        k = LOG_BASE - ws.length;
        if (k)
          str += getZeroString(k);
        str += ws;
      }
      w = d[i2];
      ws = w + "";
      k = LOG_BASE - ws.length;
      if (k)
        str += getZeroString(k);
    } else if (w === 0) {
      return "0";
    }
    for (; w % 10 === 0; )
      w /= 10;
    return str + w;
  }
  function checkInt32(i2, min7, max8) {
    if (i2 !== ~~i2 || i2 < min7 || i2 > max8) {
      throw Error(invalidArgument + i2);
    }
  }
  function checkRoundingDigits(d, i2, rm, repeating) {
    var di, k, r, rd;
    for (k = d[0]; k >= 10; k /= 10)
      --i2;
    if (--i2 < 0) {
      i2 += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i2 + 1) / LOG_BASE);
      i2 %= LOG_BASE;
    }
    k = mathpow(10, LOG_BASE - i2);
    rd = d[di] % k | 0;
    if (repeating == null) {
      if (i2 < 3) {
        if (i2 == 0)
          rd = rd / 100 | 0;
        else if (i2 == 1)
          rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i2 - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i2 < 4) {
        if (i2 == 0)
          rd = rd / 1e3 | 0;
        else if (i2 == 1)
          rd = rd / 100 | 0;
        else if (i2 == 2)
          rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i2 - 3) - 1;
      }
    }
    return r;
  }
  function convertBase(str, baseIn, baseOut) {
    var j, arr = [0], arrL, i2 = 0, strL = str.length;
    for (; i2 < strL; ) {
      for (arrL = arr.length; arrL--; )
        arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i2++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0)
            arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }
    return arr.reverse();
  }
  function cosine(Ctor, x) {
    var k, len, y;
    if (x.isZero())
      return x;
    len = x.d.length;
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      y = "2.3283064365386962890625e-10";
    }
    Ctor.precision += k;
    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
    for (var i2 = k; i2--; ) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }
    Ctor.precision -= k;
    return x;
  }
  var divide = function() {
    function multiplyInteger(x, k, base2) {
      var temp, carry = 0, i2 = x.length;
      for (x = x.slice(); i2--; ) {
        temp = x[i2] * k + carry;
        x[i2] = temp % base2 | 0;
        carry = temp / base2 | 0;
      }
      if (carry)
        x.unshift(carry);
      return x;
    }
    function compare9(a2, b2, aL, bL) {
      var i2, r;
      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i2 = r = 0; i2 < aL; i2++) {
          if (a2[i2] != b2[i2]) {
            r = a2[i2] > b2[i2] ? 1 : -1;
            break;
          }
        }
      }
      return r;
    }
    function subtract(a2, b2, aL, base2) {
      var i2 = 0;
      for (; aL--; ) {
        a2[aL] -= i2;
        i2 = a2[aL] < b2[aL] ? 1 : 0;
        a2[aL] = i2 * base2 + a2[aL] - b2[aL];
      }
      for (; !a2[0] && a2.length > 1; )
        a2.shift();
    }
    return function(x, y, pr, rm, dp, base2) {
      var cmp, e2, i2, k, logBase, more, prod, prodL, q2, qd, rem4, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign4 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
      if (!xd || !xd[0] || !yd || !yd[0]) {
        return new Ctor(
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : xd && xd[0] == 0 || !yd ? sign4 * 0 : sign4 / 0
        );
      }
      if (base2) {
        logBase = 1;
        e2 = x.e - y.e;
      } else {
        base2 = BASE;
        logBase = LOG_BASE;
        e2 = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }
      yL = yd.length;
      xL = xd.length;
      q2 = new Ctor(sign4);
      qd = q2.d = [];
      for (i2 = 0; yd[i2] == (xd[i2] || 0); i2++)
        ;
      if (yd[i2] > (xd[i2] || 0))
        e2--;
      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }
      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {
        sd = sd / logBase + 2 | 0;
        i2 = 0;
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;
          for (; (i2 < xL || k) && sd--; i2++) {
            t = k * base2 + (xd[i2] || 0);
            qd[i2] = t / yd | 0;
            k = t % yd | 0;
          }
          more = k || i2 < xL;
        } else {
          k = base2 / (yd[0] + 1) | 0;
          if (k > 1) {
            yd = multiplyInteger(yd, k, base2);
            xd = multiplyInteger(xd, k, base2);
            yL = yd.length;
            xL = xd.length;
          }
          xi = yL;
          rem4 = xd.slice(0, yL);
          remL = rem4.length;
          for (; remL < yL; )
            rem4[remL++] = 0;
          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];
          if (yd[1] >= base2 / 2)
            ++yd0;
          do {
            k = 0;
            cmp = compare9(yd, rem4, yL, remL);
            if (cmp < 0) {
              rem0 = rem4[0];
              if (yL != remL)
                rem0 = rem0 * base2 + (rem4[1] || 0);
              k = rem0 / yd0 | 0;
              if (k > 1) {
                if (k >= base2)
                  k = base2 - 1;
                prod = multiplyInteger(yd, k, base2);
                prodL = prod.length;
                remL = rem4.length;
                cmp = compare9(prod, rem4, prodL, remL);
                if (cmp == 1) {
                  k--;
                  subtract(prod, yL < prodL ? yz : yd, prodL, base2);
                }
              } else {
                if (k == 0)
                  cmp = k = 1;
                prod = yd.slice();
              }
              prodL = prod.length;
              if (prodL < remL)
                prod.unshift(0);
              subtract(rem4, prod, remL, base2);
              if (cmp == -1) {
                remL = rem4.length;
                cmp = compare9(yd, rem4, yL, remL);
                if (cmp < 1) {
                  k++;
                  subtract(rem4, yL < remL ? yz : yd, remL, base2);
                }
              }
              remL = rem4.length;
            } else if (cmp === 0) {
              k++;
              rem4 = [0];
            }
            qd[i2++] = k;
            if (cmp && rem4[0]) {
              rem4[remL++] = xd[xi] || 0;
            } else {
              rem4 = [xd[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem4[0] !== void 0) && sd--);
          more = rem4[0] !== void 0;
        }
        if (!qd[0])
          qd.shift();
      }
      if (logBase == 1) {
        q2.e = e2;
        inexact = more;
      } else {
        for (i2 = 1, k = qd[0]; k >= 10; k /= 10)
          i2++;
        q2.e = i2 + e2 * logBase - 1;
        finalise(q2, dp ? pr + q2.e + 1 : pr, rm, more);
      }
      return q2;
    };
  }();
  function finalise(x, sd, rm, isTruncated) {
    var digits, i2, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
    out:
      if (sd != null) {
        xd = x.d;
        if (!xd)
          return x;
        for (digits = 1, k = xd[0]; k >= 10; k /= 10)
          digits++;
        i2 = sd - digits;
        if (i2 < 0) {
          i2 += LOG_BASE;
          j = sd;
          w = xd[xdi = 0];
          rd = w / mathpow(10, digits - j - 1) % 10 | 0;
        } else {
          xdi = Math.ceil((i2 + 1) / LOG_BASE);
          k = xd.length;
          if (xdi >= k) {
            if (isTruncated) {
              for (; k++ <= xdi; )
                xd.push(0);
              w = rd = 0;
              digits = 1;
              i2 %= LOG_BASE;
              j = i2 - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            w = k = xd[xdi];
            for (digits = 1; k >= 10; k /= 10)
              digits++;
            i2 %= LOG_BASE;
            j = i2 - LOG_BASE + digits;
            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
          }
        }
        isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
        roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i2 > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
        if (sd < 1 || !xd[0]) {
          xd.length = 0;
          if (roundUp) {
            sd -= x.e + 1;
            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
            x.e = -sd || 0;
          } else {
            xd[0] = x.e = 0;
          }
          return x;
        }
        if (i2 == 0) {
          xd.length = xdi;
          k = 1;
          xdi--;
        } else {
          xd.length = xdi + 1;
          k = mathpow(10, LOG_BASE - i2);
          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
        }
        if (roundUp) {
          for (; ; ) {
            if (xdi == 0) {
              for (i2 = 1, j = xd[0]; j >= 10; j /= 10)
                i2++;
              j = xd[0] += k;
              for (k = 1; j >= 10; j /= 10)
                k++;
              if (i2 != k) {
                x.e++;
                if (xd[0] == BASE)
                  xd[0] = 1;
              }
              break;
            } else {
              xd[xdi] += k;
              if (xd[xdi] != BASE)
                break;
              xd[xdi--] = 0;
              k = 1;
            }
          }
        }
        for (i2 = xd.length; xd[--i2] === 0; )
          xd.pop();
      }
    if (external) {
      if (x.e > Ctor.maxE) {
        x.d = null;
        x.e = NaN;
      } else if (x.e < Ctor.minE) {
        x.e = 0;
        x.d = [0];
      }
    }
    return x;
  }
  function finiteToString(x, isExp, sd) {
    if (!x.isFinite())
      return nonFiniteToString(x);
    var k, e2 = x.e, str = digitsToString(x.d), len = str.length;
    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + "." + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + "." + str.slice(1);
      }
      str = str + (x.e < 0 ? "e" : "e+") + x.e;
    } else if (e2 < 0) {
      str = "0." + getZeroString(-e2 - 1) + str;
      if (sd && (k = sd - len) > 0)
        str += getZeroString(k);
    } else if (e2 >= len) {
      str += getZeroString(e2 + 1 - len);
      if (sd && (k = sd - e2 - 1) > 0)
        str = str + "." + getZeroString(k);
    } else {
      if ((k = e2 + 1) < len)
        str = str.slice(0, k) + "." + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e2 + 1 === len)
          str += ".";
        str += getZeroString(k);
      }
    }
    return str;
  }
  function getBase10Exponent(digits, e2) {
    var w = digits[0];
    for (e2 *= LOG_BASE; w >= 10; w /= 10)
      e2++;
    return e2;
  }
  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {
      external = true;
      if (pr)
        Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }
  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION)
      throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }
  function getPrecision(digits) {
    var w = digits.length - 1, len = w * LOG_BASE + 1;
    w = digits[w];
    if (w) {
      for (; w % 10 == 0; w /= 10)
        len--;
      for (w = digits[0]; w >= 10; w /= 10)
        len++;
    }
    return len;
  }
  function getZeroString(k) {
    var zs = "";
    for (; k--; )
      zs += "0";
    return zs;
  }
  function intPow(Ctor, x, n, pr) {
    var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);
    external = false;
    for (; ; ) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k))
          isTruncated = true;
      }
      n = mathfloor(n / 2);
      if (n === 0) {
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0)
          ++r.d[n];
        break;
      }
      x = x.times(x);
      truncate(x.d, k);
    }
    external = true;
    return r;
  }
  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }
  function maxOrMin(Ctor, args, ltgt) {
    var y, x = new Ctor(args[0]), i2 = 0;
    for (; ++i2 < args.length; ) {
      y = new Ctor(args[i2]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }
    return x;
  }
  function naturalExponential(x, sd) {
    var denominator, guard4, j, pow6, sum3, t, wpr, rep = 0, i2 = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
    if (!x.d || !x.d[0] || x.e > 17) {
      return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }
    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }
    t = new Ctor(0.03125);
    while (x.e > -2) {
      x = x.times(t);
      k += 5;
    }
    guard4 = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard4;
    denominator = pow6 = sum3 = new Ctor(1);
    Ctor.precision = wpr;
    for (; ; ) {
      pow6 = finalise(pow6.times(x), wpr, 1);
      denominator = denominator.times(++i2);
      t = sum3.plus(divide(pow6, denominator, wpr, 1));
      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum3.d).slice(0, wpr)) {
        j = k;
        while (j--)
          sum3 = finalise(sum3.times(sum3), wpr, 1);
        if (sd == null) {
          if (rep < 3 && checkRoundingDigits(sum3.d, wpr - guard4, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow6 = t = new Ctor(1);
            i2 = 0;
            rep++;
          } else {
            return finalise(sum3, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum3;
        }
      }
      sum3 = t;
    }
  }
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e2, numerator, rep, sum3, t, wpr, x1, x2, n = 1, guard4 = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }
    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }
    Ctor.precision = wpr += guard4;
    c = digitsToString(xd);
    c0 = c.charAt(0);
    if (Math.abs(e2 = x.e) < 15e14) {
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }
      e2 = x.e;
      if (c0 > 1) {
        x = new Ctor("0." + c);
        e2++;
      } else {
        x = new Ctor(c0 + "." + c.slice(1));
      }
    } else {
      t = getLn10(Ctor, wpr + 2, pr).times(e2 + "");
      x = naturalLogarithm(new Ctor(c0 + "." + c.slice(1)), wpr - guard4).plus(t);
      Ctor.precision = pr;
      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }
    x1 = x;
    sum3 = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;
    for (; ; ) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum3.plus(divide(numerator, new Ctor(denominator), wpr, 1));
      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum3.d).slice(0, wpr)) {
        sum3 = sum3.times(2);
        if (e2 !== 0)
          sum3 = sum3.plus(getLn10(Ctor, wpr + 2, pr).times(e2 + ""));
        sum3 = divide(sum3, new Ctor(n), wpr, 1);
        if (sd == null) {
          if (checkRoundingDigits(sum3.d, wpr - guard4, rm, rep)) {
            Ctor.precision = wpr += guard4;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum3, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum3;
        }
      }
      sum3 = t;
      denominator += 2;
    }
  }
  function nonFiniteToString(x) {
    return String(x.s * x.s / 0);
  }
  function parseDecimal(x, str) {
    var e2, i2, len;
    if ((e2 = str.indexOf(".")) > -1)
      str = str.replace(".", "");
    if ((i2 = str.search(/e/i)) > 0) {
      if (e2 < 0)
        e2 = i2;
      e2 += +str.slice(i2 + 1);
      str = str.substring(0, i2);
    } else if (e2 < 0) {
      e2 = str.length;
    }
    for (i2 = 0; str.charCodeAt(i2) === 48; i2++)
      ;
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
      ;
    str = str.slice(i2, len);
    if (str) {
      len -= i2;
      x.e = e2 = e2 - i2 - 1;
      x.d = [];
      i2 = (e2 + 1) % LOG_BASE;
      if (e2 < 0)
        i2 += LOG_BASE;
      if (i2 < len) {
        if (i2)
          x.d.push(+str.slice(0, i2));
        for (len -= LOG_BASE; i2 < len; )
          x.d.push(+str.slice(i2, i2 += LOG_BASE));
        str = str.slice(i2);
        i2 = LOG_BASE - str.length;
      } else {
        i2 -= len;
      }
      for (; i2--; )
        str += "0";
      x.d.push(+str);
      if (external) {
        if (x.e > x.constructor.maxE) {
          x.d = null;
          x.e = NaN;
        } else if (x.e < x.constructor.minE) {
          x.e = 0;
          x.d = [0];
        }
      }
    } else {
      x.e = 0;
      x.d = [0];
    }
    return x;
  }
  function parseOther(x, str) {
    var base2, Ctor, divisor, i2, isFloat, len, p2, xd, xe;
    if (str.indexOf("_") > -1) {
      str = str.replace(/(\d)_(?=\d)/g, "$1");
      if (isDecimal.test(str))
        return parseDecimal(x, str);
    } else if (str === "Infinity" || str === "NaN") {
      if (!+str)
        x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }
    if (isHex.test(str)) {
      base2 = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str)) {
      base2 = 2;
    } else if (isOctal.test(str)) {
      base2 = 8;
    } else {
      throw Error(invalidArgument + str);
    }
    i2 = str.search(/p/i);
    if (i2 > 0) {
      p2 = +str.slice(i2 + 1);
      str = str.substring(2, i2);
    } else {
      str = str.slice(2);
    }
    i2 = str.indexOf(".");
    isFloat = i2 >= 0;
    Ctor = x.constructor;
    if (isFloat) {
      str = str.replace(".", "");
      len = str.length;
      i2 = len - i2;
      divisor = intPow(Ctor, new Ctor(base2), i2, i2 * 2);
    }
    xd = convertBase(str, base2, BASE);
    xe = xd.length - 1;
    for (i2 = xe; xd[i2] === 0; --i2)
      xd.pop();
    if (i2 < 0)
      return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;
    if (isFloat)
      x = divide(x, divisor, len * 4);
    if (p2)
      x = x.times(Math.abs(p2) < 54 ? mathpow(2, p2) : Decimal.pow(2, p2));
    external = true;
    return x;
  }
  function sine(Ctor, x) {
    var k, len = x.d.length;
    if (len < 3) {
      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
    }
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;
    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x);
    var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
    for (; k--; ) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }
    return x;
  }
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u2, x2, i2 = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
    external = false;
    x2 = x.times(x);
    u2 = new Ctor(y);
    for (; ; ) {
      t = divide(u2.times(x2), new Ctor(n++ * n++), pr, 1);
      u2 = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u2.plus(y);
      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u2.d[j] && j--; )
          ;
        if (j == -1)
          break;
      }
      j = u2;
      u2 = y;
      y = t;
      t = j;
      i2++;
    }
    external = true;
    t.d.length = k + 1;
    return t;
  }
  function tinyPow(b2, e2) {
    var n = b2;
    while (--e2)
      n *= b2;
    return n;
  }
  function toLessThanHalfPi(Ctor, x) {
    var t, isNeg = x.s < 0, pi2 = getPi(Ctor, Ctor.precision, 1), halfPi = pi2.times(0.5);
    x = x.abs();
    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }
    t = x.divToInt(pi2);
    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi2));
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
        return x;
      }
      quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
    }
    return x.minus(pi2).abs();
  }
  function toStringBinary(x, baseOut, sd, rm) {
    var base2, e2, i2, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }
    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i2 = str.indexOf(".");
      if (isExp) {
        base2 = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base2 = baseOut;
      }
      if (i2 >= 0) {
        str = str.replace(".", "");
        y = new Ctor(1);
        y.e = str.length - i2;
        y.d = convertBase(finiteToString(y), 10, base2);
        y.e = y.d.length;
      }
      xd = convertBase(str, 10, base2);
      e2 = len = xd.length;
      for (; xd[--len] == 0; )
        xd.pop();
      if (!xd[0]) {
        str = isExp ? "0p+0" : "0";
      } else {
        if (i2 < 0) {
          e2--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e2;
          x = divide(x, y, sd, rm, 0, base2);
          xd = x.d;
          e2 = x.e;
          roundUp = inexact;
        }
        i2 = xd[sd];
        k = base2 / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;
        roundUp = rm < 4 ? (i2 !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i2 > k || i2 === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
        xd.length = sd;
        if (roundUp) {
          for (; ++xd[--sd] > base2 - 1; ) {
            xd[sd] = 0;
            if (!sd) {
              ++e2;
              xd.unshift(1);
            }
          }
        }
        for (len = xd.length; !xd[len - 1]; --len)
          ;
        for (i2 = 0, str = ""; i2 < len; i2++)
          str += NUMERALS.charAt(xd[i2]);
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i2 = baseOut == 16 ? 4 : 3;
              for (--len; len % i2; len++)
                str += "0";
              xd = convertBase(str, base2, baseOut);
              for (len = xd.length; !xd[len - 1]; --len)
                ;
              for (i2 = 1, str = "1."; i2 < len; i2++)
                str += NUMERALS.charAt(xd[i2]);
            } else {
              str = str.charAt(0) + "." + str.slice(1);
            }
          }
          str = str + (e2 < 0 ? "p" : "p+") + e2;
        } else if (e2 < 0) {
          for (; ++e2; )
            str = "0" + str;
          str = "0." + str;
        } else {
          if (++e2 > len)
            for (e2 -= len; e2--; )
              str += "0";
          else if (e2 < len)
            str = str.slice(0, e2) + "." + str.slice(e2);
        }
      }
      str = (baseOut == 16 ? "0x" : baseOut == 2 ? "0b" : baseOut == 8 ? "0o" : "") + str;
    }
    return x.s < 0 ? "-" + str : str;
  }
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }
  function abs3(x) {
    return new this(x).abs();
  }
  function acos2(x) {
    return new this(x).acos();
  }
  function acosh(x) {
    return new this(x).acosh();
  }
  function add2(x, y) {
    return new this(x).plus(y);
  }
  function asin2(x) {
    return new this(x).asin();
  }
  function asinh(x) {
    return new this(x).asinh();
  }
  function atan3(x) {
    return new this(x).atan();
  }
  function atanh(x) {
    return new this(x).atanh();
  }
  function atan22(y, x) {
    y = new this(y);
    x = new this(x);
    var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
    if (!y.s || !x.s) {
      r = new this(NaN);
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }
    return r;
  }
  function cbrt(x) {
    return new this(x).cbrt();
  }
  function ceil3(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }
  function clamp(x, min7, max8) {
    return new this(x).clamp(min7, max8);
  }
  function config(obj) {
    if (!obj || typeof obj !== "object")
      throw Error(decimalError + "Object expected");
    var i2, p2, v, useDefaults = obj.defaults === true, ps = [
      "precision",
      1,
      MAX_DIGITS,
      "rounding",
      0,
      8,
      "toExpNeg",
      -EXP_LIMIT,
      0,
      "toExpPos",
      0,
      EXP_LIMIT,
      "maxE",
      0,
      EXP_LIMIT,
      "minE",
      -EXP_LIMIT,
      0,
      "modulo",
      0,
      9
    ];
    for (i2 = 0; i2 < ps.length; i2 += 3) {
      if (p2 = ps[i2], useDefaults)
        this[p2] = DEFAULTS[p2];
      if ((v = obj[p2]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i2 + 1] && v <= ps[i2 + 2])
          this[p2] = v;
        else
          throw Error(invalidArgument + p2 + ": " + v);
      }
    }
    if (p2 = "crypto", useDefaults)
      this[p2] = DEFAULTS[p2];
    if ((v = obj[p2]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
            this[p2] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p2] = false;
        }
      } else {
        throw Error(invalidArgument + p2 + ": " + v);
      }
    }
    return this;
  }
  function cos2(x) {
    return new this(x).cos();
  }
  function cosh(x) {
    return new this(x).cosh();
  }
  function clone(obj) {
    var i2, p2, ps;
    function Decimal2(v) {
      var e2, i3, t, x = this;
      if (!(x instanceof Decimal2))
        return new Decimal2(v);
      x.constructor = Decimal2;
      if (isDecimalInstance(v)) {
        x.s = v.s;
        if (external) {
          if (!v.d || v.e > Decimal2.maxE) {
            x.e = NaN;
            x.d = null;
          } else if (v.e < Decimal2.minE) {
            x.e = 0;
            x.d = [0];
          } else {
            x.e = v.e;
            x.d = v.d.slice();
          }
        } else {
          x.e = v.e;
          x.d = v.d ? v.d.slice() : v.d;
        }
        return;
      }
      t = typeof v;
      if (t === "number") {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }
        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }
        if (v === ~~v && v < 1e7) {
          for (e2 = 0, i3 = v; i3 >= 10; i3 /= 10)
            e2++;
          if (external) {
            if (e2 > Decimal2.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (e2 < Decimal2.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = e2;
              x.d = [v];
            }
          } else {
            x.e = e2;
            x.d = [v];
          }
          return;
        } else if (v * 0 !== 0) {
          if (!v)
            x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }
        return parseDecimal(x, v.toString());
      } else if (t !== "string") {
        throw Error(invalidArgument + v);
      }
      if ((i3 = v.charCodeAt(0)) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        if (i3 === 43)
          v = v.slice(1);
        x.s = 1;
      }
      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }
    Decimal2.prototype = P;
    Decimal2.ROUND_UP = 0;
    Decimal2.ROUND_DOWN = 1;
    Decimal2.ROUND_CEIL = 2;
    Decimal2.ROUND_FLOOR = 3;
    Decimal2.ROUND_HALF_UP = 4;
    Decimal2.ROUND_HALF_DOWN = 5;
    Decimal2.ROUND_HALF_EVEN = 6;
    Decimal2.ROUND_HALF_CEIL = 7;
    Decimal2.ROUND_HALF_FLOOR = 8;
    Decimal2.EUCLID = 9;
    Decimal2.config = Decimal2.set = config;
    Decimal2.clone = clone;
    Decimal2.isDecimal = isDecimalInstance;
    Decimal2.abs = abs3;
    Decimal2.acos = acos2;
    Decimal2.acosh = acosh;
    Decimal2.add = add2;
    Decimal2.asin = asin2;
    Decimal2.asinh = asinh;
    Decimal2.atan = atan3;
    Decimal2.atanh = atanh;
    Decimal2.atan2 = atan22;
    Decimal2.cbrt = cbrt;
    Decimal2.ceil = ceil3;
    Decimal2.clamp = clamp;
    Decimal2.cos = cos2;
    Decimal2.cosh = cosh;
    Decimal2.div = div7;
    Decimal2.exp = exp2;
    Decimal2.floor = floor3;
    Decimal2.hypot = hypot;
    Decimal2.ln = ln;
    Decimal2.log = log2;
    Decimal2.log10 = log10;
    Decimal2.log2 = log22;
    Decimal2.max = max6;
    Decimal2.min = min5;
    Decimal2.mod = mod4;
    Decimal2.mul = mul2;
    Decimal2.pow = pow3;
    Decimal2.random = random2;
    Decimal2.round = round3;
    Decimal2.sign = sign2;
    Decimal2.sin = sin2;
    Decimal2.sinh = sinh;
    Decimal2.sqrt = sqrt2;
    Decimal2.sub = sub3;
    Decimal2.sum = sum2;
    Decimal2.tan = tan2;
    Decimal2.tanh = tanh;
    Decimal2.trunc = trunc2;
    if (obj === void 0)
      obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"];
        for (i2 = 0; i2 < ps.length; )
          if (!obj.hasOwnProperty(p2 = ps[i2++]))
            obj[p2] = this[p2];
      }
    }
    Decimal2.config(obj);
    return Decimal2;
  }
  function div7(x, y) {
    return new this(x).div(y);
  }
  function exp2(x) {
    return new this(x).exp();
  }
  function floor3(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }
  function hypot() {
    var i2, n, t = new this(0);
    external = false;
    for (i2 = 0; i2 < arguments.length; ) {
      n = new this(arguments[i2++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }
    external = true;
    return t.sqrt();
  }
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
  }
  function ln(x) {
    return new this(x).ln();
  }
  function log2(x, y) {
    return new this(x).log(y);
  }
  function log22(x) {
    return new this(x).log(2);
  }
  function log10(x) {
    return new this(x).log(10);
  }
  function max6() {
    return maxOrMin(this, arguments, "lt");
  }
  function min5() {
    return maxOrMin(this, arguments, "gt");
  }
  function mod4(x, y) {
    return new this(x).mod(y);
  }
  function mul2(x, y) {
    return new this(x).mul(y);
  }
  function pow3(x, y) {
    return new this(x).pow(y);
  }
  function random2(sd) {
    var d, e2, k, n, i2 = 0, r = new this(1), rd = [];
    if (sd === void 0)
      sd = this.precision;
    else
      checkInt32(sd, 1, MAX_DIGITS);
    k = Math.ceil(sd / LOG_BASE);
    if (!this.crypto) {
      for (; i2 < k; )
        rd[i2++] = Math.random() * 1e7 | 0;
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));
      for (; i2 < k; ) {
        n = d[i2];
        if (n >= 429e7) {
          d[i2] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {
          rd[i2++] = n % 1e7;
        }
      }
    } else if (crypto.randomBytes) {
      d = crypto.randomBytes(k *= 4);
      for (; i2 < k; ) {
        n = d[i2] + (d[i2 + 1] << 8) + (d[i2 + 2] << 16) + ((d[i2 + 3] & 127) << 24);
        if (n >= 214e7) {
          crypto.randomBytes(4).copy(d, i2);
        } else {
          rd.push(n % 1e7);
          i2 += 4;
        }
      }
      i2 = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }
    k = rd[--i2];
    sd %= LOG_BASE;
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i2] = (k / n | 0) * n;
    }
    for (; rd[i2] === 0; i2--)
      rd.pop();
    if (i2 < 0) {
      e2 = 0;
      rd = [0];
    } else {
      e2 = -1;
      for (; rd[0] === 0; e2 -= LOG_BASE)
        rd.shift();
      for (k = 1, n = rd[0]; n >= 10; n /= 10)
        k++;
      if (k < LOG_BASE)
        e2 -= LOG_BASE - k;
    }
    r.e = e2;
    r.d = rd;
    return r;
  }
  function round3(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }
  function sign2(x) {
    x = new this(x);
    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
  }
  function sin2(x) {
    return new this(x).sin();
  }
  function sinh(x) {
    return new this(x).sinh();
  }
  function sqrt2(x) {
    return new this(x).sqrt();
  }
  function sub3(x, y) {
    return new this(x).sub(y);
  }
  function sum2() {
    var i2 = 0, args = arguments, x = new this(args[i2]);
    external = false;
    for (; x.s && ++i2 < args.length; )
      x = x.plus(args[i2]);
    external = true;
    return finalise(x, this.precision, this.rounding);
  }
  function tan2(x) {
    return new this(x).tan();
  }
  function tanh(x) {
    return new this(x).tanh();
  }
  function trunc2(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }
  P[Symbol.for("nodejs.util.inspect.custom")] = P.toString;
  P[Symbol.toStringTag] = "Decimal";
  var Decimal = P.constructor = clone(DEFAULTS);
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);
  var decimal_default = Decimal;

  // output/Data.Decimal/foreign.js
  decimal_default.set({ precision: 30 });
  decimal_default.set({ modulo: decimal_default.EUCLID });
  function fromNumber2(x) {
    return new decimal_default(x);
  }
  function fromStringImpl2(nothing) {
    return function(just) {
      return function(str) {
        try {
          return just(new decimal_default(str));
        } catch (e2) {
          return nothing;
        }
      };
    };
  }
  function toString2(x) {
    return x.toString();
  }
  function dAdd(x) {
    return function(y) {
      return x.add(y);
    };
  }
  function dMul(x) {
    return function(y) {
      return x.mul(y);
    };
  }
  function floor4(x) {
    return x.floor();
  }
  var e = decimal_default.exp(1);
  var pi = new decimal_default("3.14159265358979323846264338327950288419716939937510582097494459230781640628620899");

  // output/Data.Decimal/index.js
  var showDecimal = {
    show: function(x) {
      return '(fromString "' + (toString2(x) + '")');
    }
  };
  var semiringDecimal = {
    add: dAdd,
    zero: /* @__PURE__ */ fromNumber2(0),
    mul: dMul,
    one: /* @__PURE__ */ fromNumber2(1)
  };
  var fromString3 = /* @__PURE__ */ function() {
    return fromStringImpl2(Nothing.value)(Just.create);
  }();

  // output/Data.Enum.Generic/index.js
  var map19 = /* @__PURE__ */ map(functorMaybe);
  var unwrap3 = /* @__PURE__ */ unwrap();
  var genericToEnum$prime = function(dict) {
    return dict["genericToEnum'"];
  };
  var genericToEnum = function(dictGeneric) {
    var to3 = to(dictGeneric);
    return function(dictGenericBoundedEnum) {
      var $153 = map19(to3);
      var $154 = genericToEnum$prime(dictGenericBoundedEnum);
      return function($155) {
        return $153($154($155));
      };
    };
  };
  var genericSucc$prime = function(dict) {
    return dict["genericSucc'"];
  };
  var genericSucc = function(dictGeneric) {
    var to3 = to(dictGeneric);
    var from3 = from(dictGeneric);
    return function(dictGenericEnum) {
      var $156 = map19(to3);
      var $157 = genericSucc$prime(dictGenericEnum);
      return function($158) {
        return $156($157(from3($158)));
      };
    };
  };
  var genericPred$prime = function(dict) {
    return dict["genericPred'"];
  };
  var genericPred = function(dictGeneric) {
    var to3 = to(dictGeneric);
    var from3 = from(dictGeneric);
    return function(dictGenericEnum) {
      var $159 = map19(to3);
      var $160 = genericPred$prime(dictGenericEnum);
      return function($161) {
        return $159($160(from3($161)));
      };
    };
  };
  var genericFromEnum$prime = function(dict) {
    return dict["genericFromEnum'"];
  };
  var genericFromEnum = function(dictGeneric) {
    var from3 = from(dictGeneric);
    return function(dictGenericBoundedEnum) {
      var $162 = genericFromEnum$prime(dictGenericBoundedEnum);
      return function($163) {
        return $162(from3($163));
      };
    };
  };
  var genericEnumSum = function(dictGenericEnum) {
    var genericPred$prime1 = genericPred$prime(dictGenericEnum);
    var genericSucc$prime1 = genericSucc$prime(dictGenericEnum);
    return function(dictGenericTop) {
      var genericTop$prime2 = genericTop$prime(dictGenericTop);
      return function(dictGenericEnum1) {
        var genericPred$prime2 = genericPred$prime(dictGenericEnum1);
        var genericSucc$prime2 = genericSucc$prime(dictGenericEnum1);
        return function(dictGenericBottom) {
          var genericBottom$prime2 = genericBottom$prime(dictGenericBottom);
          return {
            "genericPred'": function(v) {
              if (v instanceof Inl) {
                return map19(Inl.create)(genericPred$prime1(v.value0));
              }
              ;
              if (v instanceof Inr) {
                var v1 = genericPred$prime2(v.value0);
                if (v1 instanceof Nothing) {
                  return new Just(new Inl(genericTop$prime2));
                }
                ;
                if (v1 instanceof Just) {
                  return new Just(new Inr(v1.value0));
                }
                ;
                throw new Error("Failed pattern match at Data.Enum.Generic (line 30, column 14 - line 32, column 31): " + [v1.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.Enum.Generic (line 28, column 18 - line 32, column 31): " + [v.constructor.name]);
            },
            "genericSucc'": function(v) {
              if (v instanceof Inl) {
                var v1 = genericSucc$prime1(v.value0);
                if (v1 instanceof Nothing) {
                  return new Just(new Inr(genericBottom$prime2));
                }
                ;
                if (v1 instanceof Just) {
                  return new Just(new Inl(v1.value0));
                }
                ;
                throw new Error("Failed pattern match at Data.Enum.Generic (line 34, column 14 - line 36, column 31): " + [v1.constructor.name]);
              }
              ;
              if (v instanceof Inr) {
                return map19(Inr.create)(genericSucc$prime2(v.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Enum.Generic (line 33, column 18 - line 37, column 36): " + [v.constructor.name]);
            }
          };
        };
      };
    };
  };
  var genericEnumNoArguments = {
    "genericPred'": function(v) {
      return Nothing.value;
    },
    "genericSucc'": function(v) {
      return Nothing.value;
    }
  };
  var genericEnumConstructor = function(dictGenericEnum) {
    var genericPred$prime1 = genericPred$prime(dictGenericEnum);
    var genericSucc$prime1 = genericSucc$prime(dictGenericEnum);
    return {
      "genericPred'": function(v) {
        return map19(Constructor)(genericPred$prime1(v));
      },
      "genericSucc'": function(v) {
        return map19(Constructor)(genericSucc$prime1(v));
      }
    };
  };
  var genericCardinality$prime = function(dict) {
    return dict["genericCardinality'"];
  };
  var genericCardinality = function(dictGeneric) {
    return function(dictGenericBoundedEnum) {
      return unwrap3(genericCardinality$prime(dictGenericBoundedEnum));
    };
  };
  var genericBoundedEnumSum = function(dictGenericBoundedEnum) {
    var genericCardinality$prime1 = genericCardinality$prime(dictGenericBoundedEnum);
    var genericToEnum$prime1 = genericToEnum$prime(dictGenericBoundedEnum);
    var genericFromEnum$prime1 = genericFromEnum$prime(dictGenericBoundedEnum);
    return function(dictGenericBoundedEnum1) {
      var genericToEnum$prime2 = genericToEnum$prime(dictGenericBoundedEnum1);
      var genericFromEnum$prime2 = genericFromEnum$prime(dictGenericBoundedEnum1);
      return {
        "genericCardinality'": unwrap3(genericCardinality$prime1) + unwrap3(genericCardinality$prime(dictGenericBoundedEnum1)) | 0,
        "genericToEnum'": function(n) {
          var to3 = function(v) {
            if (n >= 0 && n < v) {
              return map19(Inl.create)(genericToEnum$prime1(n));
            }
            ;
            if (otherwise) {
              return map19(Inr.create)(genericToEnum$prime2(n - v | 0));
            }
            ;
            throw new Error("Failed pattern match at Data.Enum.Generic (line 83, column 5 - line 83, column 43): " + [v.constructor.name]);
          };
          return to3(genericCardinality$prime1);
        },
        "genericFromEnum'": function(v) {
          if (v instanceof Inl) {
            return genericFromEnum$prime1(v.value0);
          }
          ;
          if (v instanceof Inr) {
            return genericFromEnum$prime2(v.value0) + unwrap3(genericCardinality$prime1) | 0;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum.Generic (line 87, column 22 - line 89, column 80): " + [v.constructor.name]);
        }
      };
    };
  };
  var genericBoundedEnumNoArguments = {
    "genericCardinality'": 1,
    "genericToEnum'": function(i2) {
      var $150 = i2 === 0;
      if ($150) {
        return new Just(NoArguments.value);
      }
      ;
      return Nothing.value;
    },
    "genericFromEnum'": function(v) {
      return 0;
    }
  };
  var genericBoundedEnumConstructor = function(dictGenericBoundedEnum) {
    var genericToEnum$prime1 = genericToEnum$prime(dictGenericBoundedEnum);
    var genericFromEnum$prime1 = genericFromEnum$prime(dictGenericBoundedEnum);
    return {
      "genericCardinality'": unwrap3(genericCardinality$prime(dictGenericBoundedEnum)),
      "genericToEnum'": function(i2) {
        return map19(Constructor)(genericToEnum$prime1(i2));
      },
      "genericFromEnum'": function(v) {
        return genericFromEnum$prime1(v);
      }
    };
  };

  // output/Data.JSDate/foreign.js
  function toInstantImpl(just) {
    return function(nothing) {
      return function(date2) {
        var t = date2.getTime();
        return isNaN(t) ? nothing : just(t);
      };
    };
  }
  function parse7(dateString) {
    return function() {
      return new Date(dateString);
    };
  }

  // output/Data.DateTime.Instant/foreign.js
  var createDateTime = function(y, m, d, h, mi, s2, ms) {
    var dateTime3 = new Date(Date.UTC(y, m, d, h, mi, s2, ms));
    if (y >= 0 && y < 100) {
      dateTime3.setUTCFullYear(y);
    }
    return dateTime3;
  };
  function fromDateTimeImpl(y, mo, d, h, mi, s2, ms) {
    return createDateTime(y, mo - 1, d, h, mi, s2, ms).getTime();
  }
  function toDateTimeImpl(ctor) {
    return function(instant2) {
      var dt2 = new Date(instant2);
      return ctor(dt2.getUTCFullYear())(dt2.getUTCMonth() + 1)(dt2.getUTCDate())(dt2.getUTCHours())(dt2.getUTCMinutes())(dt2.getUTCSeconds())(dt2.getUTCMilliseconds());
    };
  }

  // output/Data.DateTime.Instant/index.js
  var fromJust6 = /* @__PURE__ */ fromJust();
  var toEnum7 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var show11 = /* @__PURE__ */ show(showMilliseconds);
  var fromEnum7 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var unInstant = function(v) {
    return v;
  };
  var toDateTime = /* @__PURE__ */ function() {
    var mkDateTime = function(y) {
      return function(mo) {
        return function(d) {
          return function(h) {
            return function(mi) {
              return function(s2) {
                return function(ms) {
                  return new DateTime(canonicalDate(y)(fromJust6(toEnum7(mo)))(d), new Time(h, mi, s2, ms));
                };
              };
            };
          };
        };
      };
    };
    return toDateTimeImpl(mkDateTime);
  }();
  var showInstant = {
    show: function(v) {
      return "(Instant " + (show11(v) + ")");
    }
  };
  var instant = function(v) {
    if (v >= -86399778816e5 && v <= 8639977881599999) {
      return new Just(v);
    }
    ;
    if (otherwise) {
      return Nothing.value;
    }
    ;
    throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [v.constructor.name]);
  };
  var fromDateTime = function(v) {
    return fromDateTimeImpl(year(v.value0), fromEnum7(month(v.value0)), day(v.value0), hour(v.value1), minute(v.value1), second2(v.value1), millisecond(v.value1));
  };

  // output/Data.JSDate/index.js
  var map20 = /* @__PURE__ */ map(functorFn);
  var map110 = /* @__PURE__ */ map(functorMaybe);
  var toInstant = /* @__PURE__ */ function() {
    return composeKleisliFlipped(bindMaybe)(function($21) {
      return instant(Milliseconds($21));
    })(toInstantImpl(Just.create)(Nothing.value));
  }();
  var toDateTime2 = /* @__PURE__ */ map20(/* @__PURE__ */ map110(toDateTime))(toInstant);

  // output/Data.Show.Generic/foreign.js
  var intercalate4 = function(separator) {
    return function(xs) {
      return xs.join(separator);
    };
  };

  // output/Data.Show.Generic/index.js
  var append2 = /* @__PURE__ */ append(semigroupArray);
  var genericShowArgsNoArguments = {
    genericShowArgs: function(v) {
      return [];
    }
  };
  var genericShowArgsArgument = function(dictShow) {
    var show29 = show(dictShow);
    return {
      genericShowArgs: function(v) {
        return [show29(v)];
      }
    };
  };
  var genericShowArgs = function(dict) {
    return dict.genericShowArgs;
  };
  var genericShowArgsProduct = function(dictGenericShowArgs) {
    var genericShowArgs1 = genericShowArgs(dictGenericShowArgs);
    return function(dictGenericShowArgs1) {
      var genericShowArgs2 = genericShowArgs(dictGenericShowArgs1);
      return {
        genericShowArgs: function(v) {
          return append2(genericShowArgs1(v.value0))(genericShowArgs2(v.value1));
        }
      };
    };
  };
  var genericShowConstructor = function(dictGenericShowArgs) {
    var genericShowArgs1 = genericShowArgs(dictGenericShowArgs);
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return {
        "genericShow'": function(v) {
          var ctor = reflectSymbol2($$Proxy.value);
          var v1 = genericShowArgs1(v);
          if (v1.length === 0) {
            return ctor;
          }
          ;
          return "(" + (intercalate4(" ")(append2([ctor])(v1)) + ")");
        }
      };
    };
  };
  var genericShow$prime = function(dict) {
    return dict["genericShow'"];
  };
  var genericShowSum = function(dictGenericShow) {
    var genericShow$prime1 = genericShow$prime(dictGenericShow);
    return function(dictGenericShow1) {
      var genericShow$prime2 = genericShow$prime(dictGenericShow1);
      return {
        "genericShow'": function(v) {
          if (v instanceof Inl) {
            return genericShow$prime1(v.value0);
          }
          ;
          if (v instanceof Inr) {
            return genericShow$prime2(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [v.constructor.name]);
        }
      };
    };
  };
  var genericShow = function(dictGeneric) {
    var from3 = from(dictGeneric);
    return function(dictGenericShow) {
      var genericShow$prime1 = genericShow$prime(dictGenericShow);
      return function(x) {
        return genericShow$prime1(from3(x));
      };
    };
  };

  // output/Data.String.Regex/foreign.js
  var regexImpl = function(left2) {
    return function(right2) {
      return function(s1) {
        return function(s2) {
          try {
            return right2(new RegExp(s1, s2));
          } catch (e2) {
            return left2(e2.message);
          }
        };
      };
    };
  };
  var _match = function(just) {
    return function(nothing) {
      return function(r) {
        return function(s2) {
          var m = s2.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i2 = 0; i2 < m.length; i2++) {
              m[i2] = m[i2] == null ? nothing : just(m[i2]);
            }
            return just(m);
          }
        };
      };
    };
  };

  // output/Data.String.Regex.Flags/index.js
  var semigroupRegexFlags = {
    append: function(v) {
      return function(v1) {
        return {
          global: v.global || v1.global,
          ignoreCase: v.ignoreCase || v1.ignoreCase,
          multiline: v.multiline || v1.multiline,
          dotAll: v.dotAll || v1.dotAll,
          sticky: v.sticky || v1.sticky,
          unicode: v.unicode || v1.unicode
        };
      };
    }
  };
  var noFlags = {
    global: false,
    ignoreCase: false,
    multiline: false,
    dotAll: false,
    sticky: false,
    unicode: false
  };
  var monoidRegexFlags = {
    mempty: noFlags,
    Semigroup0: function() {
      return semigroupRegexFlags;
    }
  };

  // output/Data.String.Regex/index.js
  var renderFlags = function(v) {
    return function() {
      if (v.global) {
        return "g";
      }
      ;
      return "";
    }() + (function() {
      if (v.ignoreCase) {
        return "i";
      }
      ;
      return "";
    }() + (function() {
      if (v.multiline) {
        return "m";
      }
      ;
      return "";
    }() + (function() {
      if (v.dotAll) {
        return "s";
      }
      ;
      return "";
    }() + (function() {
      if (v.sticky) {
        return "y";
      }
      ;
      return "";
    }() + function() {
      if (v.unicode) {
        return "u";
      }
      ;
      return "";
    }()))));
  };
  var regex = function(s2) {
    return function(f) {
      return regexImpl(Left.create)(Right.create)(s2)(renderFlags(f));
    };
  };
  var match = /* @__PURE__ */ function() {
    return _match(Just.create)(Nothing.value);
  }();

  // output/Data.String.Regex.Unsafe/index.js
  var identity15 = /* @__PURE__ */ identity(categoryFn);
  var unsafeRegex = function(s2) {
    return function(f) {
      return either(unsafeCrashWith)(identity15)(regex(s2)(f));
    };
  };

  // output/Data.String.Utils/index.js
  var trimStart = function(s2) {
    return s2.trimStart(unit);
  };

  // output/Actus.Domain.ContractTerms/index.js
  var genericShowConstructor2 = /* @__PURE__ */ genericShowConstructor(genericShowArgsNoArguments);
  var showRecord2 = /* @__PURE__ */ showRecord()();
  var accruedInterestIsSymbol = {
    reflectSymbol: function() {
      return "accruedInterest";
    }
  };
  var showRecordFieldsCons2 = /* @__PURE__ */ showRecordFieldsCons(accruedInterestIsSymbol);
  var amortizationDateIsSymbol = {
    reflectSymbol: function() {
      return "amortizationDate";
    }
  };
  var showRecordFieldsCons1 = /* @__PURE__ */ showRecordFieldsCons(amortizationDateIsSymbol);
  var capitalizationEndDateIsSymbol = {
    reflectSymbol: function() {
      return "capitalizationEndDate";
    }
  };
  var showRecordFieldsCons22 = /* @__PURE__ */ showRecordFieldsCons(capitalizationEndDateIsSymbol);
  var contractIdIsSymbol = {
    reflectSymbol: function() {
      return "contractId";
    }
  };
  var showRecordFieldsCons3 = /* @__PURE__ */ showRecordFieldsCons(contractIdIsSymbol);
  var contractPerformanceIsSymbol = {
    reflectSymbol: function() {
      return "contractPerformance";
    }
  };
  var showRecordFieldsCons4 = /* @__PURE__ */ showRecordFieldsCons(contractPerformanceIsSymbol);
  var contractRoleIsSymbol = {
    reflectSymbol: function() {
      return "contractRole";
    }
  };
  var showRecordFieldsCons5 = /* @__PURE__ */ showRecordFieldsCons(contractRoleIsSymbol);
  var contractTypeIsSymbol = {
    reflectSymbol: function() {
      return "contractType";
    }
  };
  var showRecordFieldsCons6 = /* @__PURE__ */ showRecordFieldsCons(contractTypeIsSymbol);
  var coverageOfCreditEnhancementIsSymbol = {
    reflectSymbol: function() {
      return "coverageOfCreditEnhancement";
    }
  };
  var showRecordFieldsCons7 = /* @__PURE__ */ showRecordFieldsCons(coverageOfCreditEnhancementIsSymbol);
  var creditEventTypeCoveredIsSymbol = {
    reflectSymbol: function() {
      return "creditEventTypeCovered";
    }
  };
  var showRecordFieldsCons8 = /* @__PURE__ */ showRecordFieldsCons(creditEventTypeCoveredIsSymbol);
  var currencyIsSymbol = {
    reflectSymbol: function() {
      return "currency";
    }
  };
  var showRecordFieldsCons9 = /* @__PURE__ */ showRecordFieldsCons(currencyIsSymbol);
  var currency2IsSymbol = {
    reflectSymbol: function() {
      return "currency2";
    }
  };
  var showRecordFieldsCons10 = /* @__PURE__ */ showRecordFieldsCons(currency2IsSymbol);
  var cycleAnchorDateOfDividendPaymentIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfDividendPayment";
    }
  };
  var showRecordFieldsCons11 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfDividendPaymentIsSymbol);
  var cycleAnchorDateOfFeeIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfFee";
    }
  };
  var showRecordFieldsCons12 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfFeeIsSymbol);
  var cycleAnchorDateOfInterestCalculationBaseIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfInterestCalculationBase";
    }
  };
  var showRecordFieldsCons13 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfInterestCalculationBaseIsSymbol);
  var cycleAnchorDateOfInterestPaymentIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfInterestPayment";
    }
  };
  var showRecordFieldsCons14 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfInterestPaymentIsSymbol);
  var cycleAnchorDateOfOptionalityIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfOptionality";
    }
  };
  var showRecordFieldsCons15 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfOptionalityIsSymbol);
  var cycleAnchorDateOfPrincipalRedemptionIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfPrincipalRedemption";
    }
  };
  var showRecordFieldsCons16 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfPrincipalRedemptionIsSymbol);
  var cycleAnchorDateOfRateResetIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfRateReset";
    }
  };
  var showRecordFieldsCons17 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfRateResetIsSymbol);
  var cycleAnchorDateOfScalingIndexIsSymbol = {
    reflectSymbol: function() {
      return "cycleAnchorDateOfScalingIndex";
    }
  };
  var showRecordFieldsCons18 = /* @__PURE__ */ showRecordFieldsCons(cycleAnchorDateOfScalingIndexIsSymbol);
  var cycleOfDividendPaymentIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfDividendPayment";
    }
  };
  var showRecordFieldsCons19 = /* @__PURE__ */ showRecordFieldsCons(cycleOfDividendPaymentIsSymbol);
  var cycleOfFeeIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfFee";
    }
  };
  var showRecordFieldsCons20 = /* @__PURE__ */ showRecordFieldsCons(cycleOfFeeIsSymbol);
  var cycleOfInterestCalculationBaseIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfInterestCalculationBase";
    }
  };
  var showRecordFieldsCons21 = /* @__PURE__ */ showRecordFieldsCons(cycleOfInterestCalculationBaseIsSymbol);
  var cycleOfInterestPaymentIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfInterestPayment";
    }
  };
  var showRecordFieldsCons222 = /* @__PURE__ */ showRecordFieldsCons(cycleOfInterestPaymentIsSymbol);
  var cycleOfOptionalityIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfOptionality";
    }
  };
  var showRecordFieldsCons23 = /* @__PURE__ */ showRecordFieldsCons(cycleOfOptionalityIsSymbol);
  var cycleOfPrincipalRedemptionIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfPrincipalRedemption";
    }
  };
  var showRecordFieldsCons24 = /* @__PURE__ */ showRecordFieldsCons(cycleOfPrincipalRedemptionIsSymbol);
  var cycleOfRateResetIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfRateReset";
    }
  };
  var showRecordFieldsCons25 = /* @__PURE__ */ showRecordFieldsCons(cycleOfRateResetIsSymbol);
  var cycleOfScalingIndexIsSymbol = {
    reflectSymbol: function() {
      return "cycleOfScalingIndex";
    }
  };
  var showRecordFieldsCons26 = /* @__PURE__ */ showRecordFieldsCons(cycleOfScalingIndexIsSymbol);
  var dayCountConventionIsSymbol = {
    reflectSymbol: function() {
      return "dayCountConvention";
    }
  };
  var showRecordFieldsCons27 = /* @__PURE__ */ showRecordFieldsCons(dayCountConventionIsSymbol);
  var deliverySettlementIsSymbol = {
    reflectSymbol: function() {
      return "deliverySettlement";
    }
  };
  var showRecordFieldsCons28 = /* @__PURE__ */ showRecordFieldsCons(deliverySettlementIsSymbol);
  var exerciseAmountIsSymbol = {
    reflectSymbol: function() {
      return "exerciseAmount";
    }
  };
  var showRecordFieldsCons29 = /* @__PURE__ */ showRecordFieldsCons(exerciseAmountIsSymbol);
  var exerciseDateIsSymbol = {
    reflectSymbol: function() {
      return "exerciseDate";
    }
  };
  var showRecordFieldsCons30 = /* @__PURE__ */ showRecordFieldsCons(exerciseDateIsSymbol);
  var feeAccruedIsSymbol = {
    reflectSymbol: function() {
      return "feeAccrued";
    }
  };
  var showRecordFieldsCons31 = /* @__PURE__ */ showRecordFieldsCons(feeAccruedIsSymbol);
  var feeBasisIsSymbol = {
    reflectSymbol: function() {
      return "feeBasis";
    }
  };
  var showRecordFieldsCons32 = /* @__PURE__ */ showRecordFieldsCons(feeBasisIsSymbol);
  var feeRateIsSymbol = {
    reflectSymbol: function() {
      return "feeRate";
    }
  };
  var showRecordFieldsCons33 = /* @__PURE__ */ showRecordFieldsCons(feeRateIsSymbol);
  var futuresPriceIsSymbol = {
    reflectSymbol: function() {
      return "futuresPrice";
    }
  };
  var showRecordFieldsCons34 = /* @__PURE__ */ showRecordFieldsCons(futuresPriceIsSymbol);
  var guaranteedExposureIsSymbol = {
    reflectSymbol: function() {
      return "guaranteedExposure";
    }
  };
  var showRecordFieldsCons35 = /* @__PURE__ */ showRecordFieldsCons(guaranteedExposureIsSymbol);
  var initialExchangeDateIsSymbol = {
    reflectSymbol: function() {
      return "initialExchangeDate";
    }
  };
  var showRecordFieldsCons36 = /* @__PURE__ */ showRecordFieldsCons(initialExchangeDateIsSymbol);
  var interestCalculationBaseIsSymbol = {
    reflectSymbol: function() {
      return "interestCalculationBase";
    }
  };
  var showRecordFieldsCons37 = /* @__PURE__ */ showRecordFieldsCons(interestCalculationBaseIsSymbol);
  var interestCalculationBaseAmountIsSymbol = {
    reflectSymbol: function() {
      return "interestCalculationBaseAmount";
    }
  };
  var showRecordFieldsCons38 = /* @__PURE__ */ showRecordFieldsCons(interestCalculationBaseAmountIsSymbol);
  var interestScalingMultiplierIsSymbol = {
    reflectSymbol: function() {
      return "interestScalingMultiplier";
    }
  };
  var showRecordFieldsCons39 = /* @__PURE__ */ showRecordFieldsCons(interestScalingMultiplierIsSymbol);
  var lifeCapIsSymbol = {
    reflectSymbol: function() {
      return "lifeCap";
    }
  };
  var showRecordFieldsCons40 = /* @__PURE__ */ showRecordFieldsCons(lifeCapIsSymbol);
  var lifeFloorIsSymbol = {
    reflectSymbol: function() {
      return "lifeFloor";
    }
  };
  var showRecordFieldsCons41 = /* @__PURE__ */ showRecordFieldsCons(lifeFloorIsSymbol);
  var marketObjectCodeIsSymbol = {
    reflectSymbol: function() {
      return "marketObjectCode";
    }
  };
  var showRecordFieldsCons42 = /* @__PURE__ */ showRecordFieldsCons(marketObjectCodeIsSymbol);
  var marketObjectCodeOfRateResetIsSymbol = {
    reflectSymbol: function() {
      return "marketObjectCodeOfRateReset";
    }
  };
  var showRecordFieldsCons43 = /* @__PURE__ */ showRecordFieldsCons(marketObjectCodeOfRateResetIsSymbol);
  var marketObjectCodeOfScalingIndexIsSymbol = {
    reflectSymbol: function() {
      return "marketObjectCodeOfScalingIndex";
    }
  };
  var showRecordFieldsCons44 = /* @__PURE__ */ showRecordFieldsCons(marketObjectCodeOfScalingIndexIsSymbol);
  var maturityDateIsSymbol = {
    reflectSymbol: function() {
      return "maturityDate";
    }
  };
  var showRecordFieldsCons45 = /* @__PURE__ */ showRecordFieldsCons(maturityDateIsSymbol);
  var nextDividendPaymentAmountIsSymbol = {
    reflectSymbol: function() {
      return "nextDividendPaymentAmount";
    }
  };
  var showRecordFieldsCons46 = /* @__PURE__ */ showRecordFieldsCons(nextDividendPaymentAmountIsSymbol);
  var nextPrincipalRedemptionPaymentIsSymbol = {
    reflectSymbol: function() {
      return "nextPrincipalRedemptionPayment";
    }
  };
  var showRecordFieldsCons47 = /* @__PURE__ */ showRecordFieldsCons(nextPrincipalRedemptionPaymentIsSymbol);
  var nextResetRateIsSymbol = {
    reflectSymbol: function() {
      return "nextResetRate";
    }
  };
  var showRecordFieldsCons48 = /* @__PURE__ */ showRecordFieldsCons(nextResetRateIsSymbol);
  var nominalInterestRateIsSymbol = {
    reflectSymbol: function() {
      return "nominalInterestRate";
    }
  };
  var showRecordFieldsCons49 = /* @__PURE__ */ showRecordFieldsCons(nominalInterestRateIsSymbol);
  var nominalInterestRate2IsSymbol = {
    reflectSymbol: function() {
      return "nominalInterestRate2";
    }
  };
  var showRecordFieldsCons50 = /* @__PURE__ */ showRecordFieldsCons(nominalInterestRate2IsSymbol);
  var notionalPrincipalIsSymbol = {
    reflectSymbol: function() {
      return "notionalPrincipal";
    }
  };
  var showRecordFieldsCons51 = /* @__PURE__ */ showRecordFieldsCons(notionalPrincipalIsSymbol);
  var notionalScalingMultiplierIsSymbol = {
    reflectSymbol: function() {
      return "notionalScalingMultiplier";
    }
  };
  var showRecordFieldsCons52 = /* @__PURE__ */ showRecordFieldsCons(notionalScalingMultiplierIsSymbol);
  var optionExerciseTypeIsSymbol = {
    reflectSymbol: function() {
      return "optionExerciseType";
    }
  };
  var showRecordFieldsCons53 = /* @__PURE__ */ showRecordFieldsCons(optionExerciseTypeIsSymbol);
  var optionStrike1IsSymbol = {
    reflectSymbol: function() {
      return "optionStrike1";
    }
  };
  var showRecordFieldsCons54 = /* @__PURE__ */ showRecordFieldsCons(optionStrike1IsSymbol);
  var optionTypeIsSymbol = {
    reflectSymbol: function() {
      return "optionType";
    }
  };
  var showRecordFieldsCons55 = /* @__PURE__ */ showRecordFieldsCons(optionTypeIsSymbol);
  var penaltyRateIsSymbol = {
    reflectSymbol: function() {
      return "penaltyRate";
    }
  };
  var showRecordFieldsCons56 = /* @__PURE__ */ showRecordFieldsCons(penaltyRateIsSymbol);
  var penaltyTypeIsSymbol = {
    reflectSymbol: function() {
      return "penaltyType";
    }
  };
  var showRecordFieldsCons57 = /* @__PURE__ */ showRecordFieldsCons(penaltyTypeIsSymbol);
  var periodCapIsSymbol = {
    reflectSymbol: function() {
      return "periodCap";
    }
  };
  var showRecordFieldsCons58 = /* @__PURE__ */ showRecordFieldsCons(periodCapIsSymbol);
  var periodFloorIsSymbol = {
    reflectSymbol: function() {
      return "periodFloor";
    }
  };
  var showRecordFieldsCons59 = /* @__PURE__ */ showRecordFieldsCons(periodFloorIsSymbol);
  var premiumDiscountAtIEDIsSymbol = {
    reflectSymbol: function() {
      return "premiumDiscountAtIED";
    }
  };
  var showRecordFieldsCons60 = /* @__PURE__ */ showRecordFieldsCons(premiumDiscountAtIEDIsSymbol);
  var prepaymentEffectIsSymbol = {
    reflectSymbol: function() {
      return "prepaymentEffect";
    }
  };
  var showRecordFieldsCons61 = /* @__PURE__ */ showRecordFieldsCons(prepaymentEffectIsSymbol);
  var priceAtPurchaseDateIsSymbol = {
    reflectSymbol: function() {
      return "priceAtPurchaseDate";
    }
  };
  var showRecordFieldsCons62 = /* @__PURE__ */ showRecordFieldsCons(priceAtPurchaseDateIsSymbol);
  var priceAtTerminationDateIsSymbol = {
    reflectSymbol: function() {
      return "priceAtTerminationDate";
    }
  };
  var showRecordFieldsCons63 = /* @__PURE__ */ showRecordFieldsCons(priceAtTerminationDateIsSymbol);
  var purchaseDateIsSymbol = {
    reflectSymbol: function() {
      return "purchaseDate";
    }
  };
  var showRecordFieldsCons64 = /* @__PURE__ */ showRecordFieldsCons(purchaseDateIsSymbol);
  var quantityIsSymbol = {
    reflectSymbol: function() {
      return "quantity";
    }
  };
  var showRecordFieldsCons65 = /* @__PURE__ */ showRecordFieldsCons(quantityIsSymbol);
  var rateMultiplierIsSymbol = {
    reflectSymbol: function() {
      return "rateMultiplier";
    }
  };
  var showRecordFieldsCons66 = /* @__PURE__ */ showRecordFieldsCons(rateMultiplierIsSymbol);
  var rateSpreadIsSymbol = {
    reflectSymbol: function() {
      return "rateSpread";
    }
  };
  var showRecordFieldsCons67 = /* @__PURE__ */ showRecordFieldsCons(rateSpreadIsSymbol);
  var scalingEffectIsSymbol = {
    reflectSymbol: function() {
      return "scalingEffect";
    }
  };
  var showRecordFieldsCons68 = /* @__PURE__ */ showRecordFieldsCons(scalingEffectIsSymbol);
  var scalingIndexAtContractDealDateIsSymbol = {
    reflectSymbol: function() {
      return "scalingIndexAtContractDealDate";
    }
  };
  var showRecordFieldsCons69 = /* @__PURE__ */ showRecordFieldsCons(scalingIndexAtContractDealDateIsSymbol);
  var scalingIndexAtStatusDateIsSymbol = {
    reflectSymbol: function() {
      return "scalingIndexAtStatusDate";
    }
  };
  var scheduleConfigIsSymbol = {
    reflectSymbol: function() {
      return "scheduleConfig";
    }
  };
  var settlementCurrencyIsSymbol = {
    reflectSymbol: function() {
      return "settlementCurrency";
    }
  };
  var settlementPeriodIsSymbol = {
    reflectSymbol: function() {
      return "settlementPeriod";
    }
  };
  var statusDateIsSymbol = {
    reflectSymbol: function() {
      return "statusDate";
    }
  };
  var terminationDateIsSymbol = {
    reflectSymbol: function() {
      return "terminationDate";
    }
  };
  var showMaybe2 = /* @__PURE__ */ showMaybe(showDateTime);
  var includeEndDayIsSymbol = {
    reflectSymbol: function() {
      return "includeEndDay";
    }
  };
  var nIsSymbol = {
    reflectSymbol: function() {
      return "n";
    }
  };
  var pIsSymbol = {
    reflectSymbol: function() {
      return "p";
    }
  };
  var stubIsSymbol = {
    reflectSymbol: function() {
      return "stub";
    }
  };
  var showMaybe1 = /* @__PURE__ */ showMaybe(showString);
  var businessDayConventionIsSymbol = {
    reflectSymbol: function() {
      return "businessDayConvention";
    }
  };
  var calendarIsSymbol = {
    reflectSymbol: function() {
      return "calendar";
    }
  };
  var endOfMonthConventionIsSymbol = {
    reflectSymbol: function() {
      return "endOfMonthConvention";
    }
  };
  var ContractTermsIsSymbol = {
    reflectSymbol: function() {
      return "ContractTerms";
    }
  };
  var genericEnumConstructor2 = /* @__PURE__ */ genericEnumConstructor(genericEnumNoArguments);
  var genericTopConstructor2 = /* @__PURE__ */ genericTopConstructor(genericTopNoArguments);
  var genericEnumSum2 = /* @__PURE__ */ genericEnumSum(genericEnumConstructor2)(genericTopConstructor2);
  var genericBottomConstructor2 = /* @__PURE__ */ genericBottomConstructor(genericBottomNoArguments);
  var genericEnumSum1 = /* @__PURE__ */ genericEnumSum2(genericEnumConstructor2)(genericBottomConstructor2);
  var genericBottomSum2 = /* @__PURE__ */ genericBottomSum(genericBottomConstructor2);
  var genericEnumSum22 = /* @__PURE__ */ genericEnumSum2(genericEnumSum1)(genericBottomSum2);
  var genericEnumSum3 = /* @__PURE__ */ genericEnumSum2(genericEnumSum22)(genericBottomSum2);
  var genericEnumSum4 = /* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(genericEnumSum3)(genericBottomSum2))(genericBottomSum2);
  var genericEnumSum5 = /* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(genericEnumSum4)(genericBottomSum2))(genericBottomSum2);
  var genericEnumSum6 = /* @__PURE__ */ genericEnumSum2(genericEnumSum5)(genericBottomSum2);
  var genericEnumSum7 = /* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(genericEnumSum6)(genericBottomSum2))(genericBottomSum2))(genericBottomSum2))(genericBottomSum2);
  var identity16 = /* @__PURE__ */ identity(categoryFn);
  var pure8 = /* @__PURE__ */ pure(applicativeMaybe);
  var genericTopSum2 = /* @__PURE__ */ genericTopSum(genericTopConstructor2);
  var genericTopSum1 = /* @__PURE__ */ genericTopSum(genericTopSum2);
  var genericTopSum22 = /* @__PURE__ */ genericTopSum(genericTopSum1);
  var genericTopSum3 = /* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopSum22));
  var genericTopSum4 = /* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopSum3));
  var genericBoundedEnumConstructor2 = /* @__PURE__ */ genericBoundedEnumConstructor(genericBoundedEnumNoArguments);
  var genericBoundedEnumSum2 = /* @__PURE__ */ genericBoundedEnumSum(genericBoundedEnumConstructor2);
  var genericBoundedEnumSum1 = /* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumConstructor2);
  var genericBoundedEnumSum22 = /* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumSum1);
  var genericBoundedEnumSum3 = /* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumSum22);
  var genericBoundedEnumSum4 = /* @__PURE__ */ genericBoundedEnumSum2(/* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumSum3));
  var genericBoundedEnumSum5 = /* @__PURE__ */ genericBoundedEnumSum2(/* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumSum4));
  var genericTopSum5 = /* @__PURE__ */ genericTopSum(genericTopSum4);
  var genericBoundedEnumSum6 = /* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumSum5);
  var genericBoundedEnumSum7 = /* @__PURE__ */ genericBoundedEnumSum2(/* @__PURE__ */ genericBoundedEnumSum2(/* @__PURE__ */ genericBoundedEnumSum2(/* @__PURE__ */ genericBoundedEnumSum2(genericBoundedEnumSum6))));
  var bind10 = /* @__PURE__ */ bind(bindEither);
  var decodeJson3 = /* @__PURE__ */ decodeJson(decodeJsonString);
  var map21 = /* @__PURE__ */ map(functorArray);
  var mempty4 = /* @__PURE__ */ mempty(monoidRegexFlags);
  var bind14 = /* @__PURE__ */ bind(bindMaybe);
  var apply8 = /* @__PURE__ */ apply(applyMaybe);
  var map111 = /* @__PURE__ */ map(functorMaybe);
  var map22 = /* @__PURE__ */ map(functorEither);
  var bind22 = /* @__PURE__ */ bind6(/* @__PURE__ */ ixMonadBuilderT(/* @__PURE__ */ monadReaderT(monadEither)));
  var alt6 = /* @__PURE__ */ alt(/* @__PURE__ */ altBuilderT(/* @__PURE__ */ altReaderT(altEither)));
  var discard5 = /* @__PURE__ */ discard4(/* @__PURE__ */ ixBindBuilderT(/* @__PURE__ */ applicativeReaderT(applicativeEither))(/* @__PURE__ */ bindReaderT(bindEither)))(ixDiscardUnit);
  var insertProp2 = /* @__PURE__ */ insertProp(contractIdIsSymbol)()();
  var decodeField2 = /* @__PURE__ */ decodeField(contractTypeIsSymbol)()();
  var decodeFieldDefault2 = /* @__PURE__ */ decodeFieldDefault(contractRoleIsSymbol)()();
  var decodeFieldOptional2 = /* @__PURE__ */ decodeFieldOptional(settlementCurrencyIsSymbol)()();
  var decodeFieldOptional1 = /* @__PURE__ */ decodeFieldOptional(initialExchangeDateIsSymbol)()();
  var decodeFieldOptional22 = /* @__PURE__ */ decodeFieldOptional(dayCountConventionIsSymbol)()();
  var decodeFieldOptionalDefault2 = /* @__PURE__ */ decodeFieldOptionalDefault(calendarIsSymbol)()();
  var decodeFieldOptionalDefault1 = /* @__PURE__ */ decodeFieldOptionalDefault(endOfMonthConventionIsSymbol)()();
  var decodeFieldOptionalDefault22 = /* @__PURE__ */ decodeFieldOptionalDefault(businessDayConventionIsSymbol)()();
  var insertProp1 = /* @__PURE__ */ insertProp(scheduleConfigIsSymbol)()();
  var decodeField1 = /* @__PURE__ */ decodeField(statusDateIsSymbol)()();
  var decodeFieldOptional3 = /* @__PURE__ */ decodeFieldOptional(marketObjectCodeIsSymbol)()();
  var decodeFieldOptional4 = /* @__PURE__ */ decodeFieldOptional(contractPerformanceIsSymbol)()();
  var decodeFieldOptional5 = /* @__PURE__ */ decodeFieldOptional(creditEventTypeCoveredIsSymbol)()();
  var decodeFieldOptional6 = /* @__PURE__ */ decodeFieldOptional(coverageOfCreditEnhancementIsSymbol)()();
  var decodeFieldOptional7 = /* @__PURE__ */ decodeFieldOptional(guaranteedExposureIsSymbol)()();
  var decodeFieldOptional8 = /* @__PURE__ */ decodeFieldOptional(cycleOfFeeIsSymbol)()();
  var decodeFieldOptional9 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfFeeIsSymbol)()();
  var decodeFieldOptional10 = /* @__PURE__ */ decodeFieldOptional(feeAccruedIsSymbol)()();
  var decodeFieldOptional11 = /* @__PURE__ */ decodeFieldOptional(feeBasisIsSymbol)()();
  var decodeFieldOptional12 = /* @__PURE__ */ decodeFieldOptional(feeRateIsSymbol)()();
  var decodeFieldOptional13 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfInterestPaymentIsSymbol)()();
  var decodeFieldOptional14 = /* @__PURE__ */ decodeFieldOptional(cycleOfInterestPaymentIsSymbol)()();
  var decodeFieldOptional15 = /* @__PURE__ */ decodeFieldOptional(accruedInterestIsSymbol)()();
  var decodeFieldOptional16 = /* @__PURE__ */ decodeFieldOptional(capitalizationEndDateIsSymbol)()();
  var decodeFieldOptional17 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfInterestCalculationBaseIsSymbol)()();
  var decodeFieldOptional18 = /* @__PURE__ */ decodeFieldOptional(cycleOfInterestCalculationBaseIsSymbol)()();
  var decodeFieldOptional19 = /* @__PURE__ */ decodeFieldOptional(interestCalculationBaseIsSymbol)()();
  var decodeFieldOptional20 = /* @__PURE__ */ decodeFieldOptional(interestCalculationBaseAmountIsSymbol)()();
  var decodeFieldOptional21 = /* @__PURE__ */ decodeFieldOptional(nominalInterestRateIsSymbol)()();
  var decodeFieldOptional222 = /* @__PURE__ */ decodeFieldOptional(nominalInterestRate2IsSymbol)()();
  var decodeFieldOptional23 = /* @__PURE__ */ decodeFieldOptional(interestScalingMultiplierIsSymbol)()();
  var decodeFieldOptional24 = /* @__PURE__ */ decodeFieldOptional(maturityDateIsSymbol)()();
  var decodeFieldOptional25 = /* @__PURE__ */ decodeFieldOptional(amortizationDateIsSymbol)()();
  var decodeFieldOptional26 = /* @__PURE__ */ decodeFieldOptional(exerciseDateIsSymbol)()();
  var decodeFieldOptional27 = /* @__PURE__ */ decodeFieldOptional(notionalPrincipalIsSymbol)()();
  var decodeFieldOptional28 = /* @__PURE__ */ decodeFieldOptional(premiumDiscountAtIEDIsSymbol)()();
  var decodeFieldOptional29 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfPrincipalRedemptionIsSymbol)()();
  var decodeFieldOptional30 = /* @__PURE__ */ decodeFieldOptional(cycleOfPrincipalRedemptionIsSymbol)()();
  var decodeFieldOptional31 = /* @__PURE__ */ decodeFieldOptional(nextPrincipalRedemptionPaymentIsSymbol)()();
  var decodeFieldOptional32 = /* @__PURE__ */ decodeFieldOptional(purchaseDateIsSymbol)()();
  var decodeFieldOptional33 = /* @__PURE__ */ decodeFieldOptional(priceAtPurchaseDateIsSymbol)()();
  var decodeFieldOptional34 = /* @__PURE__ */ decodeFieldOptional(terminationDateIsSymbol)()();
  var decodeFieldOptional35 = /* @__PURE__ */ decodeFieldOptional(priceAtTerminationDateIsSymbol)()();
  var decodeFieldOptional36 = /* @__PURE__ */ decodeFieldOptional(quantityIsSymbol)()();
  var decodeFieldOptional37 = /* @__PURE__ */ decodeFieldOptional(currencyIsSymbol)()();
  var decodeFieldOptional38 = /* @__PURE__ */ decodeFieldOptional(currency2IsSymbol)()();
  var decodeFieldOptional39 = /* @__PURE__ */ decodeFieldOptional(scalingIndexAtStatusDateIsSymbol)()();
  var decodeFieldOptional40 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfScalingIndexIsSymbol)()();
  var decodeFieldOptional41 = /* @__PURE__ */ decodeFieldOptional(cycleOfScalingIndexIsSymbol)()();
  var decodeFieldOptional42 = /* @__PURE__ */ decodeFieldOptional(scalingEffectIsSymbol)()();
  var decodeFieldOptional43 = /* @__PURE__ */ decodeFieldOptional(scalingIndexAtContractDealDateIsSymbol)()();
  var decodeFieldOptional44 = /* @__PURE__ */ decodeFieldOptional(marketObjectCodeOfScalingIndexIsSymbol)()();
  var decodeFieldOptional45 = /* @__PURE__ */ decodeFieldOptional(notionalScalingMultiplierIsSymbol)()();
  var decodeFieldOptional46 = /* @__PURE__ */ decodeFieldOptional(cycleOfOptionalityIsSymbol)()();
  var decodeFieldOptional47 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfOptionalityIsSymbol)()();
  var decodeFieldOptional48 = /* @__PURE__ */ decodeFieldOptional(optionTypeIsSymbol)()();
  var decodeFieldOptional49 = /* @__PURE__ */ decodeFieldOptional(optionStrike1IsSymbol)()();
  var decodeFieldOptional50 = /* @__PURE__ */ decodeFieldOptional(optionExerciseTypeIsSymbol)()();
  var decodeFieldOptional51 = /* @__PURE__ */ decodeFieldOptional(settlementPeriodIsSymbol)()();
  var decodeFieldOptional52 = /* @__PURE__ */ decodeFieldOptional(deliverySettlementIsSymbol)()();
  var decodeFieldOptional53 = /* @__PURE__ */ decodeFieldOptional(exerciseAmountIsSymbol)()();
  var decodeFieldOptional54 = /* @__PURE__ */ decodeFieldOptional(futuresPriceIsSymbol)()();
  var decodeFieldOptional55 = /* @__PURE__ */ decodeFieldOptional(penaltyRateIsSymbol)()();
  var decodeFieldOptional56 = /* @__PURE__ */ decodeFieldOptional(penaltyTypeIsSymbol)()();
  var decodeFieldOptional57 = /* @__PURE__ */ decodeFieldOptional(prepaymentEffectIsSymbol)()();
  var decodeFieldOptional58 = /* @__PURE__ */ decodeFieldOptional(cycleOfRateResetIsSymbol)()();
  var decodeFieldOptional59 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfRateResetIsSymbol)()();
  var decodeFieldOptional60 = /* @__PURE__ */ decodeFieldOptional(nextResetRateIsSymbol)()();
  var decodeFieldOptional61 = /* @__PURE__ */ decodeFieldOptional(rateSpreadIsSymbol)()();
  var decodeFieldOptional62 = /* @__PURE__ */ decodeFieldOptional(rateMultiplierIsSymbol)()();
  var decodeFieldOptional63 = /* @__PURE__ */ decodeFieldOptional(periodFloorIsSymbol)()();
  var decodeFieldOptional64 = /* @__PURE__ */ decodeFieldOptional(periodCapIsSymbol)()();
  var decodeFieldOptional65 = /* @__PURE__ */ decodeFieldOptional(lifeCapIsSymbol)()();
  var decodeFieldOptional66 = /* @__PURE__ */ decodeFieldOptional(lifeFloorIsSymbol)()();
  var decodeFieldOptional67 = /* @__PURE__ */ decodeFieldOptional(marketObjectCodeOfRateResetIsSymbol)()();
  var decodeFieldOptional68 = /* @__PURE__ */ decodeFieldOptional(cycleOfDividendPaymentIsSymbol)()();
  var decodeFieldOptional69 = /* @__PURE__ */ decodeFieldOptional(cycleAnchorDateOfDividendPaymentIsSymbol)()();
  var decodeFieldOptional70 = /* @__PURE__ */ decodeFieldOptional(nextDividendPaymentAmountIsSymbol)()();
  var ShortStub = /* @__PURE__ */ function() {
    function ShortStub2() {
    }
    ;
    ShortStub2.value = new ShortStub2();
    return ShortStub2;
  }();
  var LongStub = /* @__PURE__ */ function() {
    function LongStub2() {
    }
    ;
    LongStub2.value = new LongStub2();
    return LongStub2;
  }();
  var SE_OOO = /* @__PURE__ */ function() {
    function SE_OOO2() {
    }
    ;
    SE_OOO2.value = new SE_OOO2();
    return SE_OOO2;
  }();
  var SE_IOO = /* @__PURE__ */ function() {
    function SE_IOO2() {
    }
    ;
    SE_IOO2.value = new SE_IOO2();
    return SE_IOO2;
  }();
  var SE_ONO = /* @__PURE__ */ function() {
    function SE_ONO2() {
    }
    ;
    SE_ONO2.value = new SE_ONO2();
    return SE_ONO2;
  }();
  var SE_OOM = /* @__PURE__ */ function() {
    function SE_OOM2() {
    }
    ;
    SE_OOM2.value = new SE_OOM2();
    return SE_OOM2;
  }();
  var SE_INO = /* @__PURE__ */ function() {
    function SE_INO2() {
    }
    ;
    SE_INO2.value = new SE_INO2();
    return SE_INO2;
  }();
  var SE_ONM = /* @__PURE__ */ function() {
    function SE_ONM2() {
    }
    ;
    SE_ONM2.value = new SE_ONM2();
    return SE_ONM2;
  }();
  var SE_IOM = /* @__PURE__ */ function() {
    function SE_IOM2() {
    }
    ;
    SE_IOM2.value = new SE_IOM2();
    return SE_IOM2;
  }();
  var SE_INM = /* @__PURE__ */ function() {
    function SE_INM2() {
    }
    ;
    SE_INM2.value = new SE_INM2();
    return SE_INM2;
  }();
  var P_D = /* @__PURE__ */ function() {
    function P_D2() {
    }
    ;
    P_D2.value = new P_D2();
    return P_D2;
  }();
  var P_W = /* @__PURE__ */ function() {
    function P_W2() {
    }
    ;
    P_W2.value = new P_W2();
    return P_W2;
  }();
  var P_M = /* @__PURE__ */ function() {
    function P_M2() {
    }
    ;
    P_M2.value = new P_M2();
    return P_M2;
  }();
  var P_Q = /* @__PURE__ */ function() {
    function P_Q2() {
    }
    ;
    P_Q2.value = new P_Q2();
    return P_Q2;
  }();
  var P_H = /* @__PURE__ */ function() {
    function P_H2() {
    }
    ;
    P_H2.value = new P_H2();
    return P_H2;
  }();
  var P_Y = /* @__PURE__ */ function() {
    function P_Y2() {
    }
    ;
    P_Y2.value = new P_Y2();
    return P_Y2;
  }();
  var PYTP_A = /* @__PURE__ */ function() {
    function PYTP_A2() {
    }
    ;
    PYTP_A2.value = new PYTP_A2();
    return PYTP_A2;
  }();
  var PYTP_N = /* @__PURE__ */ function() {
    function PYTP_N2() {
    }
    ;
    PYTP_N2.value = new PYTP_N2();
    return PYTP_N2;
  }();
  var PYTP_I = /* @__PURE__ */ function() {
    function PYTP_I2() {
    }
    ;
    PYTP_I2.value = new PYTP_I2();
    return PYTP_I2;
  }();
  var PYTP_O = /* @__PURE__ */ function() {
    function PYTP_O2() {
    }
    ;
    PYTP_O2.value = new PYTP_O2();
    return PYTP_O2;
  }();
  var PRF_PF = /* @__PURE__ */ function() {
    function PRF_PF2() {
    }
    ;
    PRF_PF2.value = new PRF_PF2();
    return PRF_PF2;
  }();
  var PRF_DL = /* @__PURE__ */ function() {
    function PRF_DL2() {
    }
    ;
    PRF_DL2.value = new PRF_DL2();
    return PRF_DL2;
  }();
  var PRF_DQ = /* @__PURE__ */ function() {
    function PRF_DQ2() {
    }
    ;
    PRF_DQ2.value = new PRF_DQ2();
    return PRF_DQ2;
  }();
  var PRF_DF = /* @__PURE__ */ function() {
    function PRF_DF2() {
    }
    ;
    PRF_DF2.value = new PRF_DF2();
    return PRF_DF2;
  }();
  var PPEF_N = /* @__PURE__ */ function() {
    function PPEF_N2() {
    }
    ;
    PPEF_N2.value = new PPEF_N2();
    return PPEF_N2;
  }();
  var PPEF_A = /* @__PURE__ */ function() {
    function PPEF_A2() {
    }
    ;
    PPEF_A2.value = new PPEF_A2();
    return PPEF_A2;
  }();
  var PPEF_M = /* @__PURE__ */ function() {
    function PPEF_M2() {
    }
    ;
    PPEF_M2.value = new PPEF_M2();
    return PPEF_M2;
  }();
  var OPXT_E = /* @__PURE__ */ function() {
    function OPXT_E2() {
    }
    ;
    OPXT_E2.value = new OPXT_E2();
    return OPXT_E2;
  }();
  var OPXT_B = /* @__PURE__ */ function() {
    function OPXT_B2() {
    }
    ;
    OPXT_B2.value = new OPXT_B2();
    return OPXT_B2;
  }();
  var OPXT_A = /* @__PURE__ */ function() {
    function OPXT_A2() {
    }
    ;
    OPXT_A2.value = new OPXT_A2();
    return OPXT_A2;
  }();
  var OPTP_C = /* @__PURE__ */ function() {
    function OPTP_C2() {
    }
    ;
    OPTP_C2.value = new OPTP_C2();
    return OPTP_C2;
  }();
  var OPTP_P = /* @__PURE__ */ function() {
    function OPTP_P2() {
    }
    ;
    OPTP_P2.value = new OPTP_P2();
    return OPTP_P2;
  }();
  var OPTP_CP = /* @__PURE__ */ function() {
    function OPTP_CP2() {
    }
    ;
    OPTP_CP2.value = new OPTP_CP2();
    return OPTP_CP2;
  }();
  var IPCB_NT = /* @__PURE__ */ function() {
    function IPCB_NT2() {
    }
    ;
    IPCB_NT2.value = new IPCB_NT2();
    return IPCB_NT2;
  }();
  var IPCB_NTIED = /* @__PURE__ */ function() {
    function IPCB_NTIED2() {
    }
    ;
    IPCB_NTIED2.value = new IPCB_NTIED2();
    return IPCB_NTIED2;
  }();
  var IPCB_NTL = /* @__PURE__ */ function() {
    function IPCB_NTL2() {
    }
    ;
    IPCB_NTL2.value = new IPCB_NTL2();
    return IPCB_NTL2;
  }();
  var FEB_A = /* @__PURE__ */ function() {
    function FEB_A2() {
    }
    ;
    FEB_A2.value = new FEB_A2();
    return FEB_A2;
  }();
  var FEB_N = /* @__PURE__ */ function() {
    function FEB_N2() {
    }
    ;
    FEB_N2.value = new FEB_N2();
    return FEB_N2;
  }();
  var EOMC_EOM = /* @__PURE__ */ function() {
    function EOMC_EOM2() {
    }
    ;
    EOMC_EOM2.value = new EOMC_EOM2();
    return EOMC_EOM2;
  }();
  var EOMC_SD = /* @__PURE__ */ function() {
    function EOMC_SD2() {
    }
    ;
    EOMC_SD2.value = new EOMC_SD2();
    return EOMC_SD2;
  }();
  var DS_S = /* @__PURE__ */ function() {
    function DS_S2() {
    }
    ;
    DS_S2.value = new DS_S2();
    return DS_S2;
  }();
  var DS_D = /* @__PURE__ */ function() {
    function DS_D2() {
    }
    ;
    DS_D2.value = new DS_D2();
    return DS_D2;
  }();
  var DCC_A_AISDA = /* @__PURE__ */ function() {
    function DCC_A_AISDA2() {
    }
    ;
    DCC_A_AISDA2.value = new DCC_A_AISDA2();
    return DCC_A_AISDA2;
  }();
  var DCC_A_360 = /* @__PURE__ */ function() {
    function DCC_A_3602() {
    }
    ;
    DCC_A_3602.value = new DCC_A_3602();
    return DCC_A_3602;
  }();
  var DCC_A_365 = /* @__PURE__ */ function() {
    function DCC_A_3652() {
    }
    ;
    DCC_A_3652.value = new DCC_A_3652();
    return DCC_A_3652;
  }();
  var DCC_E30_360ISDA = /* @__PURE__ */ function() {
    function DCC_E30_360ISDA2() {
    }
    ;
    DCC_E30_360ISDA2.value = new DCC_E30_360ISDA2();
    return DCC_E30_360ISDA2;
  }();
  var DCC_E30_360 = /* @__PURE__ */ function() {
    function DCC_E30_3602() {
    }
    ;
    DCC_E30_3602.value = new DCC_E30_3602();
    return DCC_E30_3602;
  }();
  var DCC_B_252 = /* @__PURE__ */ function() {
    function DCC_B_2522() {
    }
    ;
    DCC_B_2522.value = new DCC_B_2522();
    return DCC_B_2522;
  }();
  var CLDR_MF = /* @__PURE__ */ function() {
    function CLDR_MF2() {
    }
    ;
    CLDR_MF2.value = new CLDR_MF2();
    return CLDR_MF2;
  }();
  var CLDR_NC = /* @__PURE__ */ function() {
    function CLDR_NC2() {
    }
    ;
    CLDR_NC2.value = new CLDR_NC2();
    return CLDR_NC2;
  }();
  var PAM = /* @__PURE__ */ function() {
    function PAM2() {
    }
    ;
    PAM2.value = new PAM2();
    return PAM2;
  }();
  var LAM = /* @__PURE__ */ function() {
    function LAM2() {
    }
    ;
    LAM2.value = new LAM2();
    return LAM2;
  }();
  var NAM = /* @__PURE__ */ function() {
    function NAM2() {
    }
    ;
    NAM2.value = new NAM2();
    return NAM2;
  }();
  var ANN = /* @__PURE__ */ function() {
    function ANN2() {
    }
    ;
    ANN2.value = new ANN2();
    return ANN2;
  }();
  var CR_RPA = /* @__PURE__ */ function() {
    function CR_RPA2() {
    }
    ;
    CR_RPA2.value = new CR_RPA2();
    return CR_RPA2;
  }();
  var CR_RPL = /* @__PURE__ */ function() {
    function CR_RPL2() {
    }
    ;
    CR_RPL2.value = new CR_RPL2();
    return CR_RPL2;
  }();
  var CR_CLO = /* @__PURE__ */ function() {
    function CR_CLO2() {
    }
    ;
    CR_CLO2.value = new CR_CLO2();
    return CR_CLO2;
  }();
  var CR_CNO = /* @__PURE__ */ function() {
    function CR_CNO2() {
    }
    ;
    CR_CNO2.value = new CR_CNO2();
    return CR_CNO2;
  }();
  var CR_COL = /* @__PURE__ */ function() {
    function CR_COL2() {
    }
    ;
    CR_COL2.value = new CR_COL2();
    return CR_COL2;
  }();
  var CR_LG = /* @__PURE__ */ function() {
    function CR_LG2() {
    }
    ;
    CR_LG2.value = new CR_LG2();
    return CR_LG2;
  }();
  var CR_ST = /* @__PURE__ */ function() {
    function CR_ST2() {
    }
    ;
    CR_ST2.value = new CR_ST2();
    return CR_ST2;
  }();
  var CR_BUY = /* @__PURE__ */ function() {
    function CR_BUY2() {
    }
    ;
    CR_BUY2.value = new CR_BUY2();
    return CR_BUY2;
  }();
  var CR_SEL = /* @__PURE__ */ function() {
    function CR_SEL2() {
    }
    ;
    CR_SEL2.value = new CR_SEL2();
    return CR_SEL2;
  }();
  var CR_RFL = /* @__PURE__ */ function() {
    function CR_RFL2() {
    }
    ;
    CR_RFL2.value = new CR_RFL2();
    return CR_RFL2;
  }();
  var CR_PFL = /* @__PURE__ */ function() {
    function CR_PFL2() {
    }
    ;
    CR_PFL2.value = new CR_PFL2();
    return CR_PFL2;
  }();
  var CR_RF = /* @__PURE__ */ function() {
    function CR_RF2() {
    }
    ;
    CR_RF2.value = new CR_RF2();
    return CR_RF2;
  }();
  var CR_PF = /* @__PURE__ */ function() {
    function CR_PF2() {
    }
    ;
    CR_PF2.value = new CR_PF2();
    return CR_PF2;
  }();
  var CETC_DL = /* @__PURE__ */ function() {
    function CETC_DL2() {
    }
    ;
    CETC_DL2.value = new CETC_DL2();
    return CETC_DL2;
  }();
  var CETC_DQ = /* @__PURE__ */ function() {
    function CETC_DQ2() {
    }
    ;
    CETC_DQ2.value = new CETC_DQ2();
    return CETC_DQ2;
  }();
  var CETC_DF = /* @__PURE__ */ function() {
    function CETC_DF2() {
    }
    ;
    CETC_DF2.value = new CETC_DF2();
    return CETC_DF2;
  }();
  var CEGE_NO = /* @__PURE__ */ function() {
    function CEGE_NO2() {
    }
    ;
    CEGE_NO2.value = new CEGE_NO2();
    return CEGE_NO2;
  }();
  var CEGE_NI = /* @__PURE__ */ function() {
    function CEGE_NI2() {
    }
    ;
    CEGE_NI2.value = new CEGE_NI2();
    return CEGE_NI2;
  }();
  var BDC_NULL = /* @__PURE__ */ function() {
    function BDC_NULL2() {
    }
    ;
    BDC_NULL2.value = new BDC_NULL2();
    return BDC_NULL2;
  }();
  var BDC_SCF = /* @__PURE__ */ function() {
    function BDC_SCF2() {
    }
    ;
    BDC_SCF2.value = new BDC_SCF2();
    return BDC_SCF2;
  }();
  var BDC_SCMF = /* @__PURE__ */ function() {
    function BDC_SCMF2() {
    }
    ;
    BDC_SCMF2.value = new BDC_SCMF2();
    return BDC_SCMF2;
  }();
  var BDC_CSF = /* @__PURE__ */ function() {
    function BDC_CSF2() {
    }
    ;
    BDC_CSF2.value = new BDC_CSF2();
    return BDC_CSF2;
  }();
  var BDC_CSMF = /* @__PURE__ */ function() {
    function BDC_CSMF2() {
    }
    ;
    BDC_CSMF2.value = new BDC_CSMF2();
    return BDC_CSMF2;
  }();
  var BDC_SCP = /* @__PURE__ */ function() {
    function BDC_SCP2() {
    }
    ;
    BDC_SCP2.value = new BDC_SCP2();
    return BDC_SCP2;
  }();
  var BDC_SCMP = /* @__PURE__ */ function() {
    function BDC_SCMP2() {
    }
    ;
    BDC_SCMP2.value = new BDC_SCMP2();
    return BDC_SCMP2;
  }();
  var BDC_CSP = /* @__PURE__ */ function() {
    function BDC_CSP2() {
    }
    ;
    BDC_CSP2.value = new BDC_CSP2();
    return BDC_CSP2;
  }();
  var BDC_CSMP = /* @__PURE__ */ function() {
    function BDC_CSMP2() {
    }
    ;
    BDC_CSMP2.value = new BDC_CSMP2();
    return BDC_CSMP2;
  }();
  var ContractTerms = function(x) {
    return x;
  };
  var showDCC = {
    show: function(v) {
      if (v instanceof DCC_A_AISDA) {
        return "AA";
      }
      ;
      if (v instanceof DCC_A_360) {
        return "A360";
      }
      ;
      if (v instanceof DCC_A_365) {
        return "A365";
      }
      ;
      if (v instanceof DCC_E30_360ISDA) {
        return "30E360ISDA";
      }
      ;
      if (v instanceof DCC_E30_360) {
        return "30E360";
      }
      ;
      if (v instanceof DCC_B_252) {
        return "B252";
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 122, column 1 - line 128, column 26): " + [v.constructor.name]);
    }
  };
  var showMaybe22 = /* @__PURE__ */ showMaybe(showDCC);
  var genericStub_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return ShortStub.value;
      }
      ;
      if (x instanceof Inr) {
        return LongStub.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 649, column 1 - line 649, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof ShortStub) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof LongStub) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 649, column 1 - line 649, column 31): " + [x.constructor.name]);
    }
  };
  var showStub = {
    show: /* @__PURE__ */ genericShow(genericStub_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "ShortStub";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "LongStub";
      }
    })))
  };
  var genericSCEF_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return SE_OOO.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return SE_IOO.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return SE_ONO.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return SE_OOM.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return SE_INO.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return SE_ONM.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return SE_IOM.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inr)))))) {
        return SE_INM.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 423, column 1 - line 423, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof SE_OOO) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof SE_IOO) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof SE_ONO) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof SE_OOM) {
        return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
      }
      ;
      if (x instanceof SE_INO) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
      }
      ;
      if (x instanceof SE_ONM) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))));
      }
      ;
      if (x instanceof SE_IOM) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))));
      }
      ;
      if (x instanceof SE_INM) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value)))))));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 423, column 1 - line 423, column 31): " + [x.constructor.name]);
    }
  };
  var showSCEF = {
    show: /* @__PURE__ */ function() {
      var $2049 = tryStripPrefix("SE_");
      var $2050 = genericShow(genericSCEF_)(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_OOO";
        }
      }))(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_IOO";
        }
      }))(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_ONO";
        }
      }))(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_OOM";
        }
      }))(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_INO";
        }
      }))(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_ONM";
        }
      }))(genericShowSum(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_IOM";
        }
      }))(genericShowConstructor2({
        reflectSymbol: function() {
          return "SE_INM";
        }
      })))))))));
      return function($2051) {
        return $2049($2050($2051));
      };
    }()
  };
  var showMaybe3 = /* @__PURE__ */ showMaybe(showSCEF);
  var genericPeriod_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return P_D.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return P_W.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return P_M.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return P_Q.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return P_H.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inr)))) {
        return P_Y.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 618, column 1 - line 618, column 33): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof P_D) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof P_W) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof P_M) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof P_Q) {
        return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
      }
      ;
      if (x instanceof P_H) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
      }
      ;
      if (x instanceof P_Y) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value)))));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 618, column 1 - line 618, column 33): " + [x.constructor.name]);
    }
  };
  var showPeriod = {
    show: /* @__PURE__ */ genericShow(genericPeriod_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "P_D";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "P_W";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "P_M";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "P_Q";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "P_H";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "P_Y";
      }
    })))))))
  };
  var showMaybe4 = /* @__PURE__ */ showMaybe(/* @__PURE__ */ showRecord2(/* @__PURE__ */ showRecordFieldsCons(includeEndDayIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(nIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(pIsSymbol)(/* @__PURE__ */ showRecordFieldsConsNil(stubIsSymbol)(showStub))(showPeriod))(showInt))(showBoolean)));
  var genericPYTP_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return PYTP_A.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return PYTP_N.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return PYTP_I.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inr)) {
        return PYTP_O.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 456, column 1 - line 456, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof PYTP_A) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof PYTP_N) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof PYTP_I) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof PYTP_O) {
        return new Inr(new Inr(new Inr(NoArguments.value)));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 456, column 1 - line 456, column 31): " + [x.constructor.name]);
    }
  };
  var showPYTP = {
    show: /* @__PURE__ */ genericShow(genericPYTP_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PYTP_A";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PYTP_N";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PYTP_I";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PYTP_O";
      }
    })))))
  };
  var showMaybe5 = /* @__PURE__ */ showMaybe(showPYTP);
  var genericPRF_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return PRF_PF.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return PRF_DL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return PRF_DQ.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inr)) {
        return PRF_DF.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 260, column 1 - line 260, column 30): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof PRF_PF) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof PRF_DL) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof PRF_DQ) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof PRF_DF) {
        return new Inr(new Inr(new Inr(NoArguments.value)));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 260, column 1 - line 260, column 30): " + [x.constructor.name]);
    }
  };
  var showPRF = {
    show: /* @__PURE__ */ genericShow(genericPRF_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PRF_PF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PRF_DL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PRF_DQ";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PRF_DF";
      }
    })))))
  };
  var showMaybe6 = /* @__PURE__ */ showMaybe(showPRF);
  var genericPPEF_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return PPEF_N.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return PPEF_A.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inr) {
        return PPEF_M.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 583, column 1 - line 583, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof PPEF_N) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof PPEF_A) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof PPEF_M) {
        return new Inr(new Inr(NoArguments.value));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 583, column 1 - line 583, column 31): " + [x.constructor.name]);
    }
  };
  var showPPEF = {
    show: /* @__PURE__ */ genericShow(genericPPEF_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PPEF_N";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PPEF_A";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PPEF_M";
      }
    }))))
  };
  var showMaybe7 = /* @__PURE__ */ showMaybe(showPPEF);
  var genericOPXT_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return OPXT_E.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return OPXT_B.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inr) {
        return OPXT_A.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 520, column 1 - line 520, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof OPXT_E) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof OPXT_B) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof OPXT_A) {
        return new Inr(new Inr(NoArguments.value));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 520, column 1 - line 520, column 31): " + [x.constructor.name]);
    }
  };
  var showOPXT = {
    show: /* @__PURE__ */ genericShow(genericOPXT_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "OPXT_E";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "OPXT_B";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "OPXT_A";
      }
    }))))
  };
  var showMaybe8 = /* @__PURE__ */ showMaybe(showOPXT);
  var genericOPTP_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return OPTP_C.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return OPTP_P.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inr) {
        return OPTP_CP.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 488, column 1 - line 488, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof OPTP_C) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof OPTP_P) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof OPTP_CP) {
        return new Inr(new Inr(NoArguments.value));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 488, column 1 - line 488, column 31): " + [x.constructor.name]);
    }
  };
  var showOPTP = {
    show: /* @__PURE__ */ genericShow(genericOPTP_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "OPTP_C";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "OPTP_P";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "OPTP_CP";
      }
    }))))
  };
  var showMaybe9 = /* @__PURE__ */ showMaybe(showOPTP);
  var genericIPCB_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return IPCB_NT.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return IPCB_NTIED.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inr) {
        return IPCB_NTL.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 386, column 1 - line 386, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof IPCB_NT) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof IPCB_NTIED) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof IPCB_NTL) {
        return new Inr(new Inr(NoArguments.value));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 386, column 1 - line 386, column 31): " + [x.constructor.name]);
    }
  };
  var showIPCB = {
    show: /* @__PURE__ */ genericShow(genericIPCB_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "IPCB_NT";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "IPCB_NTIED";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "IPCB_NTL";
      }
    }))))
  };
  var showMaybe10 = /* @__PURE__ */ showMaybe(showIPCB);
  var genericFEB_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return FEB_A.value;
      }
      ;
      if (x instanceof Inr) {
        return FEB_N.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 354, column 1 - line 354, column 30): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof FEB_A) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof FEB_N) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 354, column 1 - line 354, column 30): " + [x.constructor.name]);
    }
  };
  var showFEB = {
    show: /* @__PURE__ */ genericShow(genericFEB_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "FEB_A";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "FEB_N";
      }
    })))
  };
  var showMaybe11 = /* @__PURE__ */ showMaybe(showFEB);
  var genericEOMC_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return EOMC_EOM.value;
      }
      ;
      if (x instanceof Inr) {
        return EOMC_SD.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 154, column 1 - line 154, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof EOMC_EOM) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof EOMC_SD) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 154, column 1 - line 154, column 31): " + [x.constructor.name]);
    }
  };
  var showEOMC = {
    show: /* @__PURE__ */ genericShow(genericEOMC_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "EOMC_EOM";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "EOMC_SD";
      }
    })))
  };
  var genericDS_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return DS_S.value;
      }
      ;
      if (x instanceof Inr) {
        return DS_D.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 551, column 1 - line 551, column 29): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof DS_S) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof DS_D) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 551, column 1 - line 551, column 29): " + [x.constructor.name]);
    }
  };
  var showDS = {
    show: /* @__PURE__ */ genericShow(genericDS_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "DS_S";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "DS_D";
      }
    })))
  };
  var showMaybe12 = /* @__PURE__ */ showMaybe(showDS);
  var genericContractTerms_ = {
    to: function(x) {
      return x;
    },
    from: function(x) {
      return x;
    }
  };
  var genericShow2 = /* @__PURE__ */ genericShow(genericContractTerms_);
  var genericCalendar_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return CLDR_MF.value;
      }
      ;
      if (x instanceof Inr) {
        return CLDR_NC.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 221, column 1 - line 221, column 35): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof CLDR_MF) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof CLDR_NC) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 221, column 1 - line 221, column 35): " + [x.constructor.name]);
    }
  };
  var showCalendar = {
    show: /* @__PURE__ */ genericShow(genericCalendar_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CLDR_MF";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CLDR_NC";
      }
    })))
  };
  var genericCT_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return PAM.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return LAM.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return NAM.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inr)) {
        return ANN.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 42, column 1 - line 42, column 29): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof PAM) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof LAM) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof NAM) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof ANN) {
        return new Inr(new Inr(new Inr(NoArguments.value)));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 42, column 1 - line 42, column 29): " + [x.constructor.name]);
    }
  };
  var showCT = {
    show: /* @__PURE__ */ genericShow(genericCT_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "PAM";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "LAM";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "NAM";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "ANN";
      }
    })))))
  };
  var genericCR_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return CR_RPA.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return CR_RPL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return CR_CLO.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return CR_CNO.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return CR_COL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return CR_LG.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return CR_ST.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return CR_BUY.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))) {
        return CR_SEL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))) {
        return CR_RFL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))) {
        return CR_PFL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))) {
        return CR_RF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr))))))))))) {
        return CR_PF.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 84, column 1 - line 84, column 29): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof CR_RPA) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof CR_RPL) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof CR_CLO) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof CR_CNO) {
        return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
      }
      ;
      if (x instanceof CR_COL) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
      }
      ;
      if (x instanceof CR_LG) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))));
      }
      ;
      if (x instanceof CR_ST) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))));
      }
      ;
      if (x instanceof CR_BUY) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))));
      }
      ;
      if (x instanceof CR_SEL) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))));
      }
      ;
      if (x instanceof CR_RFL) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))));
      }
      ;
      if (x instanceof CR_PFL) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))));
      }
      ;
      if (x instanceof CR_RF) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))));
      }
      ;
      if (x instanceof CR_PF) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value))))))))))));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 84, column 1 - line 84, column 29): " + [x.constructor.name]);
    }
  };
  var showCR = {
    show: /* @__PURE__ */ genericShow(genericCR_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_RPA";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_RPL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_CLO";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_CNO";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_COL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_LG";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_ST";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_BUY";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_SEL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_RFL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_PFL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_RF";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CR_PF";
      }
    }))))))))))))))
  };
  var genericCETC_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return CETC_DL.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return CETC_DQ.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inr) {
        return CETC_DF.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 292, column 1 - line 292, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof CETC_DL) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof CETC_DQ) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof CETC_DF) {
        return new Inr(new Inr(NoArguments.value));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 292, column 1 - line 292, column 31): " + [x.constructor.name]);
    }
  };
  var showCETC = {
    show: /* @__PURE__ */ genericShow(genericCETC_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CETC_DL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CETC_DQ";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CETC_DF";
      }
    }))))
  };
  var showMaybe13 = /* @__PURE__ */ showMaybe(showCETC);
  var genericCEGE_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return CEGE_NO.value;
      }
      ;
      if (x instanceof Inr) {
        return CEGE_NI.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 323, column 1 - line 323, column 31): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof CEGE_NO) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof CEGE_NI) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 323, column 1 - line 323, column 31): " + [x.constructor.name]);
    }
  };
  var showCEGE = {
    show: /* @__PURE__ */ genericShow(genericCEGE_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CEGE_NO";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "CEGE_NI";
      }
    })))
  };
  var showMaybe14 = /* @__PURE__ */ showMaybe(showCEGE);
  var genericBDC_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return BDC_NULL.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return BDC_SCF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return BDC_SCMF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return BDC_CSF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return BDC_CSMF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return BDC_SCP.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return BDC_SCMP.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return BDC_CSP.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr))))))) {
        return BDC_CSMP.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 191, column 1 - line 191, column 30): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof BDC_NULL) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof BDC_SCF) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof BDC_SCMF) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof BDC_CSF) {
        return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
      }
      ;
      if (x instanceof BDC_CSMF) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
      }
      ;
      if (x instanceof BDC_SCP) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))));
      }
      ;
      if (x instanceof BDC_SCMP) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))));
      }
      ;
      if (x instanceof BDC_CSP) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))));
      }
      ;
      if (x instanceof BDC_CSMP) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value))))))));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 191, column 1 - line 191, column 30): " + [x.constructor.name]);
    }
  };
  var showBDC = {
    show: /* @__PURE__ */ genericShow(genericBDC_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_NULL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_SCF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_SCMF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_CSF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_CSMF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_SCP";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_SCMP";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_CSP";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "BDC_CSMP";
      }
    }))))))))))
  };
  var showRecordFieldsCons70 = /* @__PURE__ */ showRecordFieldsCons(scalingIndexAtStatusDateIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(scheduleConfigIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(settlementCurrencyIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(settlementPeriodIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(statusDateIsSymbol)(/* @__PURE__ */ showRecordFieldsConsNil(terminationDateIsSymbol)(showMaybe2))(showDateTime))(showMaybe4))(showMaybe1))(/* @__PURE__ */ showRecord2(/* @__PURE__ */ showRecordFieldsCons(businessDayConventionIsSymbol)(/* @__PURE__ */ showRecordFieldsCons(calendarIsSymbol)(/* @__PURE__ */ showRecordFieldsConsNil(endOfMonthConventionIsSymbol)(/* @__PURE__ */ showMaybe(showEOMC)))(/* @__PURE__ */ showMaybe(showCalendar)))(/* @__PURE__ */ showMaybe(showBDC)))));
  var showContractTerms = function(dictShow) {
    var showMaybe15 = showMaybe(dictShow);
    return {
      show: genericShow2(genericShowConstructor(genericShowArgsArgument(showRecord2(showRecordFieldsCons2(showRecordFieldsCons1(showRecordFieldsCons22(showRecordFieldsCons3(showRecordFieldsCons4(showRecordFieldsCons5(showRecordFieldsCons6(showRecordFieldsCons7(showRecordFieldsCons8(showRecordFieldsCons9(showRecordFieldsCons10(showRecordFieldsCons11(showRecordFieldsCons12(showRecordFieldsCons13(showRecordFieldsCons14(showRecordFieldsCons15(showRecordFieldsCons16(showRecordFieldsCons17(showRecordFieldsCons18(showRecordFieldsCons19(showRecordFieldsCons20(showRecordFieldsCons21(showRecordFieldsCons222(showRecordFieldsCons23(showRecordFieldsCons24(showRecordFieldsCons25(showRecordFieldsCons26(showRecordFieldsCons27(showRecordFieldsCons28(showRecordFieldsCons29(showRecordFieldsCons30(showRecordFieldsCons31(showRecordFieldsCons32(showRecordFieldsCons33(showRecordFieldsCons34(showRecordFieldsCons35(showRecordFieldsCons36(showRecordFieldsCons37(showRecordFieldsCons38(showRecordFieldsCons39(showRecordFieldsCons40(showRecordFieldsCons41(showRecordFieldsCons42(showRecordFieldsCons43(showRecordFieldsCons44(showRecordFieldsCons45(showRecordFieldsCons46(showRecordFieldsCons47(showRecordFieldsCons48(showRecordFieldsCons49(showRecordFieldsCons50(showRecordFieldsCons51(showRecordFieldsCons52(showRecordFieldsCons53(showRecordFieldsCons54(showRecordFieldsCons55(showRecordFieldsCons56(showRecordFieldsCons57(showRecordFieldsCons58(showRecordFieldsCons59(showRecordFieldsCons60(showRecordFieldsCons61(showRecordFieldsCons62(showRecordFieldsCons63(showRecordFieldsCons64(showRecordFieldsCons65(showRecordFieldsCons66(showRecordFieldsCons67(showRecordFieldsCons68(showRecordFieldsCons69(showRecordFieldsCons70(showMaybe15))(showMaybe15))(showMaybe3))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe2))(showMaybe15))(showMaybe15))(showMaybe7))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe5))(showMaybe15))(showMaybe9))(showMaybe15))(showMaybe8))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe2))(showMaybe1))(showMaybe1))(showMaybe1))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe15))(showMaybe10))(showMaybe2))(showMaybe14))(showMaybe15))(showMaybe15))(showMaybe11))(showMaybe15))(showMaybe2))(showMaybe15))(showMaybe12))(showMaybe22))(showMaybe4))(showMaybe4))(showMaybe4))(showMaybe4))(showMaybe4))(showMaybe4))(showMaybe4))(showMaybe4))(showMaybe2))(showMaybe2))(showMaybe2))(showMaybe2))(showMaybe2))(showMaybe2))(showMaybe2))(showMaybe2))(showMaybe1))(showMaybe1))(showMaybe13))(showMaybe15))(showCT))(showCR))(showMaybe6))(showString))(showMaybe2))(showMaybe2))(showMaybe15))))(ContractTermsIsSymbol))
    };
  };
  var eqSCEF = {
    eq: function(x) {
      return function(y) {
        if (x instanceof SE_OOO && y instanceof SE_OOO) {
          return true;
        }
        ;
        if (x instanceof SE_IOO && y instanceof SE_IOO) {
          return true;
        }
        ;
        if (x instanceof SE_ONO && y instanceof SE_ONO) {
          return true;
        }
        ;
        if (x instanceof SE_OOM && y instanceof SE_OOM) {
          return true;
        }
        ;
        if (x instanceof SE_INO && y instanceof SE_INO) {
          return true;
        }
        ;
        if (x instanceof SE_ONM && y instanceof SE_ONM) {
          return true;
        }
        ;
        if (x instanceof SE_IOM && y instanceof SE_IOM) {
          return true;
        }
        ;
        if (x instanceof SE_INM && y instanceof SE_INM) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordSCEF = {
    compare: function(x) {
      return function(y) {
        if (x instanceof SE_OOO && y instanceof SE_OOO) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_OOO) {
          return LT.value;
        }
        ;
        if (y instanceof SE_OOO) {
          return GT.value;
        }
        ;
        if (x instanceof SE_IOO && y instanceof SE_IOO) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_IOO) {
          return LT.value;
        }
        ;
        if (y instanceof SE_IOO) {
          return GT.value;
        }
        ;
        if (x instanceof SE_ONO && y instanceof SE_ONO) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_ONO) {
          return LT.value;
        }
        ;
        if (y instanceof SE_ONO) {
          return GT.value;
        }
        ;
        if (x instanceof SE_OOM && y instanceof SE_OOM) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_OOM) {
          return LT.value;
        }
        ;
        if (y instanceof SE_OOM) {
          return GT.value;
        }
        ;
        if (x instanceof SE_INO && y instanceof SE_INO) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_INO) {
          return LT.value;
        }
        ;
        if (y instanceof SE_INO) {
          return GT.value;
        }
        ;
        if (x instanceof SE_ONM && y instanceof SE_ONM) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_ONM) {
          return LT.value;
        }
        ;
        if (y instanceof SE_ONM) {
          return GT.value;
        }
        ;
        if (x instanceof SE_IOM && y instanceof SE_IOM) {
          return EQ.value;
        }
        ;
        if (x instanceof SE_IOM) {
          return LT.value;
        }
        ;
        if (y instanceof SE_IOM) {
          return GT.value;
        }
        ;
        if (x instanceof SE_INM && y instanceof SE_INM) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqSCEF;
    }
  };
  var eqPeriod = {
    eq: function(x) {
      return function(y) {
        if (x instanceof P_D && y instanceof P_D) {
          return true;
        }
        ;
        if (x instanceof P_W && y instanceof P_W) {
          return true;
        }
        ;
        if (x instanceof P_M && y instanceof P_M) {
          return true;
        }
        ;
        if (x instanceof P_Q && y instanceof P_Q) {
          return true;
        }
        ;
        if (x instanceof P_H && y instanceof P_H) {
          return true;
        }
        ;
        if (x instanceof P_Y && y instanceof P_Y) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordPeriod = {
    compare: function(x) {
      return function(y) {
        if (x instanceof P_D && y instanceof P_D) {
          return EQ.value;
        }
        ;
        if (x instanceof P_D) {
          return LT.value;
        }
        ;
        if (y instanceof P_D) {
          return GT.value;
        }
        ;
        if (x instanceof P_W && y instanceof P_W) {
          return EQ.value;
        }
        ;
        if (x instanceof P_W) {
          return LT.value;
        }
        ;
        if (y instanceof P_W) {
          return GT.value;
        }
        ;
        if (x instanceof P_M && y instanceof P_M) {
          return EQ.value;
        }
        ;
        if (x instanceof P_M) {
          return LT.value;
        }
        ;
        if (y instanceof P_M) {
          return GT.value;
        }
        ;
        if (x instanceof P_Q && y instanceof P_Q) {
          return EQ.value;
        }
        ;
        if (x instanceof P_Q) {
          return LT.value;
        }
        ;
        if (y instanceof P_Q) {
          return GT.value;
        }
        ;
        if (x instanceof P_H && y instanceof P_H) {
          return EQ.value;
        }
        ;
        if (x instanceof P_H) {
          return LT.value;
        }
        ;
        if (y instanceof P_H) {
          return GT.value;
        }
        ;
        if (x instanceof P_Y && y instanceof P_Y) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqPeriod;
    }
  };
  var eqPYTP = {
    eq: function(x) {
      return function(y) {
        if (x instanceof PYTP_A && y instanceof PYTP_A) {
          return true;
        }
        ;
        if (x instanceof PYTP_N && y instanceof PYTP_N) {
          return true;
        }
        ;
        if (x instanceof PYTP_I && y instanceof PYTP_I) {
          return true;
        }
        ;
        if (x instanceof PYTP_O && y instanceof PYTP_O) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordPYTP = {
    compare: function(x) {
      return function(y) {
        if (x instanceof PYTP_A && y instanceof PYTP_A) {
          return EQ.value;
        }
        ;
        if (x instanceof PYTP_A) {
          return LT.value;
        }
        ;
        if (y instanceof PYTP_A) {
          return GT.value;
        }
        ;
        if (x instanceof PYTP_N && y instanceof PYTP_N) {
          return EQ.value;
        }
        ;
        if (x instanceof PYTP_N) {
          return LT.value;
        }
        ;
        if (y instanceof PYTP_N) {
          return GT.value;
        }
        ;
        if (x instanceof PYTP_I && y instanceof PYTP_I) {
          return EQ.value;
        }
        ;
        if (x instanceof PYTP_I) {
          return LT.value;
        }
        ;
        if (y instanceof PYTP_I) {
          return GT.value;
        }
        ;
        if (x instanceof PYTP_O && y instanceof PYTP_O) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqPYTP;
    }
  };
  var eqPRF = {
    eq: function(x) {
      return function(y) {
        if (x instanceof PRF_PF && y instanceof PRF_PF) {
          return true;
        }
        ;
        if (x instanceof PRF_DL && y instanceof PRF_DL) {
          return true;
        }
        ;
        if (x instanceof PRF_DQ && y instanceof PRF_DQ) {
          return true;
        }
        ;
        if (x instanceof PRF_DF && y instanceof PRF_DF) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordPRF = {
    compare: function(x) {
      return function(y) {
        if (x instanceof PRF_PF && y instanceof PRF_PF) {
          return EQ.value;
        }
        ;
        if (x instanceof PRF_PF) {
          return LT.value;
        }
        ;
        if (y instanceof PRF_PF) {
          return GT.value;
        }
        ;
        if (x instanceof PRF_DL && y instanceof PRF_DL) {
          return EQ.value;
        }
        ;
        if (x instanceof PRF_DL) {
          return LT.value;
        }
        ;
        if (y instanceof PRF_DL) {
          return GT.value;
        }
        ;
        if (x instanceof PRF_DQ && y instanceof PRF_DQ) {
          return EQ.value;
        }
        ;
        if (x instanceof PRF_DQ) {
          return LT.value;
        }
        ;
        if (y instanceof PRF_DQ) {
          return GT.value;
        }
        ;
        if (x instanceof PRF_DF && y instanceof PRF_DF) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqPRF;
    }
  };
  var eqPPEF = {
    eq: function(x) {
      return function(y) {
        if (x instanceof PPEF_N && y instanceof PPEF_N) {
          return true;
        }
        ;
        if (x instanceof PPEF_A && y instanceof PPEF_A) {
          return true;
        }
        ;
        if (x instanceof PPEF_M && y instanceof PPEF_M) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordPPEF = {
    compare: function(x) {
      return function(y) {
        if (x instanceof PPEF_N && y instanceof PPEF_N) {
          return EQ.value;
        }
        ;
        if (x instanceof PPEF_N) {
          return LT.value;
        }
        ;
        if (y instanceof PPEF_N) {
          return GT.value;
        }
        ;
        if (x instanceof PPEF_A && y instanceof PPEF_A) {
          return EQ.value;
        }
        ;
        if (x instanceof PPEF_A) {
          return LT.value;
        }
        ;
        if (y instanceof PPEF_A) {
          return GT.value;
        }
        ;
        if (x instanceof PPEF_M && y instanceof PPEF_M) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqPPEF;
    }
  };
  var eqOPXT = {
    eq: function(x) {
      return function(y) {
        if (x instanceof OPXT_E && y instanceof OPXT_E) {
          return true;
        }
        ;
        if (x instanceof OPXT_B && y instanceof OPXT_B) {
          return true;
        }
        ;
        if (x instanceof OPXT_A && y instanceof OPXT_A) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordOPXT = {
    compare: function(x) {
      return function(y) {
        if (x instanceof OPXT_E && y instanceof OPXT_E) {
          return EQ.value;
        }
        ;
        if (x instanceof OPXT_E) {
          return LT.value;
        }
        ;
        if (y instanceof OPXT_E) {
          return GT.value;
        }
        ;
        if (x instanceof OPXT_B && y instanceof OPXT_B) {
          return EQ.value;
        }
        ;
        if (x instanceof OPXT_B) {
          return LT.value;
        }
        ;
        if (y instanceof OPXT_B) {
          return GT.value;
        }
        ;
        if (x instanceof OPXT_A && y instanceof OPXT_A) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqOPXT;
    }
  };
  var eqOPTP = {
    eq: function(x) {
      return function(y) {
        if (x instanceof OPTP_C && y instanceof OPTP_C) {
          return true;
        }
        ;
        if (x instanceof OPTP_P && y instanceof OPTP_P) {
          return true;
        }
        ;
        if (x instanceof OPTP_CP && y instanceof OPTP_CP) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordOPTP = {
    compare: function(x) {
      return function(y) {
        if (x instanceof OPTP_C && y instanceof OPTP_C) {
          return EQ.value;
        }
        ;
        if (x instanceof OPTP_C) {
          return LT.value;
        }
        ;
        if (y instanceof OPTP_C) {
          return GT.value;
        }
        ;
        if (x instanceof OPTP_P && y instanceof OPTP_P) {
          return EQ.value;
        }
        ;
        if (x instanceof OPTP_P) {
          return LT.value;
        }
        ;
        if (y instanceof OPTP_P) {
          return GT.value;
        }
        ;
        if (x instanceof OPTP_CP && y instanceof OPTP_CP) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqOPTP;
    }
  };
  var eqIPCB = {
    eq: function(x) {
      return function(y) {
        if (x instanceof IPCB_NT && y instanceof IPCB_NT) {
          return true;
        }
        ;
        if (x instanceof IPCB_NTIED && y instanceof IPCB_NTIED) {
          return true;
        }
        ;
        if (x instanceof IPCB_NTL && y instanceof IPCB_NTL) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordIPCB = {
    compare: function(x) {
      return function(y) {
        if (x instanceof IPCB_NT && y instanceof IPCB_NT) {
          return EQ.value;
        }
        ;
        if (x instanceof IPCB_NT) {
          return LT.value;
        }
        ;
        if (y instanceof IPCB_NT) {
          return GT.value;
        }
        ;
        if (x instanceof IPCB_NTIED && y instanceof IPCB_NTIED) {
          return EQ.value;
        }
        ;
        if (x instanceof IPCB_NTIED) {
          return LT.value;
        }
        ;
        if (y instanceof IPCB_NTIED) {
          return GT.value;
        }
        ;
        if (x instanceof IPCB_NTL && y instanceof IPCB_NTL) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqIPCB;
    }
  };
  var eqFEB = {
    eq: function(x) {
      return function(y) {
        if (x instanceof FEB_A && y instanceof FEB_A) {
          return true;
        }
        ;
        if (x instanceof FEB_N && y instanceof FEB_N) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordFEB = {
    compare: function(x) {
      return function(y) {
        if (x instanceof FEB_A && y instanceof FEB_A) {
          return EQ.value;
        }
        ;
        if (x instanceof FEB_A) {
          return LT.value;
        }
        ;
        if (y instanceof FEB_A) {
          return GT.value;
        }
        ;
        if (x instanceof FEB_N && y instanceof FEB_N) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqFEB;
    }
  };
  var eqEOMC = {
    eq: function(x) {
      return function(y) {
        if (x instanceof EOMC_EOM && y instanceof EOMC_EOM) {
          return true;
        }
        ;
        if (x instanceof EOMC_SD && y instanceof EOMC_SD) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordEOMC = {
    compare: function(x) {
      return function(y) {
        if (x instanceof EOMC_EOM && y instanceof EOMC_EOM) {
          return EQ.value;
        }
        ;
        if (x instanceof EOMC_EOM) {
          return LT.value;
        }
        ;
        if (y instanceof EOMC_EOM) {
          return GT.value;
        }
        ;
        if (x instanceof EOMC_SD && y instanceof EOMC_SD) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqEOMC;
    }
  };
  var eqDS = {
    eq: function(x) {
      return function(y) {
        if (x instanceof DS_S && y instanceof DS_S) {
          return true;
        }
        ;
        if (x instanceof DS_D && y instanceof DS_D) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordDS = {
    compare: function(x) {
      return function(y) {
        if (x instanceof DS_S && y instanceof DS_S) {
          return EQ.value;
        }
        ;
        if (x instanceof DS_S) {
          return LT.value;
        }
        ;
        if (y instanceof DS_S) {
          return GT.value;
        }
        ;
        if (x instanceof DS_D && y instanceof DS_D) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqDS;
    }
  };
  var eqCalendar = {
    eq: function(x) {
      return function(y) {
        if (x instanceof CLDR_MF && y instanceof CLDR_MF) {
          return true;
        }
        ;
        if (x instanceof CLDR_NC && y instanceof CLDR_NC) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordCalendar = {
    compare: function(x) {
      return function(y) {
        if (x instanceof CLDR_MF && y instanceof CLDR_MF) {
          return EQ.value;
        }
        ;
        if (x instanceof CLDR_MF) {
          return LT.value;
        }
        ;
        if (y instanceof CLDR_MF) {
          return GT.value;
        }
        ;
        if (x instanceof CLDR_NC && y instanceof CLDR_NC) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqCalendar;
    }
  };
  var eqCT = {
    eq: function(x) {
      return function(y) {
        if (x instanceof PAM && y instanceof PAM) {
          return true;
        }
        ;
        if (x instanceof LAM && y instanceof LAM) {
          return true;
        }
        ;
        if (x instanceof NAM && y instanceof NAM) {
          return true;
        }
        ;
        if (x instanceof ANN && y instanceof ANN) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordCT = {
    compare: function(x) {
      return function(y) {
        if (x instanceof PAM && y instanceof PAM) {
          return EQ.value;
        }
        ;
        if (x instanceof PAM) {
          return LT.value;
        }
        ;
        if (y instanceof PAM) {
          return GT.value;
        }
        ;
        if (x instanceof LAM && y instanceof LAM) {
          return EQ.value;
        }
        ;
        if (x instanceof LAM) {
          return LT.value;
        }
        ;
        if (y instanceof LAM) {
          return GT.value;
        }
        ;
        if (x instanceof NAM && y instanceof NAM) {
          return EQ.value;
        }
        ;
        if (x instanceof NAM) {
          return LT.value;
        }
        ;
        if (y instanceof NAM) {
          return GT.value;
        }
        ;
        if (x instanceof ANN && y instanceof ANN) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqCT;
    }
  };
  var eqCR = {
    eq: function(x) {
      return function(y) {
        if (x instanceof CR_RPA && y instanceof CR_RPA) {
          return true;
        }
        ;
        if (x instanceof CR_RPL && y instanceof CR_RPL) {
          return true;
        }
        ;
        if (x instanceof CR_CLO && y instanceof CR_CLO) {
          return true;
        }
        ;
        if (x instanceof CR_CNO && y instanceof CR_CNO) {
          return true;
        }
        ;
        if (x instanceof CR_COL && y instanceof CR_COL) {
          return true;
        }
        ;
        if (x instanceof CR_LG && y instanceof CR_LG) {
          return true;
        }
        ;
        if (x instanceof CR_ST && y instanceof CR_ST) {
          return true;
        }
        ;
        if (x instanceof CR_BUY && y instanceof CR_BUY) {
          return true;
        }
        ;
        if (x instanceof CR_SEL && y instanceof CR_SEL) {
          return true;
        }
        ;
        if (x instanceof CR_RFL && y instanceof CR_RFL) {
          return true;
        }
        ;
        if (x instanceof CR_PFL && y instanceof CR_PFL) {
          return true;
        }
        ;
        if (x instanceof CR_RF && y instanceof CR_RF) {
          return true;
        }
        ;
        if (x instanceof CR_PF && y instanceof CR_PF) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordCR = {
    compare: function(x) {
      return function(y) {
        if (x instanceof CR_RPA && y instanceof CR_RPA) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_RPA) {
          return LT.value;
        }
        ;
        if (y instanceof CR_RPA) {
          return GT.value;
        }
        ;
        if (x instanceof CR_RPL && y instanceof CR_RPL) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_RPL) {
          return LT.value;
        }
        ;
        if (y instanceof CR_RPL) {
          return GT.value;
        }
        ;
        if (x instanceof CR_CLO && y instanceof CR_CLO) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_CLO) {
          return LT.value;
        }
        ;
        if (y instanceof CR_CLO) {
          return GT.value;
        }
        ;
        if (x instanceof CR_CNO && y instanceof CR_CNO) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_CNO) {
          return LT.value;
        }
        ;
        if (y instanceof CR_CNO) {
          return GT.value;
        }
        ;
        if (x instanceof CR_COL && y instanceof CR_COL) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_COL) {
          return LT.value;
        }
        ;
        if (y instanceof CR_COL) {
          return GT.value;
        }
        ;
        if (x instanceof CR_LG && y instanceof CR_LG) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_LG) {
          return LT.value;
        }
        ;
        if (y instanceof CR_LG) {
          return GT.value;
        }
        ;
        if (x instanceof CR_ST && y instanceof CR_ST) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_ST) {
          return LT.value;
        }
        ;
        if (y instanceof CR_ST) {
          return GT.value;
        }
        ;
        if (x instanceof CR_BUY && y instanceof CR_BUY) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_BUY) {
          return LT.value;
        }
        ;
        if (y instanceof CR_BUY) {
          return GT.value;
        }
        ;
        if (x instanceof CR_SEL && y instanceof CR_SEL) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_SEL) {
          return LT.value;
        }
        ;
        if (y instanceof CR_SEL) {
          return GT.value;
        }
        ;
        if (x instanceof CR_RFL && y instanceof CR_RFL) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_RFL) {
          return LT.value;
        }
        ;
        if (y instanceof CR_RFL) {
          return GT.value;
        }
        ;
        if (x instanceof CR_PFL && y instanceof CR_PFL) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_PFL) {
          return LT.value;
        }
        ;
        if (y instanceof CR_PFL) {
          return GT.value;
        }
        ;
        if (x instanceof CR_RF && y instanceof CR_RF) {
          return EQ.value;
        }
        ;
        if (x instanceof CR_RF) {
          return LT.value;
        }
        ;
        if (y instanceof CR_RF) {
          return GT.value;
        }
        ;
        if (x instanceof CR_PF && y instanceof CR_PF) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqCR;
    }
  };
  var eqCETC = {
    eq: function(x) {
      return function(y) {
        if (x instanceof CETC_DL && y instanceof CETC_DL) {
          return true;
        }
        ;
        if (x instanceof CETC_DQ && y instanceof CETC_DQ) {
          return true;
        }
        ;
        if (x instanceof CETC_DF && y instanceof CETC_DF) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordCETC = {
    compare: function(x) {
      return function(y) {
        if (x instanceof CETC_DL && y instanceof CETC_DL) {
          return EQ.value;
        }
        ;
        if (x instanceof CETC_DL) {
          return LT.value;
        }
        ;
        if (y instanceof CETC_DL) {
          return GT.value;
        }
        ;
        if (x instanceof CETC_DQ && y instanceof CETC_DQ) {
          return EQ.value;
        }
        ;
        if (x instanceof CETC_DQ) {
          return LT.value;
        }
        ;
        if (y instanceof CETC_DQ) {
          return GT.value;
        }
        ;
        if (x instanceof CETC_DF && y instanceof CETC_DF) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqCETC;
    }
  };
  var eqCEGE = {
    eq: function(x) {
      return function(y) {
        if (x instanceof CEGE_NO && y instanceof CEGE_NO) {
          return true;
        }
        ;
        if (x instanceof CEGE_NI && y instanceof CEGE_NI) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordCEGE = {
    compare: function(x) {
      return function(y) {
        if (x instanceof CEGE_NO && y instanceof CEGE_NO) {
          return EQ.value;
        }
        ;
        if (x instanceof CEGE_NO) {
          return LT.value;
        }
        ;
        if (y instanceof CEGE_NO) {
          return GT.value;
        }
        ;
        if (x instanceof CEGE_NI && y instanceof CEGE_NI) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqCEGE;
    }
  };
  var eqBDC = {
    eq: function(x) {
      return function(y) {
        if (x instanceof BDC_NULL && y instanceof BDC_NULL) {
          return true;
        }
        ;
        if (x instanceof BDC_SCF && y instanceof BDC_SCF) {
          return true;
        }
        ;
        if (x instanceof BDC_SCMF && y instanceof BDC_SCMF) {
          return true;
        }
        ;
        if (x instanceof BDC_CSF && y instanceof BDC_CSF) {
          return true;
        }
        ;
        if (x instanceof BDC_CSMF && y instanceof BDC_CSMF) {
          return true;
        }
        ;
        if (x instanceof BDC_SCP && y instanceof BDC_SCP) {
          return true;
        }
        ;
        if (x instanceof BDC_SCMP && y instanceof BDC_SCMP) {
          return true;
        }
        ;
        if (x instanceof BDC_CSP && y instanceof BDC_CSP) {
          return true;
        }
        ;
        if (x instanceof BDC_CSMP && y instanceof BDC_CSMP) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordBDC = {
    compare: function(x) {
      return function(y) {
        if (x instanceof BDC_NULL && y instanceof BDC_NULL) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_NULL) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_NULL) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_SCF && y instanceof BDC_SCF) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_SCF) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_SCF) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_SCMF && y instanceof BDC_SCMF) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_SCMF) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_SCMF) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_CSF && y instanceof BDC_CSF) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_CSF) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_CSF) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_CSMF && y instanceof BDC_CSMF) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_CSMF) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_CSMF) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_SCP && y instanceof BDC_SCP) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_SCP) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_SCP) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_SCMP && y instanceof BDC_SCMP) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_SCMP) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_SCMP) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_CSP && y instanceof BDC_CSP) {
          return EQ.value;
        }
        ;
        if (x instanceof BDC_CSP) {
          return LT.value;
        }
        ;
        if (y instanceof BDC_CSP) {
          return GT.value;
        }
        ;
        if (x instanceof BDC_CSMP && y instanceof BDC_CSMP) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.ContractTerms (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqBDC;
    }
  };
  var enumSCEF = {
    succ: /* @__PURE__ */ genericSucc(genericSCEF_)(genericEnumSum5),
    pred: /* @__PURE__ */ genericPred(genericSCEF_)(genericEnumSum5),
    Ord0: function() {
      return ordSCEF;
    }
  };
  var enumPeriod = {
    succ: /* @__PURE__ */ genericSucc(genericPeriod_)(genericEnumSum4),
    pred: /* @__PURE__ */ genericPred(genericPeriod_)(genericEnumSum4),
    Ord0: function() {
      return ordPeriod;
    }
  };
  var upFromIncluding2 = /* @__PURE__ */ upFromIncluding(enumPeriod)(unfoldable1Array);
  var enumPYTP = {
    succ: /* @__PURE__ */ genericSucc(genericPYTP_)(genericEnumSum3),
    pred: /* @__PURE__ */ genericPred(genericPYTP_)(genericEnumSum3),
    Ord0: function() {
      return ordPYTP;
    }
  };
  var enumPRF = {
    succ: /* @__PURE__ */ genericSucc(genericPRF_)(genericEnumSum3),
    pred: /* @__PURE__ */ genericPred(genericPRF_)(genericEnumSum3),
    Ord0: function() {
      return ordPRF;
    }
  };
  var enumPPEF = {
    succ: /* @__PURE__ */ genericSucc(genericPPEF_)(genericEnumSum22),
    pred: /* @__PURE__ */ genericPred(genericPPEF_)(genericEnumSum22),
    Ord0: function() {
      return ordPPEF;
    }
  };
  var enumOPXT = {
    succ: /* @__PURE__ */ genericSucc(genericOPXT_)(genericEnumSum22),
    pred: /* @__PURE__ */ genericPred(genericOPXT_)(genericEnumSum22),
    Ord0: function() {
      return ordOPXT;
    }
  };
  var enumOPTP = {
    succ: /* @__PURE__ */ genericSucc(genericOPTP_)(genericEnumSum22),
    pred: /* @__PURE__ */ genericPred(genericOPTP_)(genericEnumSum22),
    Ord0: function() {
      return ordOPTP;
    }
  };
  var enumIPCB = {
    succ: /* @__PURE__ */ genericSucc(genericIPCB_)(genericEnumSum22),
    pred: /* @__PURE__ */ genericPred(genericIPCB_)(genericEnumSum22),
    Ord0: function() {
      return ordIPCB;
    }
  };
  var enumFEB = {
    succ: /* @__PURE__ */ genericSucc(genericFEB_)(genericEnumSum1),
    pred: /* @__PURE__ */ genericPred(genericFEB_)(genericEnumSum1),
    Ord0: function() {
      return ordFEB;
    }
  };
  var enumEOMC = {
    succ: /* @__PURE__ */ genericSucc(genericEOMC_)(genericEnumSum1),
    pred: /* @__PURE__ */ genericPred(genericEOMC_)(genericEnumSum1),
    Ord0: function() {
      return ordEOMC;
    }
  };
  var enumDS = {
    succ: /* @__PURE__ */ genericSucc(genericDS_)(genericEnumSum1),
    pred: /* @__PURE__ */ genericPred(genericDS_)(genericEnumSum1),
    Ord0: function() {
      return ordDS;
    }
  };
  var enumCalendar = {
    succ: /* @__PURE__ */ genericSucc(genericCalendar_)(genericEnumSum1),
    pred: /* @__PURE__ */ genericPred(genericCalendar_)(genericEnumSum1),
    Ord0: function() {
      return ordCalendar;
    }
  };
  var enumCT = {
    succ: /* @__PURE__ */ genericSucc(genericCT_)(genericEnumSum3),
    pred: /* @__PURE__ */ genericPred(genericCT_)(genericEnumSum3),
    Ord0: function() {
      return ordCT;
    }
  };
  var enumCR = {
    succ: /* @__PURE__ */ genericSucc(genericCR_)(genericEnumSum7),
    pred: /* @__PURE__ */ genericPred(genericCR_)(genericEnumSum7),
    Ord0: function() {
      return ordCR;
    }
  };
  var enumCETC = {
    succ: /* @__PURE__ */ genericSucc(genericCETC_)(genericEnumSum22),
    pred: /* @__PURE__ */ genericPred(genericCETC_)(genericEnumSum22),
    Ord0: function() {
      return ordCETC;
    }
  };
  var enumCEGE = {
    succ: /* @__PURE__ */ genericSucc(genericCEGE_)(genericEnumSum1),
    pred: /* @__PURE__ */ genericPred(genericCEGE_)(genericEnumSum1),
    Ord0: function() {
      return ordCEGE;
    }
  };
  var enumBDC = {
    succ: /* @__PURE__ */ genericSucc(genericBDC_)(genericEnumSum6),
    pred: /* @__PURE__ */ genericPred(genericBDC_)(genericEnumSum6),
    Ord0: function() {
      return ordBDC;
    }
  };
  var decodeJsonDCC = {
    decodeJson: /* @__PURE__ */ function() {
      var decode2 = function(v) {
        if (v === "AA") {
          return pure8(DCC_A_AISDA.value);
        }
        ;
        if (v === "A360") {
          return pure8(DCC_A_360.value);
        }
        ;
        if (v === "A365") {
          return pure8(DCC_A_365.value);
        }
        ;
        if (v === "30E360ISDA") {
          return pure8(DCC_E30_360ISDA.value);
        }
        ;
        if (v === "30E360") {
          return pure8(DCC_E30_360.value);
        }
        ;
        if (v === "B252") {
          return pure8(DCC_B_252.value);
        }
        ;
        return Nothing.value;
      };
      return decodeFromString(decode2);
    }()
  };
  var decodeJson1 = /* @__PURE__ */ decodeJson(decodeJsonDCC);
  var boundedSCEF = {
    top: /* @__PURE__ */ genericTop(genericSCEF_)(genericTopSum4),
    bottom: /* @__PURE__ */ genericBottom(genericSCEF_)(genericBottomSum2),
    Ord0: function() {
      return ordSCEF;
    }
  };
  var boundedPeriod = {
    top: /* @__PURE__ */ genericTop(genericPeriod_)(genericTopSum3),
    bottom: /* @__PURE__ */ genericBottom(genericPeriod_)(genericBottomSum2),
    Ord0: function() {
      return ordPeriod;
    }
  };
  var bottom3 = /* @__PURE__ */ bottom(boundedPeriod);
  var boundedPYTP = {
    top: /* @__PURE__ */ genericTop(genericPYTP_)(genericTopSum22),
    bottom: /* @__PURE__ */ genericBottom(genericPYTP_)(genericBottomSum2),
    Ord0: function() {
      return ordPYTP;
    }
  };
  var boundedPRF = {
    top: /* @__PURE__ */ genericTop(genericPRF_)(genericTopSum22),
    bottom: /* @__PURE__ */ genericBottom(genericPRF_)(genericBottomSum2),
    Ord0: function() {
      return ordPRF;
    }
  };
  var boundedPPEF = {
    top: /* @__PURE__ */ genericTop(genericPPEF_)(genericTopSum1),
    bottom: /* @__PURE__ */ genericBottom(genericPPEF_)(genericBottomSum2),
    Ord0: function() {
      return ordPPEF;
    }
  };
  var boundedOPXT = {
    top: /* @__PURE__ */ genericTop(genericOPXT_)(genericTopSum1),
    bottom: /* @__PURE__ */ genericBottom(genericOPXT_)(genericBottomSum2),
    Ord0: function() {
      return ordOPXT;
    }
  };
  var boundedOPTP = {
    top: /* @__PURE__ */ genericTop(genericOPTP_)(genericTopSum1),
    bottom: /* @__PURE__ */ genericBottom(genericOPTP_)(genericBottomSum2),
    Ord0: function() {
      return ordOPTP;
    }
  };
  var boundedIPCB = {
    top: /* @__PURE__ */ genericTop(genericIPCB_)(genericTopSum1),
    bottom: /* @__PURE__ */ genericBottom(genericIPCB_)(genericBottomSum2),
    Ord0: function() {
      return ordIPCB;
    }
  };
  var boundedFEB = {
    top: /* @__PURE__ */ genericTop(genericFEB_)(genericTopSum2),
    bottom: /* @__PURE__ */ genericBottom(genericFEB_)(genericBottomSum2),
    Ord0: function() {
      return ordFEB;
    }
  };
  var boundedEnumSCEF = {
    cardinality: /* @__PURE__ */ genericCardinality(genericSCEF_)(genericBoundedEnumSum5),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericSCEF_)(genericBoundedEnumSum5),
    toEnum: /* @__PURE__ */ genericToEnum(genericSCEF_)(genericBoundedEnumSum5),
    Bounded0: function() {
      return boundedSCEF;
    },
    Enum1: function() {
      return enumSCEF;
    }
  };
  var decodeJsonSCEF = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showSCEF)(boundedEnumSCEF)(identity16)
  };
  var decodeJson22 = /* @__PURE__ */ decodeJson(decodeJsonSCEF);
  var boundedEnumPeriod = {
    cardinality: /* @__PURE__ */ genericCardinality(genericPeriod_)(genericBoundedEnumSum4),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericPeriod_)(genericBoundedEnumSum4),
    toEnum: /* @__PURE__ */ genericToEnum(genericPeriod_)(genericBoundedEnumSum4),
    Bounded0: function() {
      return boundedPeriod;
    },
    Enum1: function() {
      return enumPeriod;
    }
  };
  var boundedEnumPYTP = {
    cardinality: /* @__PURE__ */ genericCardinality(genericPYTP_)(genericBoundedEnumSum3),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericPYTP_)(genericBoundedEnumSum3),
    toEnum: /* @__PURE__ */ genericToEnum(genericPYTP_)(genericBoundedEnumSum3),
    Bounded0: function() {
      return boundedPYTP;
    },
    Enum1: function() {
      return enumPYTP;
    }
  };
  var decodeJsonPYTP = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showPYTP)(boundedEnumPYTP)(/* @__PURE__ */ tryStripPrefix("PYTP_"))
  };
  var decodeJson32 = /* @__PURE__ */ decodeJson(decodeJsonPYTP);
  var boundedEnumPRF = {
    cardinality: /* @__PURE__ */ genericCardinality(genericPRF_)(genericBoundedEnumSum3),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericPRF_)(genericBoundedEnumSum3),
    toEnum: /* @__PURE__ */ genericToEnum(genericPRF_)(genericBoundedEnumSum3),
    Bounded0: function() {
      return boundedPRF;
    },
    Enum1: function() {
      return enumPRF;
    }
  };
  var decodeJsonPRF = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showPRF)(boundedEnumPRF)(/* @__PURE__ */ tryStripPrefix("PRF_"))
  };
  var decodeJson4 = /* @__PURE__ */ decodeJson(decodeJsonPRF);
  var boundedEnumPPEF = {
    cardinality: /* @__PURE__ */ genericCardinality(genericPPEF_)(genericBoundedEnumSum22),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericPPEF_)(genericBoundedEnumSum22),
    toEnum: /* @__PURE__ */ genericToEnum(genericPPEF_)(genericBoundedEnumSum22),
    Bounded0: function() {
      return boundedPPEF;
    },
    Enum1: function() {
      return enumPPEF;
    }
  };
  var decodeJsonPPEF = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showPPEF)(boundedEnumPPEF)(/* @__PURE__ */ tryStripPrefix("PPEF_"))
  };
  var decodeJson5 = /* @__PURE__ */ decodeJson(decodeJsonPPEF);
  var boundedEnumOPXT = {
    cardinality: /* @__PURE__ */ genericCardinality(genericOPXT_)(genericBoundedEnumSum22),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericOPXT_)(genericBoundedEnumSum22),
    toEnum: /* @__PURE__ */ genericToEnum(genericOPXT_)(genericBoundedEnumSum22),
    Bounded0: function() {
      return boundedOPXT;
    },
    Enum1: function() {
      return enumOPXT;
    }
  };
  var decodeJsonOPXT = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showOPXT)(boundedEnumOPXT)(/* @__PURE__ */ tryStripPrefix("OPXT_"))
  };
  var decodeJson6 = /* @__PURE__ */ decodeJson(decodeJsonOPXT);
  var boundedEnumOPTP = {
    cardinality: /* @__PURE__ */ genericCardinality(genericOPTP_)(genericBoundedEnumSum22),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericOPTP_)(genericBoundedEnumSum22),
    toEnum: /* @__PURE__ */ genericToEnum(genericOPTP_)(genericBoundedEnumSum22),
    Bounded0: function() {
      return boundedOPTP;
    },
    Enum1: function() {
      return enumOPTP;
    }
  };
  var decodeJsonOPTP = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showOPTP)(boundedEnumOPTP)(/* @__PURE__ */ tryStripPrefix("OPTP_"))
  };
  var decodeJson7 = /* @__PURE__ */ decodeJson(decodeJsonOPTP);
  var boundedEnumIPCB = {
    cardinality: /* @__PURE__ */ genericCardinality(genericIPCB_)(genericBoundedEnumSum22),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericIPCB_)(genericBoundedEnumSum22),
    toEnum: /* @__PURE__ */ genericToEnum(genericIPCB_)(genericBoundedEnumSum22),
    Bounded0: function() {
      return boundedIPCB;
    },
    Enum1: function() {
      return enumIPCB;
    }
  };
  var decodeJsonIPCB = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showIPCB)(boundedEnumIPCB)(/* @__PURE__ */ tryStripPrefix("IPCB_"))
  };
  var decodeJson8 = /* @__PURE__ */ decodeJson(decodeJsonIPCB);
  var boundedEnumFEB = {
    cardinality: /* @__PURE__ */ genericCardinality(genericFEB_)(genericBoundedEnumSum1),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericFEB_)(genericBoundedEnumSum1),
    toEnum: /* @__PURE__ */ genericToEnum(genericFEB_)(genericBoundedEnumSum1),
    Bounded0: function() {
      return boundedFEB;
    },
    Enum1: function() {
      return enumFEB;
    }
  };
  var decodeJsonFEB = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showFEB)(boundedEnumFEB)(/* @__PURE__ */ tryStripPrefix("FEB_"))
  };
  var decodeJson9 = /* @__PURE__ */ decodeJson(decodeJsonFEB);
  var boundedEOMC = {
    top: /* @__PURE__ */ genericTop(genericEOMC_)(genericTopSum2),
    bottom: /* @__PURE__ */ genericBottom(genericEOMC_)(genericBottomSum2),
    Ord0: function() {
      return ordEOMC;
    }
  };
  var boundedEnumEOMC = {
    cardinality: /* @__PURE__ */ genericCardinality(genericEOMC_)(genericBoundedEnumSum1),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericEOMC_)(genericBoundedEnumSum1),
    toEnum: /* @__PURE__ */ genericToEnum(genericEOMC_)(genericBoundedEnumSum1),
    Bounded0: function() {
      return boundedEOMC;
    },
    Enum1: function() {
      return enumEOMC;
    }
  };
  var decodeJsonEOMC = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showEOMC)(boundedEnumEOMC)(/* @__PURE__ */ tryStripPrefix("EOMC_"))
  };
  var decodeJson10 = /* @__PURE__ */ decodeJson(decodeJsonEOMC);
  var boundedDS = {
    top: /* @__PURE__ */ genericTop(genericDS_)(genericTopSum2),
    bottom: /* @__PURE__ */ genericBottom(genericDS_)(genericBottomSum2),
    Ord0: function() {
      return ordDS;
    }
  };
  var boundedEnumDS = {
    cardinality: /* @__PURE__ */ genericCardinality(genericDS_)(genericBoundedEnumSum1),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericDS_)(genericBoundedEnumSum1),
    toEnum: /* @__PURE__ */ genericToEnum(genericDS_)(genericBoundedEnumSum1),
    Bounded0: function() {
      return boundedDS;
    },
    Enum1: function() {
      return enumDS;
    }
  };
  var decodeJsonDS = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showDS)(boundedEnumDS)(/* @__PURE__ */ tryStripPrefix("DS_"))
  };
  var decodeJson11 = /* @__PURE__ */ decodeJson(decodeJsonDS);
  var boundedCalendar = {
    top: /* @__PURE__ */ genericTop(genericCalendar_)(genericTopSum2),
    bottom: /* @__PURE__ */ genericBottom(genericCalendar_)(genericBottomSum2),
    Ord0: function() {
      return ordCalendar;
    }
  };
  var boundedEnumCalendar = {
    cardinality: /* @__PURE__ */ genericCardinality(genericCalendar_)(genericBoundedEnumSum1),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericCalendar_)(genericBoundedEnumSum1),
    toEnum: /* @__PURE__ */ genericToEnum(genericCalendar_)(genericBoundedEnumSum1),
    Bounded0: function() {
      return boundedCalendar;
    },
    Enum1: function() {
      return enumCalendar;
    }
  };
  var decodeJsonCalendar = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showCalendar)(boundedEnumCalendar)(/* @__PURE__ */ tryStripPrefix("CLDR_"))
  };
  var decodeJson12 = /* @__PURE__ */ decodeJson(decodeJsonCalendar);
  var boundedCT = {
    top: /* @__PURE__ */ genericTop(genericCT_)(genericTopSum22),
    bottom: /* @__PURE__ */ genericBottom(genericCT_)(genericBottomSum2),
    Ord0: function() {
      return ordCT;
    }
  };
  var boundedEnumCT = {
    cardinality: /* @__PURE__ */ genericCardinality(genericCT_)(genericBoundedEnumSum3),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericCT_)(genericBoundedEnumSum3),
    toEnum: /* @__PURE__ */ genericToEnum(genericCT_)(genericBoundedEnumSum3),
    Bounded0: function() {
      return boundedCT;
    },
    Enum1: function() {
      return enumCT;
    }
  };
  var decodeJsonCT = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showCT)(boundedEnumCT)(identity16)
  };
  var decodeJson13 = /* @__PURE__ */ decodeJson(decodeJsonCT);
  var boundedCR = {
    top: /* @__PURE__ */ genericTop(genericCR_)(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopSum5))))),
    bottom: /* @__PURE__ */ genericBottom(genericCR_)(genericBottomSum2),
    Ord0: function() {
      return ordCR;
    }
  };
  var boundedEnumCR = {
    cardinality: /* @__PURE__ */ genericCardinality(genericCR_)(genericBoundedEnumSum7),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericCR_)(genericBoundedEnumSum7),
    toEnum: /* @__PURE__ */ genericToEnum(genericCR_)(genericBoundedEnumSum7),
    Bounded0: function() {
      return boundedCR;
    },
    Enum1: function() {
      return enumCR;
    }
  };
  var decodeJsonCR = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showCR)(boundedEnumCR)(/* @__PURE__ */ tryStripPrefix("CR_"))
  };
  var decodeJson14 = /* @__PURE__ */ decodeJson(decodeJsonCR);
  var boundedCETC = {
    top: /* @__PURE__ */ genericTop(genericCETC_)(genericTopSum1),
    bottom: /* @__PURE__ */ genericBottom(genericCETC_)(genericBottomSum2),
    Ord0: function() {
      return ordCETC;
    }
  };
  var boundedEnumCETC = {
    cardinality: /* @__PURE__ */ genericCardinality(genericCETC_)(genericBoundedEnumSum22),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericCETC_)(genericBoundedEnumSum22),
    toEnum: /* @__PURE__ */ genericToEnum(genericCETC_)(genericBoundedEnumSum22),
    Bounded0: function() {
      return boundedCETC;
    },
    Enum1: function() {
      return enumCETC;
    }
  };
  var decodeJsonCETC = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showCETC)(boundedEnumCETC)(/* @__PURE__ */ tryStripPrefix("CETC_"))
  };
  var decodeJson15 = /* @__PURE__ */ decodeJson(decodeJsonCETC);
  var boundedCEGE = {
    top: /* @__PURE__ */ genericTop(genericCEGE_)(genericTopSum2),
    bottom: /* @__PURE__ */ genericBottom(genericCEGE_)(genericBottomSum2),
    Ord0: function() {
      return ordCEGE;
    }
  };
  var boundedEnumCEGE = {
    cardinality: /* @__PURE__ */ genericCardinality(genericCEGE_)(genericBoundedEnumSum1),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericCEGE_)(genericBoundedEnumSum1),
    toEnum: /* @__PURE__ */ genericToEnum(genericCEGE_)(genericBoundedEnumSum1),
    Bounded0: function() {
      return boundedCEGE;
    },
    Enum1: function() {
      return enumCEGE;
    }
  };
  var decodeJsonCEGE = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showCEGE)(boundedEnumCEGE)(/* @__PURE__ */ tryStripPrefix("CEGE_"))
  };
  var decodeJson16 = /* @__PURE__ */ decodeJson(decodeJsonCEGE);
  var boundedBDC = {
    top: /* @__PURE__ */ genericTop(genericBDC_)(genericTopSum5),
    bottom: /* @__PURE__ */ genericBottom(genericBDC_)(genericBottomSum2),
    Ord0: function() {
      return ordBDC;
    }
  };
  var boundedEnumBDC = {
    cardinality: /* @__PURE__ */ genericCardinality(genericBDC_)(genericBoundedEnumSum6),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericBDC_)(genericBoundedEnumSum6),
    toEnum: /* @__PURE__ */ genericToEnum(genericBDC_)(genericBoundedEnumSum6),
    Bounded0: function() {
      return boundedBDC;
    },
    Enum1: function() {
      return enumBDC;
    }
  };
  var decodeJsonBDC = {
    decodeJson: /* @__PURE__ */ decodeJsonEnumWith(showBDC)(boundedEnumBDC)(/* @__PURE__ */ tryStripPrefix("BDC_"))
  };
  var decodeJson17 = /* @__PURE__ */ decodeJson(decodeJsonBDC);
  var stubFromString = function(v) {
    if (v === "1") {
      return new Just(ShortStub.value);
    }
    ;
    if (v === "0") {
      return new Just(LongStub.value);
    }
    ;
    return Nothing.value;
  };
  var periodToString = /* @__PURE__ */ function() {
    var $2052 = tryStripPrefix("P_");
    var $2053 = show(showPeriod);
    return function($2054) {
      return $2052($2053($2054));
    };
  }();
  var periodFromString = /* @__PURE__ */ decodeEnumWith(showPeriod)(boundedEnumPeriod)(/* @__PURE__ */ tryStripPrefix("P_"));
  var decodeDecimal = /* @__PURE__ */ decodeFromString(function($2056) {
    return fromString3(trimStart($2056));
  });
  var decodeDateTime = function(json3) {
    return bind10(decodeJson3(json3))(function(str) {
      var jsDate = unsafePerformEffect(parse7(str + "Z"));
      return note(new UnexpectedValue(json3))(toDateTime2(jsDate));
    });
  };
  var decodeCycle = function(str) {
    var periods = joinWith("|")(map21(periodToString)(upFromIncluding2(bottom3)));
    var pattern2 = "P([0-9]+)([" + (periods + "])L([0|1])");
    var regex2 = unsafeRegex(pattern2)(mempty4);
    return bind14(match(regex2)(str))(function(m) {
      var v = toArray(m);
      if (v.length === 4 && (v[1] instanceof Just && (v[2] instanceof Just && v[3] instanceof Just))) {
        return apply8(apply8(map111(function(v1) {
          return function(v2) {
            return function(v3) {
              return {
                n: v1,
                p: v2,
                stub: v3,
                includeEndDay: false
              };
            };
          };
        })(fromString(v[1].value0)))(periodFromString(v[2].value0)))(stubFromString(v[3].value0));
      }
      ;
      return Nothing.value;
    });
  };
  var decodeJsonContractTermsDe = {
    decodeJson: function(json3) {
      return map22(ContractTerms)(execRecordBuilderM(json3)(bind22(alt6(askField("contractID"))(askField("contractId")))(function(contractIdValue) {
        return bind22(liftEither(decodeJson3(contractIdValue)))(function(contractId) {
          return discard5(insertProp2($$Proxy.value)(contractId))(function() {
            return discard5(decodeField2($$Proxy.value)(decodeJson13))(function() {
              return discard5(decodeFieldDefault2($$Proxy.value)(decodeJson14)(CR_RPA.value))(function() {
                return discard5(decodeFieldOptional2($$Proxy.value)(decodeJson3))(function() {
                  return discard5(decodeFieldOptional1($$Proxy.value)(decodeDateTime))(function() {
                    return discard5(decodeFieldOptional22($$Proxy.value)(decodeJson1))(function() {
                      return bind22(bind22(askObject)(function(obj) {
                        return liftEither(execRecordBuilderM(id(obj))(discard5(decodeFieldOptionalDefault2($$Proxy.value)(decodeJson12)(CLDR_NC.value))(function() {
                          return discard5(decodeFieldOptionalDefault1($$Proxy.value)(decodeJson10)(EOMC_SD.value))(function() {
                            return decodeFieldOptionalDefault22($$Proxy.value)(decodeJson17)(BDC_NULL.value);
                          });
                        })));
                      }))(function(scheduleConfig) {
                        return discard5(insertProp1($$Proxy.value)(scheduleConfig))(function() {
                          return discard5(decodeField1($$Proxy.value)(decodeDateTime))(function() {
                            return discard5(decodeFieldOptional3($$Proxy.value)(decodeJson3))(function() {
                              return discard5(decodeFieldOptional4($$Proxy.value)(decodeJson4))(function() {
                                return discard5(decodeFieldOptional5($$Proxy.value)(decodeJson15))(function() {
                                  return discard5(decodeFieldOptional6($$Proxy.value)(decodeDecimal))(function() {
                                    return discard5(decodeFieldOptional7($$Proxy.value)(decodeJson16))(function() {
                                      return discard5(decodeFieldOptional8($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                        return discard5(decodeFieldOptional9($$Proxy.value)(decodeDateTime))(function() {
                                          return discard5(decodeFieldOptional10($$Proxy.value)(decodeDecimal))(function() {
                                            return discard5(decodeFieldOptional11($$Proxy.value)(decodeJson9))(function() {
                                              return discard5(decodeFieldOptional12($$Proxy.value)(decodeDecimal))(function() {
                                                return discard5(decodeFieldOptional13($$Proxy.value)(decodeDateTime))(function() {
                                                  return discard5(decodeFieldOptional14($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                    return discard5(decodeFieldOptional15($$Proxy.value)(decodeDecimal))(function() {
                                                      return discard5(decodeFieldOptional16($$Proxy.value)(decodeDateTime))(function() {
                                                        return discard5(decodeFieldOptional17($$Proxy.value)(decodeDateTime))(function() {
                                                          return discard5(decodeFieldOptional18($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                            return discard5(decodeFieldOptional19($$Proxy.value)(decodeJson8))(function() {
                                                              return discard5(decodeFieldOptional20($$Proxy.value)(decodeDecimal))(function() {
                                                                return discard5(decodeFieldOptional21($$Proxy.value)(decodeDecimal))(function() {
                                                                  return discard5(decodeFieldOptional222($$Proxy.value)(decodeDecimal))(function() {
                                                                    return discard5(decodeFieldOptional23($$Proxy.value)(decodeDecimal))(function() {
                                                                      return discard5(decodeFieldOptional24($$Proxy.value)(decodeDateTime))(function() {
                                                                        return discard5(decodeFieldOptional25($$Proxy.value)(decodeDateTime))(function() {
                                                                          return discard5(decodeFieldOptional26($$Proxy.value)(decodeDateTime))(function() {
                                                                            return discard5(decodeFieldOptional27($$Proxy.value)(decodeDecimal))(function() {
                                                                              return discard5(decodeFieldOptional28($$Proxy.value)(decodeDecimal))(function() {
                                                                                return discard5(decodeFieldOptional29($$Proxy.value)(decodeDateTime))(function() {
                                                                                  return discard5(decodeFieldOptional30($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                                                    return discard5(decodeFieldOptional31($$Proxy.value)(decodeDecimal))(function() {
                                                                                      return discard5(decodeFieldOptional32($$Proxy.value)(decodeDateTime))(function() {
                                                                                        return discard5(decodeFieldOptional33($$Proxy.value)(decodeDecimal))(function() {
                                                                                          return discard5(decodeFieldOptional34($$Proxy.value)(decodeDateTime))(function() {
                                                                                            return discard5(decodeFieldOptional35($$Proxy.value)(decodeDecimal))(function() {
                                                                                              return discard5(decodeFieldOptional36($$Proxy.value)(decodeDecimal))(function() {
                                                                                                return discard5(decodeFieldOptional37($$Proxy.value)(decodeJson3))(function() {
                                                                                                  return discard5(decodeFieldOptional38($$Proxy.value)(decodeJson3))(function() {
                                                                                                    return discard5(decodeFieldOptional39($$Proxy.value)(decodeDecimal))(function() {
                                                                                                      return discard5(decodeFieldOptional40($$Proxy.value)(decodeDateTime))(function() {
                                                                                                        return discard5(decodeFieldOptional41($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                                                                          return discard5(decodeFieldOptional42($$Proxy.value)(decodeJson22))(function() {
                                                                                                            return discard5(decodeFieldOptional43($$Proxy.value)(decodeDecimal))(function() {
                                                                                                              return discard5(decodeFieldOptional44($$Proxy.value)(decodeJson3))(function() {
                                                                                                                return discard5(decodeFieldOptional45($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                  return discard5(decodeFieldOptional46($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                                                                                    return discard5(decodeFieldOptional47($$Proxy.value)(decodeDateTime))(function() {
                                                                                                                      return discard5(decodeFieldOptional48($$Proxy.value)(decodeJson7))(function() {
                                                                                                                        return discard5(decodeFieldOptional49($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                          return discard5(decodeFieldOptional50($$Proxy.value)(decodeJson6))(function() {
                                                                                                                            return discard5(decodeFieldOptional51($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                                                                                              return discard5(decodeFieldOptional52($$Proxy.value)(decodeJson11))(function() {
                                                                                                                                return discard5(decodeFieldOptional53($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                  return discard5(decodeFieldOptional54($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                    return discard5(decodeFieldOptional55($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                      return discard5(decodeFieldOptional56($$Proxy.value)(decodeJson32))(function() {
                                                                                                                                        return discard5(decodeFieldOptional57($$Proxy.value)(decodeJson5))(function() {
                                                                                                                                          return discard5(decodeFieldOptional58($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                                                                                                            return discard5(decodeFieldOptional59($$Proxy.value)(decodeDateTime))(function() {
                                                                                                                                              return discard5(decodeFieldOptional60($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                return discard5(decodeFieldOptional61($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                  return discard5(decodeFieldOptional62($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                    return discard5(decodeFieldOptional63($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                      return discard5(decodeFieldOptional64($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                        return discard5(decodeFieldOptional65($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                          return discard5(decodeFieldOptional66($$Proxy.value)(decodeDecimal))(function() {
                                                                                                                                                            return discard5(decodeFieldOptional67($$Proxy.value)(decodeJson3))(function() {
                                                                                                                                                              return discard5(decodeFieldOptional68($$Proxy.value)(decodeFromString(decodeCycle)))(function() {
                                                                                                                                                                return discard5(decodeFieldOptional69($$Proxy.value)(decodeDateTime))(function() {
                                                                                                                                                                  return decodeFieldOptional70($$Proxy.value)(decodeDecimal);
                                                                                                                                                                });
                                                                                                                                                              });
                                                                                                                                                            });
                                                                                                                                                          });
                                                                                                                                                        });
                                                                                                                                                      });
                                                                                                                                                    });
                                                                                                                                                  });
                                                                                                                                                });
                                                                                                                                              });
                                                                                                                                            });
                                                                                                                                          });
                                                                                                                                        });
                                                                                                                                      });
                                                                                                                                    });
                                                                                                                                  });
                                                                                                                                });
                                                                                                                              });
                                                                                                                            });
                                                                                                                          });
                                                                                                                        });
                                                                                                                      });
                                                                                                                    });
                                                                                                                  });
                                                                                                                });
                                                                                                              });
                                                                                                            });
                                                                                                          });
                                                                                                        });
                                                                                                      });
                                                                                                    });
                                                                                                  });
                                                                                                });
                                                                                              });
                                                                                            });
                                                                                          });
                                                                                        });
                                                                                      });
                                                                                    });
                                                                                  });
                                                                                });
                                                                              });
                                                                            });
                                                                          });
                                                                        });
                                                                      });
                                                                    });
                                                                  });
                                                                });
                                                              });
                                                            });
                                                          });
                                                        });
                                                      });
                                                    });
                                                  });
                                                });
                                              });
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      })));
    }
  };

  // output/Actus.Domain.BusinessEvents/index.js
  var genericShowConstructor3 = /* @__PURE__ */ genericShowConstructor(genericShowArgsNoArguments);
  var genericEnumConstructor3 = /* @__PURE__ */ genericEnumConstructor(genericEnumNoArguments);
  var genericTopConstructor3 = /* @__PURE__ */ genericTopConstructor(genericTopNoArguments);
  var genericEnumSum8 = /* @__PURE__ */ genericEnumSum(genericEnumConstructor3)(genericTopConstructor3);
  var genericBottomConstructor3 = /* @__PURE__ */ genericBottomConstructor(genericBottomNoArguments);
  var genericBottomSum3 = /* @__PURE__ */ genericBottomSum(genericBottomConstructor3);
  var genericEnumSum12 = /* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(/* @__PURE__ */ genericEnumSum8(genericEnumConstructor3)(genericBottomConstructor3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3))(genericBottomSum3);
  var genericBoundedEnumConstructor3 = /* @__PURE__ */ genericBoundedEnumConstructor(genericBoundedEnumNoArguments);
  var genericBoundedEnumSum8 = /* @__PURE__ */ genericBoundedEnumSum(genericBoundedEnumConstructor3);
  var genericBoundedEnumSum12 = /* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(/* @__PURE__ */ genericBoundedEnumSum8(genericBoundedEnumConstructor3))))))))))))))))))))))));
  var IED = /* @__PURE__ */ function() {
    function IED2() {
    }
    ;
    IED2.value = new IED2();
    return IED2;
  }();
  var FP = /* @__PURE__ */ function() {
    function FP2() {
    }
    ;
    FP2.value = new FP2();
    return FP2;
  }();
  var PR = /* @__PURE__ */ function() {
    function PR2() {
    }
    ;
    PR2.value = new PR2();
    return PR2;
  }();
  var PD = /* @__PURE__ */ function() {
    function PD2() {
    }
    ;
    PD2.value = new PD2();
    return PD2;
  }();
  var PY = /* @__PURE__ */ function() {
    function PY2() {
    }
    ;
    PY2.value = new PY2();
    return PY2;
  }();
  var PP = /* @__PURE__ */ function() {
    function PP2() {
    }
    ;
    PP2.value = new PP2();
    return PP2;
  }();
  var IP = /* @__PURE__ */ function() {
    function IP2() {
    }
    ;
    IP2.value = new IP2();
    return IP2;
  }();
  var IPFX = /* @__PURE__ */ function() {
    function IPFX2() {
    }
    ;
    IPFX2.value = new IPFX2();
    return IPFX2;
  }();
  var IPFL = /* @__PURE__ */ function() {
    function IPFL2() {
    }
    ;
    IPFL2.value = new IPFL2();
    return IPFL2;
  }();
  var IPCI = /* @__PURE__ */ function() {
    function IPCI2() {
    }
    ;
    IPCI2.value = new IPCI2();
    return IPCI2;
  }();
  var CE = /* @__PURE__ */ function() {
    function CE2() {
    }
    ;
    CE2.value = new CE2();
    return CE2;
  }();
  var RRF = /* @__PURE__ */ function() {
    function RRF2() {
    }
    ;
    RRF2.value = new RRF2();
    return RRF2;
  }();
  var RR = /* @__PURE__ */ function() {
    function RR2() {
    }
    ;
    RR2.value = new RR2();
    return RR2;
  }();
  var PRF = /* @__PURE__ */ function() {
    function PRF2() {
    }
    ;
    PRF2.value = new PRF2();
    return PRF2;
  }();
  var DV = /* @__PURE__ */ function() {
    function DV2() {
    }
    ;
    DV2.value = new DV2();
    return DV2;
  }();
  var PRD = /* @__PURE__ */ function() {
    function PRD2() {
    }
    ;
    PRD2.value = new PRD2();
    return PRD2;
  }();
  var MR = /* @__PURE__ */ function() {
    function MR2() {
    }
    ;
    MR2.value = new MR2();
    return MR2;
  }();
  var TD = /* @__PURE__ */ function() {
    function TD2() {
    }
    ;
    TD2.value = new TD2();
    return TD2;
  }();
  var SC = /* @__PURE__ */ function() {
    function SC2() {
    }
    ;
    SC2.value = new SC2();
    return SC2;
  }();
  var IPCB = /* @__PURE__ */ function() {
    function IPCB2() {
    }
    ;
    IPCB2.value = new IPCB2();
    return IPCB2;
  }();
  var MD = /* @__PURE__ */ function() {
    function MD2() {
    }
    ;
    MD2.value = new MD2();
    return MD2;
  }();
  var XD = /* @__PURE__ */ function() {
    function XD2() {
    }
    ;
    XD2.value = new XD2();
    return XD2;
  }();
  var STD = /* @__PURE__ */ function() {
    function STD2() {
    }
    ;
    STD2.value = new STD2();
    return STD2;
  }();
  var PI2 = /* @__PURE__ */ function() {
    function PI3() {
    }
    ;
    PI3.value = new PI3();
    return PI3;
  }();
  var AD = /* @__PURE__ */ function() {
    function AD2() {
    }
    ;
    AD2.value = new AD2();
    return AD2;
  }();
  var genericEventType_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return IED.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return FP.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return PR.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return PD.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return PY.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return PP.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return IP.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return IPFX.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))) {
        return IPFL.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))) {
        return IPCI.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))) {
        return CE.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))) {
        return RRF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))))) {
        return RR.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))))) {
        return PRF.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))))))) {
        return DV.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))))))) {
        return PRD.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))))))))) {
        return MR.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))))))))) {
        return TD.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))))))))))) {
        return SC.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))))))))))) {
        return IPCB.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))))))))))))) {
        return MD.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))))))))))))) {
        return XD.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))))))))))))))) {
        return STD.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))))))))))))))))) {
        return PI2.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr))))))))))))))))))))))) {
        return AD.value;
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.BusinessEvents (line 42, column 1 - line 42, column 36): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof IED) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof FP) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x instanceof PR) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x instanceof PD) {
        return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
      }
      ;
      if (x instanceof PY) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
      }
      ;
      if (x instanceof PP) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))));
      }
      ;
      if (x instanceof IP) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))));
      }
      ;
      if (x instanceof IPFX) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))));
      }
      ;
      if (x instanceof IPFL) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))));
      }
      ;
      if (x instanceof IPCI) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))));
      }
      ;
      if (x instanceof CE) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))));
      }
      ;
      if (x instanceof RRF) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))));
      }
      ;
      if (x instanceof RR) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))))));
      }
      ;
      if (x instanceof PRF) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))))));
      }
      ;
      if (x instanceof DV) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))))))));
      }
      ;
      if (x instanceof PRD) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))))))));
      }
      ;
      if (x instanceof MR) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))))))))));
      }
      ;
      if (x instanceof TD) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))))))))));
      }
      ;
      if (x instanceof SC) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))))))))))));
      }
      ;
      if (x instanceof IPCB) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))))))))))));
      }
      ;
      if (x instanceof MD) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))))))))))))));
      }
      ;
      if (x instanceof XD) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))))))))))))));
      }
      ;
      if (x instanceof STD) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))))))))))))))))));
      }
      ;
      if (x instanceof PI2) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))))))))))))))))));
      }
      ;
      if (x instanceof AD) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value))))))))))))))))))))))));
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain.BusinessEvents (line 42, column 1 - line 42, column 36): " + [x.constructor.name]);
    }
  };
  var showEventType = {
    show: /* @__PURE__ */ genericShow(genericEventType_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "IED";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "FP";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PR";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PD";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PY";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PP";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "IP";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "IPFX";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "IPFL";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "IPCI";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "CE";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "RRF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "RR";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PRF";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "DV";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PRD";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "MR";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "TD";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "SC";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "IPCB";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "MD";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "XD";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "STD";
      }
    }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "PI";
      }
    }))(/* @__PURE__ */ genericShowConstructor3({
      reflectSymbol: function() {
        return "AD";
      }
    }))))))))))))))))))))))))))
  };
  var eqEventType = {
    eq: function(x) {
      return function(y) {
        if (x instanceof IED && y instanceof IED) {
          return true;
        }
        ;
        if (x instanceof FP && y instanceof FP) {
          return true;
        }
        ;
        if (x instanceof PR && y instanceof PR) {
          return true;
        }
        ;
        if (x instanceof PD && y instanceof PD) {
          return true;
        }
        ;
        if (x instanceof PY && y instanceof PY) {
          return true;
        }
        ;
        if (x instanceof PP && y instanceof PP) {
          return true;
        }
        ;
        if (x instanceof IP && y instanceof IP) {
          return true;
        }
        ;
        if (x instanceof IPFX && y instanceof IPFX) {
          return true;
        }
        ;
        if (x instanceof IPFL && y instanceof IPFL) {
          return true;
        }
        ;
        if (x instanceof IPCI && y instanceof IPCI) {
          return true;
        }
        ;
        if (x instanceof CE && y instanceof CE) {
          return true;
        }
        ;
        if (x instanceof RRF && y instanceof RRF) {
          return true;
        }
        ;
        if (x instanceof RR && y instanceof RR) {
          return true;
        }
        ;
        if (x instanceof PRF && y instanceof PRF) {
          return true;
        }
        ;
        if (x instanceof DV && y instanceof DV) {
          return true;
        }
        ;
        if (x instanceof PRD && y instanceof PRD) {
          return true;
        }
        ;
        if (x instanceof MR && y instanceof MR) {
          return true;
        }
        ;
        if (x instanceof TD && y instanceof TD) {
          return true;
        }
        ;
        if (x instanceof SC && y instanceof SC) {
          return true;
        }
        ;
        if (x instanceof IPCB && y instanceof IPCB) {
          return true;
        }
        ;
        if (x instanceof MD && y instanceof MD) {
          return true;
        }
        ;
        if (x instanceof XD && y instanceof XD) {
          return true;
        }
        ;
        if (x instanceof STD && y instanceof STD) {
          return true;
        }
        ;
        if (x instanceof PI2 && y instanceof PI2) {
          return true;
        }
        ;
        if (x instanceof AD && y instanceof AD) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordEventType = {
    compare: function(x) {
      return function(y) {
        if (x instanceof IED && y instanceof IED) {
          return EQ.value;
        }
        ;
        if (x instanceof IED) {
          return LT.value;
        }
        ;
        if (y instanceof IED) {
          return GT.value;
        }
        ;
        if (x instanceof FP && y instanceof FP) {
          return EQ.value;
        }
        ;
        if (x instanceof FP) {
          return LT.value;
        }
        ;
        if (y instanceof FP) {
          return GT.value;
        }
        ;
        if (x instanceof PR && y instanceof PR) {
          return EQ.value;
        }
        ;
        if (x instanceof PR) {
          return LT.value;
        }
        ;
        if (y instanceof PR) {
          return GT.value;
        }
        ;
        if (x instanceof PD && y instanceof PD) {
          return EQ.value;
        }
        ;
        if (x instanceof PD) {
          return LT.value;
        }
        ;
        if (y instanceof PD) {
          return GT.value;
        }
        ;
        if (x instanceof PY && y instanceof PY) {
          return EQ.value;
        }
        ;
        if (x instanceof PY) {
          return LT.value;
        }
        ;
        if (y instanceof PY) {
          return GT.value;
        }
        ;
        if (x instanceof PP && y instanceof PP) {
          return EQ.value;
        }
        ;
        if (x instanceof PP) {
          return LT.value;
        }
        ;
        if (y instanceof PP) {
          return GT.value;
        }
        ;
        if (x instanceof IP && y instanceof IP) {
          return EQ.value;
        }
        ;
        if (x instanceof IP) {
          return LT.value;
        }
        ;
        if (y instanceof IP) {
          return GT.value;
        }
        ;
        if (x instanceof IPFX && y instanceof IPFX) {
          return EQ.value;
        }
        ;
        if (x instanceof IPFX) {
          return LT.value;
        }
        ;
        if (y instanceof IPFX) {
          return GT.value;
        }
        ;
        if (x instanceof IPFL && y instanceof IPFL) {
          return EQ.value;
        }
        ;
        if (x instanceof IPFL) {
          return LT.value;
        }
        ;
        if (y instanceof IPFL) {
          return GT.value;
        }
        ;
        if (x instanceof IPCI && y instanceof IPCI) {
          return EQ.value;
        }
        ;
        if (x instanceof IPCI) {
          return LT.value;
        }
        ;
        if (y instanceof IPCI) {
          return GT.value;
        }
        ;
        if (x instanceof CE && y instanceof CE) {
          return EQ.value;
        }
        ;
        if (x instanceof CE) {
          return LT.value;
        }
        ;
        if (y instanceof CE) {
          return GT.value;
        }
        ;
        if (x instanceof RRF && y instanceof RRF) {
          return EQ.value;
        }
        ;
        if (x instanceof RRF) {
          return LT.value;
        }
        ;
        if (y instanceof RRF) {
          return GT.value;
        }
        ;
        if (x instanceof RR && y instanceof RR) {
          return EQ.value;
        }
        ;
        if (x instanceof RR) {
          return LT.value;
        }
        ;
        if (y instanceof RR) {
          return GT.value;
        }
        ;
        if (x instanceof PRF && y instanceof PRF) {
          return EQ.value;
        }
        ;
        if (x instanceof PRF) {
          return LT.value;
        }
        ;
        if (y instanceof PRF) {
          return GT.value;
        }
        ;
        if (x instanceof DV && y instanceof DV) {
          return EQ.value;
        }
        ;
        if (x instanceof DV) {
          return LT.value;
        }
        ;
        if (y instanceof DV) {
          return GT.value;
        }
        ;
        if (x instanceof PRD && y instanceof PRD) {
          return EQ.value;
        }
        ;
        if (x instanceof PRD) {
          return LT.value;
        }
        ;
        if (y instanceof PRD) {
          return GT.value;
        }
        ;
        if (x instanceof MR && y instanceof MR) {
          return EQ.value;
        }
        ;
        if (x instanceof MR) {
          return LT.value;
        }
        ;
        if (y instanceof MR) {
          return GT.value;
        }
        ;
        if (x instanceof TD && y instanceof TD) {
          return EQ.value;
        }
        ;
        if (x instanceof TD) {
          return LT.value;
        }
        ;
        if (y instanceof TD) {
          return GT.value;
        }
        ;
        if (x instanceof SC && y instanceof SC) {
          return EQ.value;
        }
        ;
        if (x instanceof SC) {
          return LT.value;
        }
        ;
        if (y instanceof SC) {
          return GT.value;
        }
        ;
        if (x instanceof IPCB && y instanceof IPCB) {
          return EQ.value;
        }
        ;
        if (x instanceof IPCB) {
          return LT.value;
        }
        ;
        if (y instanceof IPCB) {
          return GT.value;
        }
        ;
        if (x instanceof MD && y instanceof MD) {
          return EQ.value;
        }
        ;
        if (x instanceof MD) {
          return LT.value;
        }
        ;
        if (y instanceof MD) {
          return GT.value;
        }
        ;
        if (x instanceof XD && y instanceof XD) {
          return EQ.value;
        }
        ;
        if (x instanceof XD) {
          return LT.value;
        }
        ;
        if (y instanceof XD) {
          return GT.value;
        }
        ;
        if (x instanceof STD && y instanceof STD) {
          return EQ.value;
        }
        ;
        if (x instanceof STD) {
          return LT.value;
        }
        ;
        if (y instanceof STD) {
          return GT.value;
        }
        ;
        if (x instanceof PI2 && y instanceof PI2) {
          return EQ.value;
        }
        ;
        if (x instanceof PI2) {
          return LT.value;
        }
        ;
        if (y instanceof PI2) {
          return GT.value;
        }
        ;
        if (x instanceof AD && y instanceof AD) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Actus.Domain.BusinessEvents (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqEventType;
    }
  };
  var enumEventType = {
    succ: /* @__PURE__ */ genericSucc(genericEventType_)(genericEnumSum12),
    pred: /* @__PURE__ */ genericPred(genericEventType_)(genericEnumSum12),
    Ord0: function() {
      return ordEventType;
    }
  };
  var boundedEventType = {
    top: /* @__PURE__ */ genericTop(genericEventType_)(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopConstructor3))))))))))))))))))))))))),
    bottom: /* @__PURE__ */ genericBottom(genericEventType_)(genericBottomSum3),
    Ord0: function() {
      return ordEventType;
    }
  };
  var boundedEnumEventType = {
    cardinality: /* @__PURE__ */ genericCardinality(genericEventType_)(genericBoundedEnumSum12),
    toEnum: /* @__PURE__ */ genericToEnum(genericEventType_)(genericBoundedEnumSum12),
    fromEnum: /* @__PURE__ */ genericFromEnum(genericEventType_)(genericBoundedEnumSum12),
    Bounded0: function() {
      return boundedEventType;
    },
    Enum1: function() {
      return enumEventType;
    }
  };

  // output/Data.Lens.Internal.Forget/index.js
  var profunctorForget = {
    dimap: function(f) {
      return function(v) {
        return function(v1) {
          return function($36) {
            return v1(f($36));
          };
        };
      };
    }
  };
  var strongForget = {
    first: function(v) {
      return function($37) {
        return v(fst($37));
      };
    },
    second: function(v) {
      return function($38) {
        return v(snd($38));
      };
    },
    Profunctor0: function() {
      return profunctorForget;
    }
  };

  // output/Data.Lens.Lens/index.js
  var lens$prime = function(to3) {
    return function(dictStrong) {
      var dimap2 = dimap(dictStrong.Profunctor0());
      var first2 = first(dictStrong);
      return function(pab) {
        return dimap2(to3)(function(v) {
          return v.value1(v.value0);
        })(first2(pab));
      };
    };
  };
  var lens = function(get3) {
    return function(set3) {
      return function(dictStrong) {
        return lens$prime(function(s2) {
          return new Tuple(get3(s2), function(b2) {
            return set3(s2)(b2);
          });
        })(dictStrong);
      };
    };
  };

  // output/Data.Lens.Record/index.js
  var prop = function(dictIsSymbol) {
    var get3 = get(dictIsSymbol)();
    var set3 = set(dictIsSymbol)()();
    return function() {
      return function() {
        return function(l) {
          return function(dictStrong) {
            return lens(get3(l))(flip(set3(l)))(dictStrong);
          };
        };
      };
    };
  };

  // output/Actus.Domain.ContractState/index.js
  var sdIsSymbol = {
    reflectSymbol: function() {
      return "sd";
    }
  };
  var nscIsSymbol = {
    reflectSymbol: function() {
      return "nsc";
    }
  };
  var ntIsSymbol = {
    reflectSymbol: function() {
      return "nt";
    }
  };
  var ipnrIsSymbol = {
    reflectSymbol: function() {
      return "ipnr";
    }
  };
  var prnxtIsSymbol = {
    reflectSymbol: function() {
      return "prnxt";
    }
  };
  var iscIsSymbol = {
    reflectSymbol: function() {
      return "isc";
    }
  };
  var ipcbIsSymbol = {
    reflectSymbol: function() {
      return "ipcb";
    }
  };
  var ipacIsSymbol = {
    reflectSymbol: function() {
      return "ipac";
    }
  };
  var feacIsSymbol = {
    reflectSymbol: function() {
      return "feac";
    }
  };
  var statusDate = /* @__PURE__ */ function() {
    return prop(sdIsSymbol)()()($$Proxy.value);
  }();
  var notionalScalingMultiplier = /* @__PURE__ */ function() {
    return prop(nscIsSymbol)()()($$Proxy.value);
  }();
  var notionalPrincipal = /* @__PURE__ */ function() {
    return prop(ntIsSymbol)()()($$Proxy.value);
  }();
  var nominalInterest = /* @__PURE__ */ function() {
    return prop(ipnrIsSymbol)()()($$Proxy.value);
  }();
  var nextPrincipalRedemptionPayment = /* @__PURE__ */ function() {
    return prop(prnxtIsSymbol)()()($$Proxy.value);
  }();
  var interestScalingMultiplier = /* @__PURE__ */ function() {
    return prop(iscIsSymbol)()()($$Proxy.value);
  }();
  var interestCalculationBase = /* @__PURE__ */ function() {
    return prop(ipcbIsSymbol)()()($$Proxy.value);
  }();
  var accruedInterest = /* @__PURE__ */ function() {
    return prop(ipacIsSymbol)()()($$Proxy.value);
  }();
  var accruedFees = /* @__PURE__ */ function() {
    return prop(feacIsSymbol)()()($$Proxy.value);
  }();

  // output/Actus.Domain.Schedule/index.js
  var mkShiftedDay = function(d) {
    return {
      paymentDay: d,
      calculationDay: d
    };
  };

  // output/Data.BigInt.Argonaut/foreign.js
  var import_big_integer = __toESM(require_BigInteger(), 1);
  var import_json_bigint = __toESM(require_json_bigint(), 1);

  // output/Data.BigInt/foreign.js
  var import_big_integer2 = __toESM(require_BigInteger(), 1);
  function fromBaseImpl(just) {
    return function(nothing) {
      return function(b2) {
        return function(s2) {
          try {
            var x = (0, import_big_integer2.default)(s2, b2);
            return just(x);
          } catch (err) {
            return nothing;
          }
        };
      };
    };
  }
  function fromInt(n) {
    return (0, import_big_integer2.default)(n);
  }
  function toBase(base2) {
    return function(x) {
      return x.toString(base2);
    };
  }
  function toNumber3(x) {
    return x.toJSNumber();
  }
  function biAdd(x) {
    return function(y) {
      return x.add(y);
    };
  }
  function biMul(x) {
    return function(y) {
      return x.multiply(y);
    };
  }
  function biSub(x) {
    return function(y) {
      return x.minus(y);
    };
  }
  function biMod(x) {
    return function(y) {
      return x.mod(y);
    };
  }
  function biDiv(x) {
    return function(y) {
      return x.divide(y);
    };
  }
  function biEquals(x) {
    return function(y) {
      return x.equals(y);
    };
  }
  function biCompare(x) {
    return function(y) {
      return x.compare(y);
    };
  }
  function abs5(x) {
    return x.abs();
  }

  // output/Data.BigInt/index.js
  var toString3 = /* @__PURE__ */ toBase(10);
  var showBigInt = {
    show: function(x) {
      return '(fromString "' + (toString3(x) + '")');
    }
  };
  var semiringBigInt = {
    add: biAdd,
    zero: /* @__PURE__ */ fromInt(0),
    mul: biMul,
    one: /* @__PURE__ */ fromInt(1)
  };
  var add3 = /* @__PURE__ */ add(semiringBigInt);
  var ringBigInt = {
    sub: biSub,
    Semiring0: function() {
      return semiringBigInt;
    }
  };
  var sub4 = /* @__PURE__ */ sub(ringBigInt);
  var rem2 = biMod;
  var quot2 = biDiv;
  var fromBase = /* @__PURE__ */ function() {
    return fromBaseImpl(Just.create)(Nothing.value);
  }();
  var fromString4 = /* @__PURE__ */ fromBase(10);
  var eqBigInt = {
    eq: biEquals
  };
  var ordBigInt = {
    compare: function(x) {
      return function(y) {
        var v = biCompare(x)(y);
        if (v === 1) {
          return GT.value;
        }
        ;
        if (v === 0) {
          return EQ.value;
        }
        ;
        return LT.value;
      };
    },
    Eq0: function() {
      return eqBigInt;
    }
  };
  var commutativeRingBigInt = {
    Ring0: function() {
      return ringBigInt;
    }
  };
  var euclideanRingBigInt = {
    div: function(x) {
      return function(y) {
        return biDiv(sub4(x)(mod(euclideanRingBigInt)(x)(y)))(y);
      };
    },
    mod: function(x) {
      return function(y) {
        var yy = abs5(y);
        return biMod(add3(biMod(x)(yy))(yy))(yy);
      };
    },
    degree: function($13) {
      return floor2(toNumber3(abs5($13)));
    },
    CommutativeRing0: function() {
      return commutativeRingBigInt;
    }
  };

  // output/Data.BigInt.Argonaut/index.js
  var over3 = /* @__PURE__ */ over()();
  var unwrap4 = /* @__PURE__ */ unwrap();
  var map23 = /* @__PURE__ */ map(functorMaybe);
  var eq7 = /* @__PURE__ */ eq(eqBigInt);
  var compare5 = /* @__PURE__ */ compare(ordBigInt);
  var BigInt2 = function(x) {
    return x;
  };
  var showBigInt2 = showBigInt;
  var semiringBigInt2 = semiringBigInt;
  var ringBigInt2 = ringBigInt;
  var quot3 = function(a2) {
    return function(b2) {
      return quot2(unwrap4(a2))(unwrap4(b2));
    };
  };
  var rem3 = function(a2) {
    return function(b2) {
      return rem2(unwrap4(a2))(unwrap4(b2));
    };
  };
  var toString4 = function($35) {
    return toString3(unwrap4($35));
  };
  var fromString5 = /* @__PURE__ */ function() {
    var $36 = map23(BigInt2);
    return function($37) {
      return $36(fromString4($37));
    };
  }();
  var fromInt2 = function($40) {
    return BigInt2(fromInt($40));
  };
  var euclideanRingBigInt2 = euclideanRingBigInt;
  var eqBigInt2 = {
    eq: function(x) {
      return function(y) {
        return eq7(x)(y);
      };
    }
  };
  var ordBigInt2 = {
    compare: function(x) {
      return function(y) {
        return compare5(x)(y);
      };
    },
    Eq0: function() {
      return eqBigInt2;
    }
  };
  var abs6 = /* @__PURE__ */ over3(BigInt2)(abs5);

  // output/Actus.Domain/index.js
  var negate1 = /* @__PURE__ */ negate(ringBigInt2);
  var add4 = /* @__PURE__ */ add(semiringBigInt2);
  var sub5 = /* @__PURE__ */ sub(ringBigInt2);
  var mul3 = /* @__PURE__ */ mul(semiringBigInt2);
  var greaterThanOrEq2 = /* @__PURE__ */ greaterThanOrEq(ordBigInt2);
  var greaterThan3 = /* @__PURE__ */ greaterThan(ordBigInt2);
  var lessThan2 = /* @__PURE__ */ lessThan(ordBigInt2);
  var lessThanOrEq2 = /* @__PURE__ */ lessThanOrEq(ordBigInt2);
  var eq8 = /* @__PURE__ */ eq(eqBigInt2);
  var signum2 = /* @__PURE__ */ signum(ordBigInt2)(ringBigInt2);
  var mod5 = /* @__PURE__ */ mod(euclideanRingBigInt2);
  var RiskFactors = /* @__PURE__ */ function() {
    function RiskFactors2(value0) {
      this.value0 = value0;
    }
    ;
    RiskFactors2.create = function(value0) {
      return new RiskFactors2(value0);
    };
    return RiskFactors2;
  }();
  var AndObs$prime = /* @__PURE__ */ function() {
    function AndObs$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AndObs$prime2.create = function(value0) {
      return function(value1) {
        return new AndObs$prime2(value0, value1);
      };
    };
    return AndObs$prime2;
  }();
  var OrObs$prime = /* @__PURE__ */ function() {
    function OrObs$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    OrObs$prime2.create = function(value0) {
      return function(value1) {
        return new OrObs$prime2(value0, value1);
      };
    };
    return OrObs$prime2;
  }();
  var NotObs$prime = /* @__PURE__ */ function() {
    function NotObs$prime2(value0) {
      this.value0 = value0;
    }
    ;
    NotObs$prime2.create = function(value0) {
      return new NotObs$prime2(value0);
    };
    return NotObs$prime2;
  }();
  var ValueGE$prime = /* @__PURE__ */ function() {
    function ValueGE$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueGE$prime2.create = function(value0) {
      return function(value1) {
        return new ValueGE$prime2(value0, value1);
      };
    };
    return ValueGE$prime2;
  }();
  var ValueGT$prime = /* @__PURE__ */ function() {
    function ValueGT$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueGT$prime2.create = function(value0) {
      return function(value1) {
        return new ValueGT$prime2(value0, value1);
      };
    };
    return ValueGT$prime2;
  }();
  var ValueLT$prime = /* @__PURE__ */ function() {
    function ValueLT$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueLT$prime2.create = function(value0) {
      return function(value1) {
        return new ValueLT$prime2(value0, value1);
      };
    };
    return ValueLT$prime2;
  }();
  var ValueLE$prime = /* @__PURE__ */ function() {
    function ValueLE$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueLE$prime2.create = function(value0) {
      return function(value1) {
        return new ValueLE$prime2(value0, value1);
      };
    };
    return ValueLE$prime2;
  }();
  var ValueEQ$prime = /* @__PURE__ */ function() {
    function ValueEQ$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueEQ$prime2.create = function(value0) {
      return function(value1) {
        return new ValueEQ$prime2(value0, value1);
      };
    };
    return ValueEQ$prime2;
  }();
  var TrueObs$prime = /* @__PURE__ */ function() {
    function TrueObs$prime2() {
    }
    ;
    TrueObs$prime2.value = new TrueObs$prime2();
    return TrueObs$prime2;
  }();
  var FalseObs$prime = /* @__PURE__ */ function() {
    function FalseObs$prime2() {
    }
    ;
    FalseObs$prime2.value = new FalseObs$prime2();
    return FalseObs$prime2;
  }();
  var Constant$prime = /* @__PURE__ */ function() {
    function Constant$prime2(value0) {
      this.value0 = value0;
    }
    ;
    Constant$prime2.create = function(value0) {
      return new Constant$prime2(value0);
    };
    return Constant$prime2;
  }();
  var NegValue$prime = /* @__PURE__ */ function() {
    function NegValue$prime2(value0) {
      this.value0 = value0;
    }
    ;
    NegValue$prime2.create = function(value0) {
      return new NegValue$prime2(value0);
    };
    return NegValue$prime2;
  }();
  var AddValue$prime = /* @__PURE__ */ function() {
    function AddValue$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AddValue$prime2.create = function(value0) {
      return function(value1) {
        return new AddValue$prime2(value0, value1);
      };
    };
    return AddValue$prime2;
  }();
  var SubValue$prime = /* @__PURE__ */ function() {
    function SubValue$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    SubValue$prime2.create = function(value0) {
      return function(value1) {
        return new SubValue$prime2(value0, value1);
      };
    };
    return SubValue$prime2;
  }();
  var MulValue$prime = /* @__PURE__ */ function() {
    function MulValue$prime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    MulValue$prime2.create = function(value0) {
      return function(value1) {
        return new MulValue$prime2(value0, value1);
      };
    };
    return MulValue$prime2;
  }();
  var Cond$prime = /* @__PURE__ */ function() {
    function Cond$prime2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Cond$prime2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Cond$prime2(value0, value1, value22);
        };
      };
    };
    return Cond$prime2;
  }();
  var CashFlow = /* @__PURE__ */ function() {
    function CashFlow2(value0) {
      this.value0 = value0;
    }
    ;
    CashFlow2.create = function(value0) {
      return new CashFlow2(value0);
    };
    return CashFlow2;
  }();
  var actusOpsValue$prime = {
    "_min": function(x) {
      return function(y) {
        return new Cond$prime(new ValueLT$prime(x, y), x, y);
      };
    },
    "_max": function(x) {
      return function(y) {
        return new Cond$prime(new ValueGT$prime(x, y), x, y);
      };
    },
    "_abs": function(a2) {
      var _max1 = function(x) {
        return function(y) {
          return new Cond$prime(new ValueGT$prime(x, y), x, y);
        };
      };
      return _max1(a2)(new NegValue$prime(a2));
    }
  };
  var actusFracValue$prime = {
    "_ceiling": function(v) {
      return 0;
    },
    ActusOps0: function() {
      return actusOpsValue$prime;
    }
  };
  var sign3 = function(dictRing) {
    var one2 = one(dictRing.Semiring0());
    var negate22 = negate(dictRing);
    return function(v) {
      if (v instanceof CR_RPA) {
        return one2;
      }
      ;
      if (v instanceof CR_RPL) {
        return negate22(one2);
      }
      ;
      if (v instanceof CR_CLO) {
        return one2;
      }
      ;
      if (v instanceof CR_CNO) {
        return one2;
      }
      ;
      if (v instanceof CR_COL) {
        return one2;
      }
      ;
      if (v instanceof CR_LG) {
        return one2;
      }
      ;
      if (v instanceof CR_ST) {
        return negate22(one2);
      }
      ;
      if (v instanceof CR_BUY) {
        return one2;
      }
      ;
      if (v instanceof CR_SEL) {
        return negate22(one2);
      }
      ;
      if (v instanceof CR_RFL) {
        return one2;
      }
      ;
      if (v instanceof CR_PFL) {
        return negate22(one2);
      }
      ;
      if (v instanceof CR_RF) {
        return one2;
      }
      ;
      if (v instanceof CR_PF) {
        return negate22(one2);
      }
      ;
      throw new Error("Failed pattern match at Actus.Domain (line 199, column 1 - line 199, column 36): " + [v.constructor.name]);
    };
  };
  var marloweFixedPoint = 1e6;
  var evalVal = function(v) {
    if (v instanceof Constant$prime) {
      return v.value0;
    }
    ;
    if (v instanceof NegValue$prime) {
      return negate1(evalVal(v.value0));
    }
    ;
    if (v instanceof AddValue$prime) {
      return add4(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof SubValue$prime) {
      return sub5(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof MulValue$prime) {
      return mul3(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof Cond$prime) {
      if (evalObs(v.value0)) {
        return evalVal(v.value1);
      }
      ;
      if (otherwise) {
        return evalVal(v.value2);
      }
      ;
    }
    ;
    throw new Error("Failed pattern match at Actus.Domain (line 153, column 1 - line 153, column 28): " + [v.constructor.name]);
  };
  var evalObs = function(v) {
    if (v instanceof AndObs$prime) {
      return evalObs(v.value0) && evalObs(v.value1);
    }
    ;
    if (v instanceof OrObs$prime) {
      return evalObs(v.value0) || evalObs(v.value1);
    }
    ;
    if (v instanceof NotObs$prime) {
      return !evalObs(v.value0);
    }
    ;
    if (v instanceof ValueGE$prime) {
      return greaterThanOrEq2(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof ValueGT$prime) {
      return greaterThan3(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof ValueLT$prime) {
      return lessThan2(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof ValueLE$prime) {
      return lessThanOrEq2(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof ValueEQ$prime) {
      return eq8(evalVal(v.value0))(evalVal(v.value1));
    }
    ;
    if (v instanceof TrueObs$prime) {
      return true;
    }
    ;
    if (v instanceof FalseObs$prime) {
      return false;
    }
    ;
    throw new Error("Failed pattern match at Actus.Domain (line 163, column 1 - line 163, column 35): " + [v.constructor.name]);
  };
  var division = function(lhs) {
    return function(rhs) {
      var division$prime = function(v) {
        return function(v1) {
          if (eq8(v)(fromInt2(0))) {
            return fromInt2(0);
          }
          ;
          if (eq8(v1)(fromInt2(0))) {
            return fromInt2(0);
          }
          ;
          var r = rem3(v)(v1);
          var q2 = quot3(v)(v1);
          var ar = mul3(abs6(r))(fromInt2(2));
          var ad = abs6(v1);
          var $316 = lessThan2(ar)(ad);
          if ($316) {
            return q2;
          }
          ;
          var $317 = greaterThan3(ar)(ad);
          if ($317) {
            return add4(q2)(mul3(signum2(v))(signum2(v1)));
          }
          ;
          var qIsEven = eq8(rem3(q2)(fromInt2(2)))(fromInt2(0));
          if (qIsEven) {
            return q2;
          }
          ;
          return add4(q2)(mul3(signum2(v))(signum2(v1)));
        };
      };
      var n = evalVal(lhs);
      var d = evalVal(rhs);
      return new Constant$prime(division$prime(n)(d));
    };
  };
  var semiringValue$prime = /* @__PURE__ */ function() {
    return {
      add: function(x) {
        return function(y) {
          return new AddValue$prime(x, y);
        };
      },
      mul: function(x) {
        return function(y) {
          return division(new MulValue$prime(x, y))(new Constant$prime(fromInt2(marloweFixedPoint)));
        };
      },
      one: new Constant$prime(fromInt2(marloweFixedPoint)),
      zero: new Constant$prime(fromInt2(0))
    };
  }();
  var ringValue$prime = {
    sub: function(x) {
      return function(y) {
        return new SubValue$prime(x, y);
      };
    },
    Semiring0: function() {
      return semiringValue$prime;
    }
  };
  var commutativeRingValue$prime = {
    Ring0: function() {
      return ringValue$prime;
    }
  };
  var euclideanRingValue$prime = {
    degree: function(v) {
      return 1;
    },
    div: function(x) {
      return function(y) {
        return division(new MulValue$prime(new Constant$prime(fromInt2(marloweFixedPoint)), x))(y);
      };
    },
    mod: function(x) {
      return function(y) {
        return new Constant$prime(mul3(fromInt2(marloweFixedPoint))(mod5(evalVal(x))(evalVal(y))));
      };
    },
    CommutativeRing0: function() {
      return commutativeRingValue$prime;
    }
  };
  var _min = function(dict) {
    return dict["_min"];
  };
  var _max = function(dict) {
    return dict["_max"];
  };
  var _ceiling = function(dict) {
    return dict["_ceiling"];
  };
  var _abs = function(dict) {
    return dict["_abs"];
  };

  // output/Actus.Utility.DateShift/index.js
  var fromJust7 = /* @__PURE__ */ fromJust();
  var fromEnum8 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var div8 = /* @__PURE__ */ div(euclideanRingInt);
  var mod6 = /* @__PURE__ */ mod(euclideanRingInt);
  var eq9 = /* @__PURE__ */ eq(eqDay);
  var lessThan3 = /* @__PURE__ */ lessThan(/* @__PURE__ */ ordMaybe(ordDay));
  var toEnum8 = /* @__PURE__ */ toEnum(boundedEnumDay);
  var notEq4 = /* @__PURE__ */ notEq(eqPeriod);
  var eq16 = /* @__PURE__ */ eq(eqEOMC);
  var fromEnum13 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromEnum23 = /* @__PURE__ */ fromEnum(boundedEnumDay);
  var lessThan1 = /* @__PURE__ */ lessThan(ordDay);
  var succ3 = /* @__PURE__ */ succ(enumDate);
  var pred3 = /* @__PURE__ */ pred(enumDate);
  var eq24 = /* @__PURE__ */ eq(eqMonth);
  var unsafeToEnum = function(dictBoundedEnum) {
    var $122 = toEnum(dictBoundedEnum);
    return function($123) {
      return fromJust7($122($123));
    };
  };
  var unsafeToEnum1 = /* @__PURE__ */ unsafeToEnum(boundedEnumYear);
  var unsafeToEnum2 = /* @__PURE__ */ unsafeToEnum(boundedEnumMonth);
  var unsafeToEnum3 = /* @__PURE__ */ unsafeToEnum(boundedEnumDay);
  var rolloverMonths = function(v) {
    return new Tuple(fromEnum8(v.value0) + div8(v.value1 - 1 | 0)(12) | 0, mod6(v.value1 - 1 | 0)(12) + 1 | 0);
  };
  var moveToEndOfMonth = function(v) {
    return new DateTime(canonicalDate(year(v.value0))(month(v.value0))(lastDayOfMonth(year(v.value0))(month(v.value0))), v.value1);
  };
  var isLastDayOfMonth = function(d) {
    return eq9(lastDayOfMonth(year(d))(month(d)))(day(d));
  };
  var isLastDayOfMonthWithLessThan31Days = function(v) {
    return lessThan3(new Just(day(v.value0)))(toEnum8(31)) && isLastDayOfMonth(v.value0);
  };
  var applyEOMC = function(s2) {
    return function(cycle) {
      return function(endOfMonthConvention) {
        return function(dt2) {
          if (isLastDayOfMonthWithLessThan31Days(s2) && (notEq4(cycle.p)(P_D.value) && (notEq4(cycle.p)(P_W.value) && eq16(endOfMonthConvention)(EOMC_EOM.value)))) {
            return moveToEndOfMonth(dt2);
          }
          ;
          if (otherwise) {
            return dt2;
          }
          ;
          throw new Error("Failed pattern match at Actus.Utility.DateShift (line 128, column 1 - line 128, column 63): " + [s2.constructor.name, cycle.constructor.name, endOfMonthConvention.constructor.name, dt2.constructor.name]);
        };
      };
    };
  };
  var addGregorianMonths = function(n) {
    return function(d) {
      var v = rolloverMonths(new Tuple(year(d), fromEnum13(month(d)) + n | 0));
      return new Tuple(v.value0, new Tuple(v.value1, fromEnum23(day(d))));
    };
  };
  var addGregorianMonthsClip = function(n) {
    return function(v) {
      var v1 = addGregorianMonths(n)(v.value0);
      var y$prime = unsafeToEnum1(v1.value0);
      var m$prime = unsafeToEnum2(v1.value1.value0);
      var ld = lastDayOfMonth(y$prime)(m$prime);
      var d$prime = unsafeToEnum3(v1.value1.value1);
      var da = function() {
        var $72 = lessThan1(ld)(d$prime);
        if ($72) {
          return canonicalDate(y$prime)(m$prime)(ld);
        }
        ;
        return canonicalDate(y$prime)(m$prime)(d$prime);
      }();
      return new DateTime(da, v.value1);
    };
  };
  var addGregorianYearsClip = function(n) {
    return addGregorianMonthsClip(n * 12 | 0);
  };
  var addDays = function($copy_v) {
    return function($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v, v1) {
        if (v > 0) {
          $tco_var_v = v - 1 | 0;
          $copy_v1 = fromJust7(succ3(v1));
          return;
        }
        ;
        if (v < 0) {
          $tco_var_v = v + 1 | 0;
          $copy_v1 = fromJust7(pred3(v1));
          return;
        }
        ;
        $tco_done = true;
        return v1;
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }
      ;
      return $tco_result;
    };
  };
  var addDays$prime = function(n) {
    return function(v) {
      return new DateTime(addDays(n)(v.value0), v.value1);
    };
  };
  var shiftDate = function(dt2) {
    return function(n) {
      return function(p2) {
        if (p2 instanceof P_D) {
          return addDays$prime(n)(dt2);
        }
        ;
        if (p2 instanceof P_W) {
          return addDays$prime(n * 7 | 0)(dt2);
        }
        ;
        if (p2 instanceof P_M) {
          return addGregorianMonthsClip(n)(dt2);
        }
        ;
        if (p2 instanceof P_Q) {
          return addGregorianMonthsClip(n * 3 | 0)(dt2);
        }
        ;
        if (p2 instanceof P_H) {
          return addGregorianMonthsClip(n * 6 | 0)(dt2);
        }
        ;
        if (p2 instanceof P_Y) {
          return addGregorianYearsClip(n)(dt2);
        }
        ;
        throw new Error("Failed pattern match at Actus.Utility.DateShift (line 119, column 3 - line 125, column 38): " + [p2.constructor.name]);
      };
    };
  };
  var getFollowingBusinessDay = function(v) {
    return function(v1) {
      if (v1 instanceof CLDR_MF) {
        var d$prime = function() {
          var v2 = weekday(v.value0);
          if (v2 instanceof Saturday) {
            return addDays(2)(v.value0);
          }
          ;
          if (v2 instanceof Sunday) {
            return addDays(1)(v.value0);
          }
          ;
          return v.value0;
        }();
        return new DateTime(d$prime, v.value1);
      }
      ;
      return v;
    };
  };
  var getPreceedingBusinessDay = function(v) {
    return function(v1) {
      if (v1 instanceof CLDR_MF) {
        var d$prime = function() {
          var v2 = weekday(v.value0);
          if (v2 instanceof Saturday) {
            return addDays(-1 | 0)(v.value0);
          }
          ;
          if (v2 instanceof Sunday) {
            return addDays(-2 | 0)(v.value0);
          }
          ;
          return v.value0;
        }();
        return new DateTime(d$prime, v.value1);
      }
      ;
      return v;
    };
  };
  var shiftModifiedFollowing = function(v) {
    return function(cal) {
      var m = month(v.value0);
      var v1 = getFollowingBusinessDay(v)(cal);
      var shiftedMonth = month(v1.value0);
      var $99 = eq24(m)(shiftedMonth);
      if ($99) {
        return v1;
      }
      ;
      return getPreceedingBusinessDay(v)(cal);
    };
  };
  var shiftModifiedPreceeding = function(v) {
    return function(cal) {
      var m = month(v.value0);
      var v1 = getPreceedingBusinessDay(v)(cal);
      var shiftedMonth = month(v1.value0);
      var $107 = eq24(m)(shiftedMonth);
      if ($107) {
        return v1;
      }
      ;
      return getFollowingBusinessDay(v)(cal);
    };
  };
  var applyBDC = function(v) {
    return function(v1) {
      return function(v2) {
        if (v instanceof BDC_NULL) {
          return {
            paymentDay: v2,
            calculationDay: v2
          };
        }
        ;
        if (v instanceof BDC_SCF) {
          return {
            paymentDay: getFollowingBusinessDay(v2)(v1),
            calculationDay: getFollowingBusinessDay(v2)(v1)
          };
        }
        ;
        if (v instanceof BDC_SCMF) {
          return {
            paymentDay: shiftModifiedFollowing(v2)(v1),
            calculationDay: shiftModifiedFollowing(v2)(v1)
          };
        }
        ;
        if (v instanceof BDC_CSF) {
          return {
            paymentDay: getFollowingBusinessDay(v2)(v1),
            calculationDay: v2
          };
        }
        ;
        if (v instanceof BDC_CSMF) {
          return {
            paymentDay: shiftModifiedFollowing(v2)(v1),
            calculationDay: v2
          };
        }
        ;
        if (v instanceof BDC_SCP) {
          return {
            paymentDay: getPreceedingBusinessDay(v2)(v1),
            calculationDay: getPreceedingBusinessDay(v2)(v1)
          };
        }
        ;
        if (v instanceof BDC_SCMP) {
          return {
            paymentDay: shiftModifiedPreceeding(v2)(v1),
            calculationDay: shiftModifiedPreceeding(v2)(v1)
          };
        }
        ;
        if (v instanceof BDC_CSP) {
          return {
            paymentDay: getPreceedingBusinessDay(v2)(v1),
            calculationDay: v2
          };
        }
        ;
        if (v instanceof BDC_CSMP) {
          return {
            paymentDay: shiftModifiedPreceeding(v2)(v1),
            calculationDay: v2
          };
        }
        ;
        throw new Error("Failed pattern match at Actus.Utility.DateShift (line 33, column 1 - line 33, column 54): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var applyBDCWithCfg = function(v) {
    return function(v1) {
      if (v.businessDayConvention instanceof Just && v.calendar instanceof Just) {
        return applyBDC(v.businessDayConvention.value0)(v.calendar.value0)(v1);
      }
      ;
      return {
        paymentDay: v1,
        calculationDay: v1
      };
    };
  };

  // output/Actus.Utility.ScheduleGenerator/index.js
  var greaterThanOrEq3 = /* @__PURE__ */ greaterThanOrEq(ordDateTime);
  var eq17 = /* @__PURE__ */ eq(eqDateTime);
  var $$delete5 = /* @__PURE__ */ $$delete3(eqDateTime);
  var notEq5 = /* @__PURE__ */ notEq(/* @__PURE__ */ eqMaybe(eqDateTime));
  var map24 = /* @__PURE__ */ map(functorList);
  var plus_sched = function(d) {
    return function(c) {
      return shiftDate(d)(c.n)(c.p);
    };
  };
  var minus_sched = function(d) {
    return function(c) {
      return shiftDate(d)(-c.n | 0)(c.p);
    };
  };
  var minimumMaybe = function(dictOrd) {
    var minimum2 = minimum(dictOrd)(foldableList);
    return function(v) {
      if (v instanceof Nil) {
        return Nothing.value;
      }
      ;
      return minimum2(v);
    };
  };
  var maximumMaybe = function(dictOrd) {
    var maximum2 = maximum(dictOrd)(foldableList);
    return function(v) {
      if (v instanceof Nil) {
        return Nothing.value;
      }
      ;
      return maximum2(v);
    };
  };
  var sup2 = function(dictOrd) {
    var maximumMaybe1 = maximumMaybe(dictOrd);
    var lessThan9 = lessThan(dictOrd);
    return function(set3) {
      return function(threshold) {
        return maximumMaybe1(filter2(function(v) {
          return lessThan9(v)(threshold);
        })(set3));
      };
    };
  };
  var init$prime = function(v) {
    if (v instanceof Nil) {
      return Nil.value;
    }
    ;
    return fromMaybe(Nil.value)(init2(v));
  };
  var inf = function(dictOrd) {
    var minimumMaybe1 = minimumMaybe(dictOrd);
    var greaterThan12 = greaterThan(dictOrd);
    return function(set3) {
      return function(threshold) {
        return minimumMaybe1(filter2(function(v) {
          return greaterThan12(v)(threshold);
        })(set3));
      };
    };
  };
  var generateRecurrentSchedule$prime = function(cycle) {
    return function(anchorDate) {
      return function(endDate) {
        var go2 = function($copy_current) {
          return function($copy_k) {
            return function($copy_acc) {
              var $tco_var_current = $copy_current;
              var $tco_var_k = $copy_k;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(current, k, acc) {
                var $45 = greaterThanOrEq3(current)(endDate) || cycle.n === 0;
                if ($45) {
                  $tco_done = true;
                  return snoc2(acc)(current);
                }
                ;
                var current$prime = shiftDate(anchorDate)(k * cycle.n | 0)(cycle.p);
                $tco_var_current = current$prime;
                $tco_var_k = k + 1 | 0;
                $copy_acc = snoc2(acc)(current);
                return;
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_current, $tco_var_k, $copy_acc);
              }
              ;
              return $tco_result;
            };
          };
        };
        return go2(anchorDate)(1)(Nil.value);
      };
    };
  };
  var correction = function(v) {
    return function(v1) {
      return function(v2) {
        return function(v3) {
          if (v.stub instanceof ShortStub && (!v.includeEndDay && eq17(v2)(v1))) {
            return $$delete5(v1)(init$prime(v3));
          }
          ;
          if (v.stub instanceof ShortStub) {
            return init$prime(v3);
          }
          ;
          if (v.stub instanceof LongStub && (v.includeEndDay && notEq5(new Just(v2))(last2(v3)))) {
            var s2 = init$prime(v3);
            var l = length3(s2);
            var $53 = l > 2;
            if ($53) {
              return dropEnd2(1)(s2);
            }
            ;
            return s2;
          }
          ;
          if (v.stub instanceof LongStub && v.includeEndDay) {
            return init$prime(v3);
          }
          ;
          if (v.stub instanceof LongStub && (!v.includeEndDay && (eq17(v2)(v1) && notEq5(new Just(v2))(last2(v3))))) {
            var s2 = $$delete5(v1)(init$prime(v3));
            var l = length3(s2);
            var $58 = l > 2;
            if ($58) {
              return dropEnd2(1)(s2);
            }
            ;
            return s2;
          }
          ;
          if (v.stub instanceof LongStub && (!v.includeEndDay && eq17(v2)(v1))) {
            var s2 = $$delete5(v1)(init$prime(v3));
            var l = length3(s2);
            var $61 = l > 2;
            if ($61) {
              return dropEnd2(1)(s2);
            }
            ;
            return s2;
          }
          ;
          if (v.stub instanceof LongStub && (!v.includeEndDay && notEq5(new Just(v2))(last2(v3)))) {
            var s2 = init$prime(v3);
            var l = length3(s2);
            var $64 = l > 2;
            if ($64) {
              return dropEnd2(1)(s2);
            }
            ;
            return s2;
          }
          ;
          if (v.stub instanceof LongStub && !v.includeEndDay) {
            return init$prime(v3);
          }
          ;
          throw new Error("Failed pattern match at Actus.Utility.ScheduleGenerator (line 38, column 1 - line 38, column 78): " + [v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name]);
        };
      };
    };
  };
  var addEndDay = function(v) {
    return function(v1) {
      return function(v2) {
        if (v) {
          return snoc2(v2)(mkShiftedDay(v1));
        }
        ;
        return v2;
      };
    };
  };
  var generateRecurrentSchedule = function(v) {
    return function(v1) {
      return function(v2) {
        return function(v3) {
          if (v3.endOfMonthConvention instanceof Just && (v3.calendar instanceof Just && v3.businessDayConvention instanceof Just)) {
            return addEndDay(v1.includeEndDay)(v2)(map24(function() {
              var $82 = applyBDC(v3.businessDayConvention.value0)(v3.calendar.value0);
              var $83 = applyEOMC(v)(v1)(v3.endOfMonthConvention.value0);
              return function($84) {
                return $82($83($84));
              };
            }())(correction(v1)(v)(v2)(generateRecurrentSchedule$prime(v1)(v)(v2))));
          }
          ;
          return Nil.value;
        };
      };
    };
  };

  // output/Data.Refined.Internal/index.js
  var fromInt3 = function(dictRing) {
    var Semiring0 = dictRing.Semiring0();
    var power2 = power(monoidAdditive(Semiring0));
    var one2 = one(Semiring0);
    return function(i2) {
      var v = power2(one2)(i2);
      return v;
    };
  };

  // output/Actus.Utility.YearFraction/index.js
  var eq10 = /* @__PURE__ */ eq(eqDay);
  var lessThanOrEq3 = /* @__PURE__ */ lessThanOrEq(ordDate);
  var eq18 = /* @__PURE__ */ eq(eqYear);
  var diff2 = /* @__PURE__ */ diff(durationDays);
  var toEnum9 = /* @__PURE__ */ toEnum(boundedEnumYear);
  var fromEnum9 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var toEnum13 = /* @__PURE__ */ toEnum(boundedEnumDay);
  var eq25 = /* @__PURE__ */ eq(eqDate);
  var eq34 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(eqMonth));
  var toEnum24 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var fromEnum14 = /* @__PURE__ */ fromEnum(boundedEnumDay);
  var fromEnum24 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var show18 = /* @__PURE__ */ show(showDCC);
  var bind11 = /* @__PURE__ */ bind(bindMaybe);
  var apply9 = /* @__PURE__ */ apply(applyMaybe);
  var map25 = /* @__PURE__ */ map(functorMaybe);
  var toEnum33 = /* @__PURE__ */ toEnum(boundedEnumHour);
  var toEnum42 = /* @__PURE__ */ toEnum(boundedEnumMinute);
  var toEnum52 = /* @__PURE__ */ toEnum(boundedEnumSecond);
  var toEnum62 = /* @__PURE__ */ toEnum(boundedEnumMillisecond);
  var eq52 = /* @__PURE__ */ eq(eqTime);
  var adjust2 = /* @__PURE__ */ adjust(durationSeconds);
  var pure9 = /* @__PURE__ */ pure(applicativeMaybe);
  var isLastDayOfMonth2 = function(d) {
    return eq10(lastDayOfMonth(year(d))(month(d)))(day(d));
  };
  var error2 = function($83) {
    return unsafePerformEffect($$throw($83));
  };
  var yearFraction$prime = function(dictEuclideanRing) {
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var fromInt4 = fromInt3(Ring0);
    var div16 = div(dictEuclideanRing);
    var sub1 = sub(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var add1 = add(Semiring0);
    var one2 = one(Semiring0);
    var zero3 = zero(Semiring0);
    return function(v) {
      return function(v1) {
        return function(v2) {
          return function(v3) {
            if (v instanceof DCC_A_AISDA) {
              if (lessThanOrEq3(v1)(v2)) {
                var d2Year = year(v2);
                var d2YearFraction = fromInt4(function() {
                  var $62 = isLeapYear(d2Year);
                  if ($62) {
                    return 366;
                  }
                  ;
                  return 365;
                }());
                var d1Year = year(v1);
                var d1YearFraction = fromInt4(function() {
                  var $63 = isLeapYear(d1Year);
                  if ($63) {
                    return 366;
                  }
                  ;
                  return 365;
                }());
                var $64 = eq18(d1Year)(d2Year);
                if ($64) {
                  var v4 = diff2(v2)(v1);
                  return div16(fromInt4(ceil2(v4)))(d1YearFraction);
                }
                ;
                var v4 = canonicalDate(fromMaybe(year(v1))(toEnum9(fromEnum9(d1Year) + 1 | 0)))(January.value)(fromMaybe(day(v1))(toEnum13(1)));
                var v5 = canonicalDate(d2Year)(January.value)(fromMaybe(day(v2))(toEnum13(1)));
                var v6 = function() {
                  var v72 = diff2(v4)(v1);
                  return fromInt4(ceil2(v72));
                }();
                var v7 = function() {
                  var v8 = diff2(v2)(v5);
                  return fromInt4(ceil2(v8));
                }();
                return sub1(sub1(add1(add1(div16(v6)(d1YearFraction))(div16(v7)(d2YearFraction)))(fromInt4(fromEnum9(d2Year))))(fromInt4(fromEnum9(d1Year))))(one2);
              }
              ;
              if (otherwise) {
                return zero3;
              }
              ;
            }
            ;
            if (v instanceof DCC_A_360) {
              if (lessThanOrEq3(v1)(v2)) {
                var v4 = diff2(v2)(v1);
                return div16(fromInt4(ceil2(v4)))(fromInt4(360));
              }
              ;
              if (otherwise) {
                return zero3;
              }
              ;
            }
            ;
            if (v instanceof DCC_A_365) {
              if (lessThanOrEq3(v1)(v2)) {
                var v4 = diff2(v2)(v1);
                return div16(fromInt4(ceil2(v4)))(fromInt4(365));
              }
              ;
              if (otherwise) {
                return zero3;
              }
              ;
            }
            ;
            if (v instanceof DCC_E30_360ISDA && v3 instanceof Nothing) {
              return error2("DCC_E30_360ISDA requires maturity date");
            }
            ;
            if (v instanceof DCC_E30_360ISDA && v3 instanceof Just) {
              if (lessThanOrEq3(v1)(v2)) {
                var d2ChangedDay = function() {
                  var $74 = isLastDayOfMonth2(v2) && !(eq25(v2)(v3.value0) && eq34(new Just(month(v2)))(toEnum24(2)));
                  if ($74) {
                    return 30;
                  }
                  ;
                  return fromEnum14(day(v2));
                }();
                var d1ChangedDay = function() {
                  var $75 = isLastDayOfMonth2(v1);
                  if ($75) {
                    return 30;
                  }
                  ;
                  return fromEnum14(day(v1));
                }();
                return div16(fromInt4(((360 * (fromEnum9(year(v2)) - fromEnum9(year(v1)) | 0) | 0) + (30 * (fromEnum24(month(v2)) - fromEnum24(month(v1)) | 0) | 0) | 0) + (d2ChangedDay - d1ChangedDay | 0) | 0))(fromInt4(360));
              }
              ;
              if (otherwise) {
                return zero3;
              }
              ;
            }
            ;
            if (v instanceof DCC_E30_360) {
              if (lessThanOrEq3(v1)(v2)) {
                var d2ChangedDay = function() {
                  var $77 = fromEnum14(day(v2)) === 31;
                  if ($77) {
                    return 30;
                  }
                  ;
                  return fromEnum14(day(v2));
                }();
                var d1ChangedDay = function() {
                  var $78 = fromEnum14(day(v1)) === 31;
                  if ($78) {
                    return 30;
                  }
                  ;
                  return fromEnum14(day(v1));
                }();
                return div16(fromInt4(((360 * (fromEnum9(year(v2)) - fromEnum9(year(v1)) | 0) | 0) + (30 * (fromEnum24(month(v2)) - fromEnum24(month(v1)) | 0) | 0) | 0) + (d2ChangedDay - d1ChangedDay | 0) | 0))(fromInt4(360));
              }
              ;
              if (otherwise) {
                return zero3;
              }
              ;
            }
            ;
            return error2("Unsupported day count convention: " + show18(v));
          };
        };
      };
    };
  };
  var clipToMidnight = function(v) {
    return fromMaybe(v)(bind11(apply9(apply9(apply9(map25(Time.create)(toEnum33(23)))(toEnum42(59)))(toEnum52(59)))(toEnum62(0)))(function(nearlyMidnight) {
      var $80 = eq52(v.value1)(nearlyMidnight);
      if ($80) {
        return adjust2(1)(v);
      }
      ;
      return pure9(v);
    }));
  };
  var yearFraction = function(dictEuclideanRing) {
    var yearFraction$prime1 = yearFraction$prime(dictEuclideanRing);
    return function(dcc) {
      return function(x) {
        return function(y) {
          return function(o) {
            return yearFraction$prime1(dcc)(date(x))(date(clipToMidnight(y)))(map25(date)(o));
          };
        };
      };
    };
  };

  // output/Data.Ord.Down/index.js
  var Down = function(x) {
    return x;
  };
  var eqDown = function(dictEq) {
    return dictEq;
  };
  var ordDown = function(dictOrd) {
    var compare9 = compare(dictOrd);
    var eqDown1 = eqDown(dictOrd.Eq0());
    return {
      compare: function(v) {
        return function(v1) {
          return invert(compare9(v)(v1));
        };
      },
      Eq0: function() {
        return eqDown1;
      }
    };
  };

  // output/Actus.Model.ContractSchedule/index.js
  var mempty5 = /* @__PURE__ */ mempty(monoidList);
  var lessThan4 = /* @__PURE__ */ lessThan(ordDateTime);
  var eq11 = /* @__PURE__ */ eq(eqDateTime);
  var greaterThan4 = /* @__PURE__ */ greaterThan(ordDateTime);
  var map26 = /* @__PURE__ */ map(functorMaybe);
  var bind15 = /* @__PURE__ */ bind(bindMaybe);
  var pure10 = /* @__PURE__ */ pure(applicativeMaybe);
  var greaterThanOrEq4 = /* @__PURE__ */ greaterThanOrEq(ordDateTime);
  var comparing2 = /* @__PURE__ */ comparing(/* @__PURE__ */ ordDown(ordDateTime));
  var map112 = /* @__PURE__ */ map(functorList);
  var alt7 = /* @__PURE__ */ alt(altMaybe);
  var mapFlipped5 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var paymentDayIsSymbol = {
    reflectSymbol: function() {
      return "paymentDay";
    }
  };
  var calculationDayIsSymbol = {
    reflectSymbol: function() {
      return "calculationDay";
    }
  };
  var ordRecord2 = /* @__PURE__ */ ordRecord()(/* @__PURE__ */ ordRecordCons(/* @__PURE__ */ ordRecordCons(ordRecordNil)()(paymentDayIsSymbol)(ordDateTime))()(calculationDayIsSymbol)(ordDateTime));
  var inf2 = /* @__PURE__ */ inf(ordRecord2);
  var $$delete6 = /* @__PURE__ */ $$delete3(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()(paymentDayIsSymbol)(eqDateTime))()(calculationDayIsSymbol)(eqDateTime)));
  var find3 = /* @__PURE__ */ find(foldableList);
  var ordMaybe2 = /* @__PURE__ */ ordMaybe(ordDateTime);
  var greaterThan1 = /* @__PURE__ */ greaterThan(ordMaybe2);
  var lift22 = /* @__PURE__ */ lift2(applyMaybe);
  var lift42 = /* @__PURE__ */ lift4(applyMaybe);
  var eq19 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(eqBoolean));
  var nub3 = /* @__PURE__ */ nub2(ordRecord2);
  var lessThanOrEq4 = /* @__PURE__ */ lessThanOrEq(ordMaybe2);
  var notEq6 = /* @__PURE__ */ notEq(/* @__PURE__ */ eqMaybe(eqIPCB));
  var maybeToList = function(v) {
    if (v instanceof Just) {
      return singleton4(v.value0);
    }
    ;
    if (v instanceof Nothing) {
      return mempty5;
    }
    ;
    throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 754, column 1 - line 754, column 43): " + [v.constructor.name]);
  };
  var maturity = function(dictEuclideanRing) {
    var div16 = div(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var sub7 = sub(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var one2 = one(Semiring0);
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var mul1 = mul(Semiring0);
    return function(dictActusOps) {
      return function(dictActusFrac) {
        var _ceiling2 = _ceiling(dictActusFrac);
        return function(v) {
          if (v.contractType instanceof PAM) {
            return v.maturityDate;
          }
          ;
          if (v.contractType instanceof LAM && v.maturityDate instanceof Just) {
            return v.maturityDate;
          }
          ;
          if (v.contractType instanceof LAM && (v.maturityDate instanceof Nothing && (v.cycleAnchorDateOfPrincipalRedemption instanceof Just && (v.cycleOfInterestPayment instanceof Just && (v.cycleOfPrincipalRedemption instanceof Just && (v.nextPrincipalRedemptionPayment instanceof Just && v.notionalPrincipal instanceof Just)))))) {
            var v1 = function() {
              var $295 = lessThan4(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.statusDate);
              if ($295) {
                var previousEvents = generateRecurrentSchedule(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.cycleOfPrincipalRedemption.value0)(v.statusDate)(v.scheduleConfig);
                var f2 = function(v2) {
                  return eq11(v2.calculationDay)(v.statusDate);
                };
                var f1 = function(v2) {
                  return greaterThan4(v2.calculationDay)(minus_sched(v.statusDate)(v.cycleOfInterestPayment.value0));
                };
                var lastEventCalcDay = map26(function(v2) {
                  return v2.calculationDay;
                })(head3(filter2(f2)(filter2(f1)(previousEvents))));
                return new Tuple(lastEventCalcDay, div16(v.notionalPrincipal.value0)(v.nextPrincipalRedemptionPayment.value0));
              }
              ;
              return new Tuple(new Just(v.cycleAnchorDateOfPrincipalRedemption.value0), sub7(div16(v.notionalPrincipal.value0)(v.nextPrincipalRedemptionPayment.value0))(one2));
            }();
            return bind15(v.scheduleConfig.endOfMonthConvention)(function(endOfMonthConvention$prime) {
              return bind15(v1.value0)(function(lastEvent$prime) {
                return pure10(applyEOMC(lastEvent$prime)(v.cycleOfPrincipalRedemption.value0)(endOfMonthConvention$prime)(plus_sched(lastEvent$prime)({
                  n: v.cycleOfPrincipalRedemption.value0.n * _ceiling2(v1.value1) | 0,
                  p: v.cycleOfPrincipalRedemption.value0.p,
                  stub: v.cycleOfPrincipalRedemption.value0.stub,
                  includeEndDay: v.cycleOfPrincipalRedemption.value0.includeEndDay
                })));
              });
            });
          }
          ;
          if (v.contractType instanceof NAM && v.maturityDate instanceof Just) {
            return v.maturityDate;
          }
          ;
          if (v.contractType instanceof NAM && (v.maturityDate instanceof Nothing && (v.cycleAnchorDateOfPrincipalRedemption instanceof Just && (v.nextPrincipalRedemptionPayment instanceof Just && (v.initialExchangeDate instanceof Just && (v.cycleOfPrincipalRedemption instanceof Just && (v.notionalPrincipal instanceof Just && (v.nominalInterestRate instanceof Just && v.dayCountConvention instanceof Just)))))))) {
            var lastEvent = function() {
              if (greaterThanOrEq4(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.statusDate)) {
                return new Just(v.cycleAnchorDateOfPrincipalRedemption.value0);
              }
              ;
              if (greaterThanOrEq4(plus_sched(v.initialExchangeDate.value0)(v.cycleOfPrincipalRedemption.value0))(v.statusDate)) {
                return new Just(plus_sched(v.initialExchangeDate.value0)(v.cycleOfPrincipalRedemption.value0));
              }
              ;
              if (otherwise) {
                var previousEvents = generateRecurrentSchedule(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.cycleOfPrincipalRedemption.value0)(v.statusDate)(v.scheduleConfig);
                var f = function(v12) {
                  return eq11(v12.calculationDay)(v.statusDate);
                };
                return map26(function(v12) {
                  return v12.calculationDay;
                })(head3(filter2(f)(previousEvents)));
              }
              ;
              throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 152, column 5 - line 160, column 72): " + []);
            }();
            return bind15(v.scheduleConfig.endOfMonthConvention)(function(endOfMonthConvention$prime) {
              return bind15(lastEvent)(function(lastEvent$prime) {
                var yLastEventPlusPRCL = yearFraction2(v.dayCountConvention.value0)(lastEvent$prime)(plus_sched(lastEvent$prime)(v.cycleOfPrincipalRedemption.value0))(Nothing.value);
                var redemptionPerCycle2 = sub7(v.nextPrincipalRedemptionPayment.value0)(mul1(mul1(yLastEventPlusPRCL)(v.nominalInterestRate.value0))(v.notionalPrincipal.value0));
                var remainingPeriods2 = _ceiling2(sub7(div16(v.notionalPrincipal.value0)(redemptionPerCycle2))(one2));
                return pure10(applyEOMC(lastEvent$prime)(v.cycleOfPrincipalRedemption.value0)(endOfMonthConvention$prime)(plus_sched(lastEvent$prime)({
                  n: v.cycleOfPrincipalRedemption.value0.n * remainingPeriods2 | 0,
                  p: v.cycleOfPrincipalRedemption.value0.p,
                  stub: v.cycleOfPrincipalRedemption.value0.stub,
                  includeEndDay: v.cycleOfPrincipalRedemption.value0.includeEndDay
                })));
              });
            });
          }
          ;
          if (v.contractType instanceof ANN && (v.amortizationDate instanceof Nothing && (v.maturityDate instanceof Nothing && (v.cycleAnchorDateOfPrincipalRedemption instanceof Just && (v.nextPrincipalRedemptionPayment instanceof Just && (v.initialExchangeDate instanceof Just && (v.cycleOfPrincipalRedemption instanceof Just && (v.notionalPrincipal instanceof Just && (v.nominalInterestRate instanceof Just && v.dayCountConvention instanceof Just))))))))) {
            var tplus = plus_sched(v.initialExchangeDate.value0)(v.cycleOfPrincipalRedemption.value0);
            var lastEvent = function() {
              if (greaterThanOrEq4(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.statusDate)) {
                return v.cycleAnchorDateOfPrincipalRedemption.value0;
              }
              ;
              if (greaterThanOrEq4(tplus)(v.statusDate)) {
                return tplus;
              }
              ;
              if (otherwise) {
                var previousEvents = generateRecurrentSchedule(v.statusDate)(v.cycleOfPrincipalRedemption.value0)(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.scheduleConfig);
                return fromMaybe(v.initialExchangeDate.value0)(head3(sortBy2(comparing2(Down))(map112(function(v12) {
                  return v12.calculationDay;
                })(filter2(function(v12) {
                  return greaterThan4(v12.calculationDay)(v.statusDate);
                })(previousEvents)))));
              }
              ;
              throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 187, column 5 - line 194, column 167): " + []);
            }();
            var timeFromLastEventPlusOneCycle = yearFraction2(v.dayCountConvention.value0)(lastEvent)(plus_sched(lastEvent)(v.cycleOfPrincipalRedemption.value0))(Nothing.value);
            var redemptionPerCycle = sub7(v.nextPrincipalRedemptionPayment.value0)(mul1(mul1(timeFromLastEventPlusOneCycle)(v.nominalInterestRate.value0))(v.notionalPrincipal.value0));
            var remainingPeriods = _ceiling2(sub7(div16(v.notionalPrincipal.value0)(redemptionPerCycle))(one2));
            return Just.create(function(v12) {
              return v12.calculationDay;
            }(applyBDCWithCfg(v.scheduleConfig)(plus_sched(lastEvent)({
              n: remainingPeriods,
              p: v.cycleOfPrincipalRedemption.value0.p,
              stub: v.cycleOfPrincipalRedemption.value0.stub,
              includeEndDay: v.cycleOfPrincipalRedemption.value0.includeEndDay
            }))));
          }
          ;
          if (v.contractType instanceof ANN && v.amortizationDate instanceof Just) {
            return v.amortizationDate;
          }
          ;
          if (v.contractType instanceof ANN && (v.amortizationDate instanceof Nothing && v.maturityDate instanceof Just)) {
            return v.maturityDate;
          }
          ;
          return Nothing.value;
        };
      };
    };
  };
  var append$prime = function(v) {
    return function(v1) {
      if (v instanceof Nil) {
        return v1;
      }
      ;
      if (v instanceof Cons) {
        return new Cons(v.value0, append$prime(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 748, column 1 - line 748, column 48): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var _SCHED_TD_PAM = function(dictEuclideanRing) {
    return function(v) {
      if (v.terminationDate instanceof Just) {
        return singleton4(applyBDCWithCfg(v.scheduleConfig)(v.terminationDate.value0));
      }
      ;
      return Nil.value;
    };
  };
  var _SCHED_SC_PAM = function(dictEuclideanRing) {
    var maturity1 = maturity(dictEuclideanRing);
    return function(dictActusOps) {
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.scalingEffect instanceof Just && v.scalingEffect.value0 instanceof SE_OOO) {
            return Nil.value;
          }
          ;
          if (v.cycleAnchorDateOfScalingIndex instanceof Just && v.cycleOfScalingIndex instanceof Just) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(v.cycleAnchorDateOfScalingIndex.value0)({
                n: v.cycleOfScalingIndex.value0.n,
                p: v.cycleOfScalingIndex.value0.p,
                stub: v.cycleOfScalingIndex.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 545, column 9 - line 547, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfScalingIndex instanceof Nothing && (v.cycleOfScalingIndex instanceof Just && v.initialExchangeDate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfScalingIndex.value0))({
                n: v.cycleOfScalingIndex.value0.n,
                p: v.cycleOfScalingIndex.value0.p,
                stub: v.cycleOfScalingIndex.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 557, column 9 - line 559, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_RR_PAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.cycleAnchorDateOfRateReset instanceof Just && (v.cycleOfRateReset instanceof Just && v.nextResetRate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var tt2 = generateRecurrentSchedule(v.cycleAnchorDateOfRateReset.value0)({
                n: v.cycleOfRateReset.value0.n,
                p: v.cycleOfRateReset.value0.p,
                stub: v.cycleOfRateReset.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
              return fromMaybe(Nil.value)(mapFlipped5(inf2(tt2)(mkShiftedDay(v.statusDate)))(flip($$delete6)(tt2)));
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 426, column 9 - line 432, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfRateReset instanceof Just && (v.cycleOfRateReset instanceof Just && v.nextResetRate instanceof Nothing)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(v.cycleAnchorDateOfRateReset.value0)({
                n: v.cycleOfRateReset.value0.n,
                p: v.cycleOfRateReset.value0.p,
                stub: v.cycleOfRateReset.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 442, column 9 - line 444, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfRateReset instanceof Nothing && (v.cycleOfRateReset instanceof Just && (v.nextResetRate instanceof Just && v.initialExchangeDate instanceof Just))) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var tt2 = generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfRateReset.value0))({
                n: v.cycleOfRateReset.value0.n,
                p: v.cycleOfRateReset.value0.p,
                stub: v.cycleOfRateReset.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
              return fromMaybe(Nil.value)(mapFlipped5(inf2(tt2)(mkShiftedDay(v.statusDate)))(flip($$delete6)(tt2)));
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 456, column 9 - line 462, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfRateReset instanceof Nothing && (v.cycleOfRateReset instanceof Just && (v.nextResetRate instanceof Nothing && v.initialExchangeDate instanceof Just))) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfRateReset.value0))({
                n: v.cycleOfRateReset.value0.n,
                p: v.cycleOfRateReset.value0.p,
                stub: v.cycleOfRateReset.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 473, column 9 - line 475, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfRateReset instanceof Just && v.cycleOfRateReset instanceof Nothing) {
            return singleton4(applyBDCWithCfg(v.scheduleConfig)(v.cycleAnchorDateOfRateReset.value0));
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_RRF_PAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.cycleAnchorDateOfRateReset instanceof Just && (v.cycleOfRateReset instanceof Just && v.nextResetRate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var tt2 = generateRecurrentSchedule(v.cycleAnchorDateOfRateReset.value0)({
                n: v.cycleOfRateReset.value0.n,
                p: v.cycleOfRateReset.value0.p,
                stub: v.cycleOfRateReset.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
              return maybeToList(find3(function(v2) {
                return greaterThan4(v2.calculationDay)(v.statusDate);
              })(tt2));
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 502, column 9 - line 508, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfRateReset instanceof Nothing && (v.cycleOfRateReset instanceof Just && (v.nextResetRate instanceof Just && v.initialExchangeDate instanceof Just))) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var tt2 = generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfRateReset.value0))(v.cycleOfRateReset.value0)(v1.value0)(v.scheduleConfig);
              return maybeToList(find3(function(v2) {
                return greaterThan4(v2.calculationDay)(v.statusDate);
              })(tt2));
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 520, column 9 - line 526, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_PR_LAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.cycleAnchorDateOfPrincipalRedemption instanceof Just && v.cycleOfPrincipalRedemption instanceof Just) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(v.cycleAnchorDateOfPrincipalRedemption.value0)({
                n: v.cycleOfPrincipalRedemption.value0.n,
                p: v.cycleOfPrincipalRedemption.value0.p,
                stub: v.cycleOfPrincipalRedemption.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 579, column 9 - line 581, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfPrincipalRedemption instanceof Nothing && (v.cycleOfPrincipalRedemption instanceof Just && v.initialExchangeDate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfPrincipalRedemption.value0))({
                n: v.cycleOfPrincipalRedemption.value0.n,
                p: v.cycleOfPrincipalRedemption.value0.p,
                stub: v.cycleOfPrincipalRedemption.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 591, column 9 - line 593, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_PRF_ANN = function(dictActusOps) {
    return function(dictEuclideanRing) {
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        var _SCHED_RRF_PAM1 = _SCHED_RRF_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_RR_PAM1 = _SCHED_RR_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        return function(v) {
          if (v.cycleAnchorDateOfPrincipalRedemption instanceof Just && (v.nextPrincipalRedemptionPayment instanceof Nothing && v.initialExchangeDate instanceof Just)) {
            var rrf = _SCHED_RRF_PAM1(v);
            var rr = _SCHED_RR_PAM1(v);
            var prf = function() {
              if (greaterThan4(v.cycleAnchorDateOfPrincipalRedemption.value0)(v.initialExchangeDate.value0)) {
                var p2 = addDays$prime(-1 | 0)(v.cycleAnchorDateOfPrincipalRedemption.value0);
                return singleton4({
                  calculationDay: p2,
                  paymentDay: p2
                });
              }
              ;
              if (otherwise) {
                return Nil.value;
              }
              ;
              throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 739, column 5 - line 741, column 24): " + []);
            }();
            return append$prime(append$prime(prf)(rr))(rrf);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_PRD_PAM = function(v) {
    if (v.purchaseDate instanceof Just) {
      return singleton4(applyBDCWithCfg(v.scheduleConfig)(v.purchaseDate.value0));
    }
    ;
    return Nil.value;
  };
  var _SCHED_PP_PAM = function(v) {
    if (v.prepaymentEffect instanceof Just && v.prepaymentEffect.value0 instanceof PPEF_N) {
      return Nil.value;
    }
    ;
    if (v.cycleAnchorDateOfOptionality instanceof Just && (v.cycleOfOptionality instanceof Just && v.maturityDate instanceof Just)) {
      return generateRecurrentSchedule(v.cycleAnchorDateOfOptionality.value0)(v.cycleOfOptionality.value0)(v.maturityDate.value0)(v.scheduleConfig);
    }
    ;
    if (v.cycleAnchorDateOfOptionality instanceof Nothing && (v.cycleOfOptionality instanceof Just && (v.maturityDate instanceof Just && v.initialExchangeDate instanceof Just))) {
      return generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfOptionality.value0))(v.cycleOfOptionality.value0)(v.maturityDate.value0)(v.scheduleConfig);
    }
    ;
    return Nil.value;
  };
  var _SCHED_PY_PAM = function(v) {
    if (v.penaltyType instanceof Just && v.penaltyType.value0 instanceof PYTP_O) {
      return Nil.value;
    }
    ;
    return _SCHED_PP_PAM(v);
  };
  var _SCHED_MD_PAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          var v1 = alt7(v.maturityDate)(maturity2(v));
          if (v1 instanceof Just) {
            return singleton4(function() {
              var d = applyBDCWithCfg(v.scheduleConfig)(v1.value0);
              return {
                paymentDay: v1.value0,
                calculationDay: d.calculationDay
              };
            }());
          }
          ;
          if (v1 instanceof Nothing) {
            return Nil.value;
          }
          ;
          throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 233, column 9 - line 235, column 17): " + [v1.constructor.name]);
        };
      };
    };
  };
  var _SCHED_MD_LAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          var v1 = alt7(maturity2(v))(v.maturityDate);
          if (v1 instanceof Just) {
            return singleton4(applyBDCWithCfg(v.scheduleConfig)(v1.value0));
          }
          ;
          if (v1 instanceof Nothing) {
            return Nil.value;
          }
          ;
          throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 609, column 9 - line 611, column 17): " + [v1.constructor.name]);
        };
      };
    };
  };
  var _SCHED_IP_PAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.cycleAnchorDateOfInterestPayment instanceof Just && v.cycleOfInterestPayment instanceof Just) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var s2 = generateRecurrentSchedule(v.cycleAnchorDateOfInterestPayment.value0)({
                n: v.cycleOfInterestPayment.value0.n,
                p: v.cycleOfInterestPayment.value0.p,
                stub: v.cycleOfInterestPayment.value0.stub,
                includeEndDay: true
              })(v1.value0)(v.scheduleConfig);
              return filter2(function(v2) {
                return greaterThan1(new Just(v2.calculationDay))(v.capitalizationEndDate);
              })(s2);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 341, column 9 - line 347, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfInterestPayment instanceof Nothing && (v.cycleOfInterestPayment instanceof Just && v.initialExchangeDate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var s2 = generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfInterestPayment.value0))({
                n: v.cycleOfInterestPayment.value0.n,
                p: v.cycleOfInterestPayment.value0.p,
                stub: v.cycleOfInterestPayment.value0.stub,
                includeEndDay: true
              })(v1.value0)(v.scheduleConfig);
              return filter2(function(v2) {
                return greaterThan1(new Just(v2.calculationDay))(v.capitalizationEndDate);
              })(s2);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 358, column 9 - line 364, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_IP_NAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          var s2 = function() {
            if (isNothing(v.cycleAnchorDateOfPrincipalRedemption)) {
              return lift22(plus_sched)(v.initialExchangeDate)(v.cycleOfPrincipalRedemption);
            }
            ;
            if (otherwise) {
              return v.cycleAnchorDateOfPrincipalRedemption;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 658, column 5 - line 660, column 57): " + []);
          }();
          var r = function() {
            if (isJust(v.cycleAnchorDateOfInterestPayment)) {
              return v.cycleAnchorDateOfInterestPayment;
            }
            ;
            if (isJust(v.cycleOfInterestPayment)) {
              return lift22(plus_sched)(v.initialExchangeDate)(v.cycleOfInterestPayment);
            }
            ;
            if (otherwise) {
              return Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 664, column 5 - line 667, column 28): " + []);
          }();
          var m = alt7(v.maturityDate)(maturity2(v));
          var v1 = lift42(generateRecurrentSchedule)(s2)(v.cycleOfPrincipalRedemption)(m)(new Just(v.scheduleConfig));
          var _T = lift22(minus_sched)(s2)(v.cycleOfPrincipalRedemption);
          var u2 = function() {
            if (isNothing(v.cycleAnchorDateOfInterestPayment) && isNothing(v.cycleOfInterestPayment)) {
              return Nothing.value;
            }
            ;
            if (isJust(v.capitalizationEndDate) && eq19(new Just(true))(lift22(greaterThan4)(v.capitalizationEndDate)(_T))) {
              return Nothing.value;
            }
            ;
            if (otherwise) {
              return lift42(generateRecurrentSchedule)(r)(map26(function(c) {
                return {
                  includeEndDay: true,
                  n: c.n,
                  p: c.p,
                  stub: c.stub
                };
              })(v.cycleOfInterestPayment))(m)(new Just(v.scheduleConfig));
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 671, column 5 - line 674, column 142): " + []);
          }();
          var result = map26(nub3)(lift22(append$prime)(u2)(v1));
          var result$prime = function() {
            if (isJust(result) && isJust(v.capitalizationEndDate)) {
              return map26(filter2(function(v2) {
                return greaterThan1(new Just(v2.calculationDay))(v.capitalizationEndDate);
              }))(result);
            }
            ;
            if (otherwise) {
              return result;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 678, column 5 - line 680, column 27): " + []);
          }();
          return fromMaybe(Nil.value)(result$prime);
        };
      };
    };
  };
  var _SCHED_IPCI_PAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.cycleAnchorDateOfInterestPayment instanceof Just && (v.cycleOfInterestPayment instanceof Just && v.capitalizationEndDate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var s2 = generateRecurrentSchedule(v.cycleAnchorDateOfInterestPayment.value0)({
                n: v.cycleOfInterestPayment.value0.n,
                p: v.cycleOfInterestPayment.value0.p,
                stub: v.cycleOfInterestPayment.value0.stub,
                includeEndDay: true
              })(v1.value0)(v.scheduleConfig);
              return snoc2(filter2(function(v2) {
                return lessThan4(v2.calculationDay)(v.capitalizationEndDate.value0);
              })(s2))(applyBDCWithCfg(v.scheduleConfig)(v.capitalizationEndDate.value0));
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 383, column 9 - line 389, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfInterestPayment instanceof Nothing && (v.cycleOfInterestPayment instanceof Just && (v.initialExchangeDate instanceof Just && v.capitalizationEndDate instanceof Just))) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              var s2 = generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfInterestPayment.value0))({
                n: v.cycleOfInterestPayment.value0.n,
                p: v.cycleOfInterestPayment.value0.p,
                stub: v.cycleOfInterestPayment.value0.stub,
                includeEndDay: true
              })(v1.value0)(v.scheduleConfig);
              return snoc2(filter2(function(v2) {
                return lessThan4(v2.calculationDay)(v.capitalizationEndDate.value0);
              })(s2))(applyBDCWithCfg(v.scheduleConfig)(v.capitalizationEndDate.value0));
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 400, column 9 - line 406, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_IPCI_NAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          var s2 = function() {
            if (isNothing(v.cycleAnchorDateOfPrincipalRedemption)) {
              return lift22(plus_sched)(v.initialExchangeDate)(v.cycleOfPrincipalRedemption);
            }
            ;
            if (otherwise) {
              return v.cycleAnchorDateOfPrincipalRedemption;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 694, column 5 - line 696, column 57): " + []);
          }();
          var r = function() {
            if (isJust(v.capitalizationEndDate)) {
              return v.capitalizationEndDate;
            }
            ;
            if (isJust(v.cycleAnchorDateOfInterestPayment)) {
              return v.cycleAnchorDateOfInterestPayment;
            }
            ;
            if (isJust(v.cycleOfInterestPayment)) {
              return lift22(plus_sched)(v.initialExchangeDate)(v.cycleOfInterestPayment);
            }
            ;
            if (otherwise) {
              return Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 700, column 5 - line 704, column 28): " + []);
          }();
          var m = alt7(maturity2(v))(v.maturityDate);
          var v1 = lift42(generateRecurrentSchedule)(s2)(v.cycleOfPrincipalRedemption)(m)(new Just(v.scheduleConfig));
          var _T = lift22(minus_sched)(s2)(v.cycleOfPrincipalRedemption);
          var u2 = function() {
            if (isNothing(v.cycleAnchorDateOfInterestPayment) && isNothing(v.cycleOfInterestPayment)) {
              return Nothing.value;
            }
            ;
            if (isJust(v.capitalizationEndDate) && eq19(new Just(true))(lift22(greaterThan4)(v.capitalizationEndDate)(_T))) {
              return Nothing.value;
            }
            ;
            if (otherwise) {
              return lift42(generateRecurrentSchedule)(r)(map26(function(c) {
                return {
                  includeEndDay: true,
                  n: c.n,
                  p: c.p,
                  stub: c.stub
                };
              })(v.cycleOfInterestPayment))(m)(new Just(v.scheduleConfig));
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 708, column 5 - line 711, column 142): " + []);
          }();
          var result = new Just(nub3(append$prime(fromMaybe(Nil.value)(u2))(fromMaybe(Nil.value)(v1))));
          var result$prime = function() {
            if (isJust(result) && isJust(v.capitalizationEndDate)) {
              return map26(filter2(function(v2) {
                return lessThanOrEq4(new Just(v2.calculationDay))(v.capitalizationEndDate);
              }))(result);
            }
            ;
            if (otherwise) {
              return Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 715, column 5 - line 717, column 28): " + []);
          }();
          return fromMaybe(Nil.value)(result$prime);
        };
      };
    };
  };
  var _SCHED_IPCB_LAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (notEq6(v.interestCalculationBase)(new Just(IPCB_NTL.value))) {
            return Nil.value;
          }
          ;
          if (v.cycleAnchorDateOfInterestCalculationBase instanceof Just && v.cycleOfInterestCalculationBase instanceof Just) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(v.cycleAnchorDateOfInterestCalculationBase.value0)({
                n: v.cycleOfInterestCalculationBase.value0.n,
                p: v.cycleOfInterestCalculationBase.value0.p,
                stub: v.cycleOfInterestCalculationBase.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 629, column 9 - line 631, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfInterestCalculationBase instanceof Nothing && (v.cycleOfInterestCalculationBase instanceof Just && v.initialExchangeDate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfInterestCalculationBase.value0))({
                n: v.cycleOfInterestCalculationBase.value0.n,
                p: v.cycleOfInterestCalculationBase.value0.p,
                stub: v.cycleOfInterestCalculationBase.value0.stub,
                includeEndDay: false
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 641, column 9 - line 643, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var _SCHED_IED_PAM = function(v) {
    if (v.initialExchangeDate instanceof Just) {
      return singleton4(applyBDCWithCfg(v.scheduleConfig)(v.initialExchangeDate.value0));
    }
    ;
    return Nil.value;
  };
  var _SCHED_FP_PAM = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity1 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity2 = maturity1(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          if (v.feeRate instanceof Nothing) {
            return Nil.value;
          }
          ;
          if (v.cycleAnchorDateOfFee instanceof Just && v.cycleOfFee instanceof Just) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(v.cycleAnchorDateOfFee.value0)({
                n: v.cycleOfFee.value0.n,
                p: v.cycleOfFee.value0.p,
                stub: v.cycleOfFee.value0.stub,
                includeEndDay: true
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 290, column 9 - line 292, column 17): " + [v1.constructor.name]);
          }
          ;
          if (v.cycleAnchorDateOfFee instanceof Nothing && (v.cycleOfFee instanceof Just && v.initialExchangeDate instanceof Just)) {
            var v1 = alt7(maturity2(v))(v.maturityDate);
            if (v1 instanceof Just) {
              return generateRecurrentSchedule(plus_sched(v.initialExchangeDate.value0)(v.cycleOfFee.value0))({
                n: v.cycleOfFee.value0.n,
                p: v.cycleOfFee.value0.p,
                stub: v.cycleOfFee.value0.stub,
                includeEndDay: true
              })(v1.value0)(v.scheduleConfig);
            }
            ;
            if (v1 instanceof Nothing) {
              return Nil.value;
            }
            ;
            throw new Error("Failed pattern match at Actus.Model.ContractSchedule (line 302, column 9 - line 304, column 17): " + [v1.constructor.name]);
          }
          ;
          return Nil.value;
        };
      };
    };
  };
  var schedule = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var _SCHED_TD_PAM1 = _SCHED_TD_PAM(dictEuclideanRing);
      var _SCHED_SC_PAM1 = _SCHED_SC_PAM(dictEuclideanRing);
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        var _SCHED_MD_PAM1 = _SCHED_MD_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_FP_PAM1 = _SCHED_FP_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_IP_PAM1 = _SCHED_IP_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_IPCI_PAM1 = _SCHED_IPCI_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_RR_PAM1 = _SCHED_RR_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_RRF_PAM1 = _SCHED_RRF_PAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_SC_PAM2 = _SCHED_SC_PAM1(ActusOps0)(dictActusFrac);
        var _SCHED_PR_LAM1 = _SCHED_PR_LAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_MD_LAM1 = _SCHED_MD_LAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_IPCB_LAM1 = _SCHED_IPCB_LAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_IP_NAM1 = _SCHED_IP_NAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_IPCI_NAM1 = _SCHED_IPCI_NAM(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var _SCHED_PRF_ANN1 = _SCHED_PRF_ANN(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        return function(v) {
          return function(v1) {
            if (v instanceof IED && v1.contractType instanceof PAM) {
              return _SCHED_IED_PAM(v1);
            }
            ;
            if (v instanceof MD && v1.contractType instanceof PAM) {
              return _SCHED_MD_PAM1(v1);
            }
            ;
            if (v instanceof PP && v1.contractType instanceof PAM) {
              return _SCHED_PP_PAM(v1);
            }
            ;
            if (v instanceof PY && v1.contractType instanceof PAM) {
              return _SCHED_PY_PAM(v1);
            }
            ;
            if (v instanceof FP && v1.contractType instanceof PAM) {
              return _SCHED_FP_PAM1(v1);
            }
            ;
            if (v instanceof PRD && v1.contractType instanceof PAM) {
              return _SCHED_PRD_PAM(v1);
            }
            ;
            if (v instanceof TD && v1.contractType instanceof PAM) {
              return _SCHED_TD_PAM1(v1);
            }
            ;
            if (v instanceof IP && v1.contractType instanceof PAM) {
              return _SCHED_IP_PAM1(v1);
            }
            ;
            if (v instanceof IPCI && v1.contractType instanceof PAM) {
              return _SCHED_IPCI_PAM1(v1);
            }
            ;
            if (v instanceof RR && v1.contractType instanceof PAM) {
              return _SCHED_RR_PAM1(v1);
            }
            ;
            if (v instanceof RRF && v1.contractType instanceof PAM) {
              return _SCHED_RRF_PAM1(v1);
            }
            ;
            if (v instanceof SC && v1.contractType instanceof PAM) {
              return _SCHED_SC_PAM2(v1);
            }
            ;
            if (v instanceof IED && v1.contractType instanceof LAM) {
              return _SCHED_IED_PAM(v1);
            }
            ;
            if (v instanceof PR && v1.contractType instanceof LAM) {
              return _SCHED_PR_LAM1(v1);
            }
            ;
            if (v instanceof MD && v1.contractType instanceof LAM) {
              return _SCHED_MD_LAM1(v1);
            }
            ;
            if (v instanceof PP && v1.contractType instanceof LAM) {
              return _SCHED_PP_PAM(v1);
            }
            ;
            if (v instanceof PY && v1.contractType instanceof LAM) {
              return _SCHED_PY_PAM(v1);
            }
            ;
            if (v instanceof FP && v1.contractType instanceof LAM) {
              return _SCHED_FP_PAM1(v1);
            }
            ;
            if (v instanceof PRD && v1.contractType instanceof LAM) {
              return _SCHED_PRD_PAM(v1);
            }
            ;
            if (v instanceof TD && v1.contractType instanceof LAM) {
              return _SCHED_TD_PAM1(v1);
            }
            ;
            if (v instanceof IP && v1.contractType instanceof LAM) {
              return _SCHED_IP_PAM1(v1);
            }
            ;
            if (v instanceof IPCI && v1.contractType instanceof LAM) {
              return _SCHED_IPCI_PAM1(v1);
            }
            ;
            if (v instanceof IPCB && v1.contractType instanceof LAM) {
              return _SCHED_IPCB_LAM1(v1);
            }
            ;
            if (v instanceof RR && v1.contractType instanceof LAM) {
              return _SCHED_RR_PAM1(v1);
            }
            ;
            if (v instanceof RRF && v1.contractType instanceof LAM) {
              return _SCHED_RRF_PAM1(v1);
            }
            ;
            if (v instanceof SC && v1.contractType instanceof LAM) {
              return _SCHED_SC_PAM2(v1);
            }
            ;
            if (v instanceof IED && v1.contractType instanceof NAM) {
              return _SCHED_IED_PAM(v1);
            }
            ;
            if (v instanceof PR && v1.contractType instanceof NAM) {
              return _SCHED_PR_LAM1(v1);
            }
            ;
            if (v instanceof MD && v1.contractType instanceof NAM) {
              return _SCHED_MD_PAM1(v1);
            }
            ;
            if (v instanceof PP && v1.contractType instanceof NAM) {
              return _SCHED_PP_PAM(v1);
            }
            ;
            if (v instanceof PY && v1.contractType instanceof NAM) {
              return _SCHED_PY_PAM(v1);
            }
            ;
            if (v instanceof FP && v1.contractType instanceof NAM) {
              return _SCHED_FP_PAM1(v1);
            }
            ;
            if (v instanceof PRD && v1.contractType instanceof NAM) {
              return _SCHED_PRD_PAM(v1);
            }
            ;
            if (v instanceof TD && v1.contractType instanceof NAM) {
              return _SCHED_TD_PAM1(v1);
            }
            ;
            if (v instanceof IP && v1.contractType instanceof NAM) {
              return _SCHED_IP_NAM1(v1);
            }
            ;
            if (v instanceof IPCI && v1.contractType instanceof NAM) {
              return _SCHED_IPCI_NAM1(v1);
            }
            ;
            if (v instanceof IPCB && v1.contractType instanceof NAM) {
              return _SCHED_IPCB_LAM1(v1);
            }
            ;
            if (v instanceof RR && v1.contractType instanceof NAM) {
              return _SCHED_RR_PAM1(v1);
            }
            ;
            if (v instanceof RRF && v1.contractType instanceof NAM) {
              return _SCHED_RRF_PAM1(v1);
            }
            ;
            if (v instanceof SC && v1.contractType instanceof NAM) {
              return _SCHED_SC_PAM2(v1);
            }
            ;
            if (v instanceof IED && v1.contractType instanceof ANN) {
              return _SCHED_IED_PAM(v1);
            }
            ;
            if (v instanceof PR && v1.contractType instanceof ANN) {
              return _SCHED_PR_LAM1(v1);
            }
            ;
            if (v instanceof MD && v1.contractType instanceof ANN) {
              return _SCHED_MD_PAM1(v1);
            }
            ;
            if (v instanceof PP && v1.contractType instanceof ANN) {
              return _SCHED_PP_PAM(v1);
            }
            ;
            if (v instanceof PY && v1.contractType instanceof ANN) {
              return _SCHED_PY_PAM(v1);
            }
            ;
            if (v instanceof FP && v1.contractType instanceof ANN) {
              return _SCHED_FP_PAM1(v1);
            }
            ;
            if (v instanceof PRD && v1.contractType instanceof ANN) {
              return _SCHED_PRD_PAM(v1);
            }
            ;
            if (v instanceof TD && v1.contractType instanceof ANN) {
              return _SCHED_TD_PAM1(v1);
            }
            ;
            if (v instanceof IP && v1.contractType instanceof ANN) {
              return _SCHED_IP_NAM1(v1);
            }
            ;
            if (v instanceof IPCI && v1.contractType instanceof ANN) {
              return _SCHED_IPCI_PAM1(v1);
            }
            ;
            if (v instanceof IPCB && v1.contractType instanceof ANN) {
              return _SCHED_IPCB_LAM1(v1);
            }
            ;
            if (v instanceof RR && v1.contractType instanceof ANN) {
              return _SCHED_RR_PAM1(v1);
            }
            ;
            if (v instanceof RRF && v1.contractType instanceof ANN) {
              return _SCHED_RRF_PAM1(v1);
            }
            ;
            if (v instanceof SC && v1.contractType instanceof ANN) {
              return _SCHED_SC_PAM2(v1);
            }
            ;
            if (v instanceof PRF && v1.contractType instanceof ANN) {
              return _SCHED_PRF_ANN1(v1);
            }
            ;
            return Nil.value;
          };
        };
      };
    };
  };

  // output/Actus.Model.Payoff/index.js
  var elem3 = /* @__PURE__ */ elem2(eqCT);
  var asks3 = /* @__PURE__ */ asks(/* @__PURE__ */ monadAskReaderT(monadIdentity));
  var payoff = function(dictSemiring) {
    return function(dictEuclideanRing) {
      var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
      var negate3 = negate(Ring0);
      var Semiring0 = Ring0.Semiring0();
      var mul6 = mul(Semiring0);
      var sign4 = sign3(Ring0);
      var add6 = add(Semiring0);
      var sub7 = sub(Ring0);
      var zero3 = zero(Semiring0);
      var yearFraction2 = yearFraction(dictEuclideanRing);
      return function(dictActusOps) {
        var _max2 = _max(dictActusOps);
        var _abs2 = _abs(dictActusOps);
        return function(v) {
          return function(st) {
            var pof = function(dictSemiring1) {
              return function(dictEuclideanRing1) {
                return function(dictActusOps1) {
                  return function(v1) {
                    return function(v2) {
                      return function(v3) {
                        return function(v4) {
                          if (v1 instanceof IED && (v3.notionalPrincipal instanceof Just && v3.premiumDiscountAtIED instanceof Just)) {
                            return negate3(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(add6(v3.notionalPrincipal.value0)(v3.premiumDiscountAtIED.value0)));
                          }
                          ;
                          if (v1 instanceof IED && v3.notionalPrincipal instanceof Just) {
                            return negate3(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(v3.notionalPrincipal.value0));
                          }
                          ;
                          if (v1 instanceof PR && v3.contractType instanceof LAM) {
                            var redemption = sub7(v4.prnxt)(mul6(sign4(v3.contractRole))(_max2(zero3)(sub7(_abs2(v4.prnxt))(_abs2(v4.nt)))));
                            return mul6(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(v4.nsc))(redemption);
                          }
                          ;
                          if (v1 instanceof PR && (v3.dayCountConvention instanceof Just && elem3(v3.contractType)([NAM.value, ANN.value]))) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            var ra = sub7(v4.prnxt)(mul6(sign4(v3.contractRole))(add6(v4.ipac)(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.ipcb))));
                            var r = sub7(ra)(_max2(zero3)(sub7(ra)(_abs2(v4.nt))));
                            return mul6(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(v4.nsc))(r);
                          }
                          ;
                          if (v1 instanceof MD) {
                            return mul6(v2.value0.o_rf_CURS)(add6(add6(mul6(v4.nsc)(v4.nt))(mul6(v4.isc)(v4.ipac)))(v4.feac));
                          }
                          ;
                          if (v1 instanceof PP) {
                            return mul6(v2.value0.o_rf_CURS)(v2.value0.pp_payoff);
                          }
                          ;
                          if (v1 instanceof PY && (v3.penaltyType instanceof Just && (v3.penaltyRate instanceof Just && v3.dayCountConvention instanceof Just))) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            if (v3.penaltyType.value0 instanceof PYTP_A) {
                              return mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(v3.penaltyRate.value0);
                            }
                            ;
                            if (v3.penaltyType.value0 instanceof PYTP_N) {
                              var c = mul6(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(timeFromLastEvent))(v4.nt);
                              return mul6(c)(v3.penaltyRate.value0);
                            }
                            ;
                            if (v3.penaltyType.value0 instanceof PYTP_I) {
                              var c = mul6(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(timeFromLastEvent))(v4.nt);
                              return mul6(c)(_max2(zero3)(sub7(v4.ipnr)(v2.value0.o_rf_RRMO)));
                            }
                            ;
                            if (v3.penaltyType.value0 instanceof PYTP_O) {
                              return mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(v3.penaltyRate.value0);
                            }
                            ;
                            throw new Error("Failed pattern match at Actus.Model.Payoff (line 189, column 7 - line 193, column 55): " + [v3.penaltyType.value0.constructor.name]);
                          }
                          ;
                          if (v1 instanceof FP && (v3.dayCountConvention instanceof Just && (v3.feeBasis instanceof Just && v3.feeRate instanceof Just))) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            if (v3.feeBasis.value0 instanceof FEB_A) {
                              return mul6(mul6(sign4(v3.contractRole))(v2.value0.o_rf_CURS))(v3.feeRate.value0);
                            }
                            ;
                            if (v3.feeBasis.value0 instanceof FEB_N) {
                              return mul6(mul6(mul6(mul6(v2.value0.o_rf_CURS)(v3.feeRate.value0))(timeFromLastEvent))(v4.nt))(v4.feac);
                            }
                            ;
                            throw new Error("Failed pattern match at Actus.Model.Payoff (line 220, column 7 - line 222, column 65): " + [v3.feeBasis.value0.constructor.name]);
                          }
                          ;
                          if (v1 instanceof PRD && (v3.contractType instanceof PAM && (v3.dayCountConvention instanceof Just && v3.priceAtPurchaseDate instanceof Just))) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            return negate3(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(add6(add6(v3.priceAtPurchaseDate.value0)(v4.ipac))(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.nt))));
                          }
                          ;
                          if (v1 instanceof PRD && (v3.dayCountConvention instanceof Just && v3.priceAtPurchaseDate instanceof Just)) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            return negate3(mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(add6(add6(v3.priceAtPurchaseDate.value0)(v4.ipac))(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.ipcb))));
                          }
                          ;
                          if (v1 instanceof TD && (v3.contractType instanceof PAM && (v3.dayCountConvention instanceof Just && v3.priceAtTerminationDate instanceof Just))) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            return mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(add6(add6(v3.priceAtTerminationDate.value0)(v4.ipac))(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.nt)));
                          }
                          ;
                          if (v1 instanceof TD && (v3.dayCountConvention instanceof Just && v3.priceAtTerminationDate instanceof Just)) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            return mul6(mul6(v2.value0.o_rf_CURS)(sign4(v3.contractRole)))(add6(add6(v3.priceAtTerminationDate.value0)(v4.ipac))(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.ipcb)));
                          }
                          ;
                          if (v1 instanceof IP && (v3.contractType instanceof PAM && v3.dayCountConvention instanceof Just)) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            return mul6(mul6(v2.value0.o_rf_CURS)(v4.isc))(add6(v4.ipac)(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.nt)));
                          }
                          ;
                          if (v1 instanceof IP && v3.dayCountConvention instanceof Just) {
                            var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(v4.sd)(v.value1)(v3.maturityDate);
                            return mul6(mul6(v2.value0.o_rf_CURS)(v4.isc))(add6(v4.ipac)(mul6(mul6(timeFromLastEvent)(v4.ipnr))(v4.ipcb)));
                          }
                          ;
                          return zero3;
                        };
                      };
                    };
                  };
                };
              };
            };
            var pof1 = pof(Semiring0)(dictEuclideanRing)(dictActusOps);
            return asks3(function(ctx) {
              return pof1(v.value0)(ctx.riskFactors(v.value0)(v.value1))(ctx.contractTerms)(st);
            });
          };
        };
      };
    };
  };

  // output/Actus.Utility.ANN.Annuity/index.js
  var singleton10 = /* @__PURE__ */ singleton(unfoldable1List);
  var foldl4 = /* @__PURE__ */ foldl(foldableList);
  var map27 = /* @__PURE__ */ map(functorList);
  var annuity = function(dictSemiring) {
    return function(dictEuclideanRing) {
      var Semiring0 = dictEuclideanRing.CommutativeRing0().Ring0().Semiring0();
      var add6 = add(Semiring0);
      var zero3 = zero(Semiring0);
      var mul6 = mul(Semiring0);
      var one2 = one(Semiring0);
      var div16 = div(dictEuclideanRing);
      return function(r) {
        return function(ti) {
          var tails = function(v) {
            if (v instanceof Nil) {
              return singleton10(Nil.value);
            }
            ;
            if (v instanceof Cons) {
              return new Cons(v, tails(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Actus.Utility.ANN.Annuity (line 23, column 3 - line 23, column 45): " + [v.constructor.name]);
          };
          var _sum = foldl4(add6)(zero3);
          var _product = foldl4(mul6)(one2);
          var denominator = _sum(map27(_product)(tails(map27(function($22) {
            return function(v) {
              return add6(v)(one2);
            }(function(v) {
              return mul6(v)(r);
            }($22));
          })(ti))));
          var numerator = _product(map27(function($23) {
            return function(v) {
              return add6(v)(one2);
            }(function(v) {
              return mul6(v)(r);
            }($23));
          })(ti));
          return div16(numerator)(denominator);
        };
      };
    };
  };

  // output/Actus.Model.StateInitialization/index.js
  var mempty6 = /* @__PURE__ */ mempty(monoidList);
  var sup3 = /* @__PURE__ */ sup2(ordDateTime);
  var inf3 = /* @__PURE__ */ inf(ordDateTime);
  var greaterThan5 = /* @__PURE__ */ greaterThan(ordDateTime);
  var lessThan5 = /* @__PURE__ */ lessThan(ordDateTime);
  var eq20 = /* @__PURE__ */ eq(eqIPCB);
  var asks4 = /* @__PURE__ */ asks(/* @__PURE__ */ monadAskReaderT(monadIdentity));
  var maybeToList2 = function(v) {
    if (v instanceof Just) {
      return singleton4(v.value0);
    }
    ;
    if (v instanceof Nothing) {
      return mempty6;
    }
    ;
    throw new Error("Failed pattern match at Actus.Model.StateInitialization (line 217, column 1 - line 217, column 43): " + [v.constructor.name]);
  };
  var append$prime2 = function(v) {
    return function(v1) {
      if (v instanceof Nil) {
        return v1;
      }
      ;
      if (v instanceof Cons) {
        return new Cons(v.value0, append$prime2(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Actus.Model.StateInitialization (line 211, column 1 - line 211, column 48): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var initializeState = function(dictEuclideanRing) {
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var one2 = one(Semiring0);
    var zero3 = zero(Semiring0);
    var mul6 = mul(Semiring0);
    var sign4 = sign3(Ring0);
    var div16 = div(dictEuclideanRing);
    var fromInt4 = fromInt3(Ring0);
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var add6 = add(Semiring0);
    var annuity2 = annuity(Semiring0)(dictEuclideanRing);
    var initializeState$prime = function(dictEuclideanRing1) {
      return function(ctx) {
        var tMinusFP = fromMaybe(ctx.contractTerms.statusDate)(sup3(ctx.fpSchedule)(ctx.contractTerms.statusDate));
        var tMinusIP = fromMaybe(ctx.contractTerms.statusDate)(sup3(ctx.ipSchedule)(ctx.contractTerms.statusDate));
        var tPlusFP = fromMaybe(ctx.contractTerms.statusDate)(inf3(ctx.fpSchedule)(ctx.contractTerms.statusDate));
        var scalingEffect_xNx = function(v) {
          if (v instanceof SE_ONO) {
            return true;
          }
          ;
          if (v instanceof SE_ONM) {
            return true;
          }
          ;
          if (v instanceof SE_INO) {
            return true;
          }
          ;
          if (v instanceof SE_INM) {
            return true;
          }
          ;
          return false;
        };
        var scalingEffect_Ixx = function(v) {
          if (v instanceof SE_INO) {
            return true;
          }
          ;
          if (v instanceof SE_INM) {
            return true;
          }
          ;
          if (v instanceof SE_IOO) {
            return true;
          }
          ;
          if (v instanceof SE_IOM) {
            return true;
          }
          ;
          return false;
        };
        var notionalScaling = function(v) {
          if (v.scalingEffect instanceof Just && (v.notionalScalingMultiplier instanceof Just && scalingEffect_xNx(v.scalingEffect.value0))) {
            return v.notionalScalingMultiplier.value0;
          }
          ;
          return one2;
        };
        var notionalPrincipal3 = function(v) {
          if (v.initialExchangeDate instanceof Just && greaterThan5(v.initialExchangeDate.value0)(ctx.contractTerms.statusDate)) {
            return zero3;
          }
          ;
          if (v.notionalPrincipal instanceof Just) {
            return mul6(sign4(v.contractRole))(v.notionalPrincipal.value0);
          }
          ;
          return zero3;
        };
        var nominalInterestRate = function(v) {
          if (v.initialExchangeDate instanceof Just && greaterThan5(v.initialExchangeDate.value0)(ctx.contractTerms.statusDate)) {
            return zero3;
          }
          ;
          if (v.nominalInterestRate instanceof Just) {
            return v.nominalInterestRate.value0;
          }
          ;
          return zero3;
        };
        var nextPrincipalRedemptionPayment3 = function(v) {
          if (v.contractType instanceof PAM) {
            return zero3;
          }
          ;
          if (v.nextPrincipalRedemptionPayment instanceof Just) {
            return v.nextPrincipalRedemptionPayment.value0;
          }
          ;
          if (v.contractType instanceof LAM && (v.nextPrincipalRedemptionPayment instanceof Nothing && (v.maturityDate instanceof Just && (v.notionalPrincipal instanceof Just && (v.cycleOfPrincipalRedemption instanceof Just && v.cycleAnchorDateOfPrincipalRedemption instanceof Just))))) {
            return div16(v.notionalPrincipal.value0)(fromInt4(length3(generateRecurrentSchedule(v.cycleAnchorDateOfPrincipalRedemption.value0)({
              n: v.cycleOfPrincipalRedemption.value0.n,
              p: v.cycleOfPrincipalRedemption.value0.p,
              stub: v.cycleOfPrincipalRedemption.value0.stub,
              includeEndDay: true
            })(v.maturityDate.value0)(v.scheduleConfig))));
          }
          ;
          if (v.contractType instanceof ANN && (v.nextPrincipalRedemptionPayment instanceof Nothing && (v.accruedInterest instanceof Just && (v.notionalPrincipal instanceof Just && (v.nominalInterestRate instanceof Just && v.dayCountConvention instanceof Just))))) {
            var prDates = append$prime2(ctx.prSchedule)(maybeToList2(ctx.maturity));
            var ti = zipWith2(function(tn) {
              return function(tm) {
                return yearFraction2(v.dayCountConvention.value0)(tn)(tm)(v.maturityDate);
              };
            })(prDates)(fromMaybe(Nil.value)(tail2(prDates)));
            var scale = add6(v.notionalPrincipal.value0)(v.accruedInterest.value0);
            var frac = annuity2(v.nominalInterestRate.value0)(ti);
            return mul6(frac)(scale);
          }
          ;
          return zero3;
        };
        var interestScaling = function(v) {
          if (v.scalingEffect instanceof Just && (v.interestScalingMultiplier instanceof Just && scalingEffect_Ixx(v.scalingEffect.value0))) {
            return v.interestScalingMultiplier.value0;
          }
          ;
          return one2;
        };
        var interestPaymentCalculationBase = function(v) {
          if (v.contractType instanceof LAM && (v.initialExchangeDate instanceof Just && lessThan5(ctx.contractTerms.statusDate)(v.initialExchangeDate.value0))) {
            return zero3;
          }
          ;
          if (v.notionalPrincipal instanceof Just && (v.interestCalculationBase instanceof Just && eq20(v.interestCalculationBase.value0)(IPCB_NT.value))) {
            return mul6(sign4(v.contractRole))(v.notionalPrincipal.value0);
          }
          ;
          if (v.interestCalculationBaseAmount instanceof Just) {
            return mul6(sign4(v.contractRole))(v.interestCalculationBaseAmount.value0);
          }
          ;
          return zero3;
        };
        var interestAccrued = function(v) {
          if (v.nominalInterestRate instanceof Nothing) {
            return zero3;
          }
          ;
          if (v.accruedInterest instanceof Just) {
            return v.accruedInterest.value0;
          }
          ;
          if (v.dayCountConvention instanceof Just) {
            var nt = notionalPrincipal3(ctx.contractTerms);
            var ipnr = nominalInterestRate(ctx.contractTerms);
            return mul6(mul6(yearFraction2(v.dayCountConvention.value0)(tMinusIP)(ctx.contractTerms.statusDate)(ctx.maturity))(nt))(ipnr);
          }
          ;
          return zero3;
        };
        var feeAccrued = function(v) {
          if (v.feeRate instanceof Nothing) {
            return zero3;
          }
          ;
          if (v.feeAccrued instanceof Just) {
            return v.feeAccrued.value0;
          }
          ;
          if (v.feeBasis instanceof Just && (v.feeBasis.value0 instanceof FEB_N && (v.dayCountConvention instanceof Just && (v.feeRate instanceof Just && v.notionalPrincipal instanceof Just)))) {
            return mul6(mul6(yearFraction2(v.dayCountConvention.value0)(tMinusFP)(ctx.contractTerms.statusDate)(v.maturityDate))(v.notionalPrincipal.value0))(v.feeRate.value0);
          }
          ;
          if (v.dayCountConvention instanceof Just && v.feeRate instanceof Just) {
            return mul6(div16(yearFraction2(v.dayCountConvention.value0)(tMinusFP)(ctx.contractTerms.statusDate)(v.maturityDate))(yearFraction2(v.dayCountConvention.value0)(tMinusFP)(tPlusFP)(v.maturityDate)))(v.feeRate.value0);
          }
          ;
          return zero3;
        };
        var contractPerformance = function(v) {
          if (v.contractPerformance instanceof Just) {
            return v.contractPerformance.value0;
          }
          ;
          return PRF_PF.value;
        };
        return {
          sd: ctx.contractTerms.statusDate,
          prnxt: nextPrincipalRedemptionPayment3(ctx.contractTerms),
          ipcb: interestPaymentCalculationBase(ctx.contractTerms),
          tmd: ctx.maturity,
          nt: notionalPrincipal3(ctx.contractTerms),
          ipnr: nominalInterestRate(ctx.contractTerms),
          ipac: interestAccrued(ctx.contractTerms),
          ipla: Nothing.value,
          feac: feeAccrued(ctx.contractTerms),
          nsc: notionalScaling(ctx.contractTerms),
          isc: interestScaling(ctx.contractTerms),
          prf: contractPerformance(ctx.contractTerms)
        };
      };
    };
    return asks4(initializeState$prime(dictEuclideanRing));
  };

  // output/Data.Lens.Getter/index.js
  var unwrap5 = /* @__PURE__ */ unwrap();
  var identity17 = /* @__PURE__ */ identity(categoryFn);
  var view = function(l) {
    return unwrap5(l(identity17));
  };
  var viewOn = function(s2) {
    return function(l) {
      return view(l)(s2);
    };
  };

  // output/Data.Lens.Setter/index.js
  var over4 = function(l) {
    return l;
  };
  var set2 = function(l) {
    return function(b2) {
      return over4(l)($$const(b2));
    };
  };
  var subOver = function(dictRing) {
    var sub7 = sub(dictRing);
    return function(p2) {
      var $61 = over4(p2);
      var $62 = flip(sub7);
      return function($63) {
        return $61($62($63));
      };
    };
  };
  var addOver = function(dictSemiring) {
    var add6 = add(dictSemiring);
    return function(p2) {
      var $99 = over4(p2);
      return function($100) {
        return $99(add6($100));
      };
    };
  };

  // output/Actus.Model.StateTransition/index.js
  var mempty7 = /* @__PURE__ */ mempty(monoidList);
  var statusDate2 = /* @__PURE__ */ statusDate(strongFn);
  var nominalInterest2 = /* @__PURE__ */ nominalInterest(strongFn);
  var accruedFees2 = /* @__PURE__ */ accruedFees(strongFn);
  var accruedInterest2 = /* @__PURE__ */ accruedInterest(strongFn);
  var notionalPrincipal2 = /* @__PURE__ */ notionalPrincipal(strongFn);
  var statusDate1 = /* @__PURE__ */ statusDate(strongForget);
  var nominalInterest1 = /* @__PURE__ */ nominalInterest(strongForget);
  var accruedInterest1 = /* @__PURE__ */ accruedInterest(strongForget);
  var interestCalculationBase2 = /* @__PURE__ */ interestCalculationBase(strongForget);
  var accruedFees1 = /* @__PURE__ */ accruedFees(strongForget);
  var notionalPrincipal1 = /* @__PURE__ */ notionalPrincipal(strongForget);
  var nextPrincipalRedemptionPayment2 = /* @__PURE__ */ nextPrincipalRedemptionPayment(strongFn);
  var eq21 = /* @__PURE__ */ eq(eqDateTime);
  var notionalScalingMultiplier2 = /* @__PURE__ */ notionalScalingMultiplier(strongForget);
  var interestScalingMultiplier2 = /* @__PURE__ */ interestScalingMultiplier(strongForget);
  var interestScalingMultiplier1 = /* @__PURE__ */ interestScalingMultiplier(strongFn);
  var notionalScalingMultiplier1 = /* @__PURE__ */ notionalScalingMultiplier(strongFn);
  var show19 = /* @__PURE__ */ show(showSCEF);
  var nextPrincipalRedemptionPayment1 = /* @__PURE__ */ nextPrincipalRedemptionPayment(strongForget);
  var interestCalculationBase1 = /* @__PURE__ */ interestCalculationBase(strongFn);
  var lessThan6 = /* @__PURE__ */ lessThan(ordDateTime);
  var greaterThan6 = /* @__PURE__ */ greaterThan(ordDateTime);
  var inf4 = /* @__PURE__ */ inf(ordDateTime);
  var sup4 = /* @__PURE__ */ sup2(ordDateTime);
  var asks5 = /* @__PURE__ */ asks(/* @__PURE__ */ monadAskReaderT(monadIdentity));
  var PrincipalRedemptionSchedule = /* @__PURE__ */ function() {
    function PrincipalRedemptionSchedule2(value0) {
      this.value0 = value0;
    }
    ;
    PrincipalRedemptionSchedule2.create = function(value0) {
      return new PrincipalRedemptionSchedule2(value0);
    };
    return PrincipalRedemptionSchedule2;
  }();
  var FeeSchedule = /* @__PURE__ */ function() {
    function FeeSchedule2(value0) {
      this.value0 = value0;
    }
    ;
    FeeSchedule2.create = function(value0) {
      return new FeeSchedule2(value0);
    };
    return FeeSchedule2;
  }();
  var thisOr0 = function(dictRing) {
    return fromMaybe(zero(dictRing.Semiring0()));
  };
  var maybeToList3 = function(v) {
    if (v instanceof Just) {
      return singleton4(v.value0);
    }
    ;
    if (v instanceof Nothing) {
      return mempty7;
    }
    ;
    throw new Error("Failed pattern match at Actus.Model.StateTransition (line 146, column 1 - line 146, column 43): " + [v.constructor.name]);
  };
  var append$prime3 = function(v) {
    return function(v1) {
      if (v instanceof Nil) {
        return v1;
      }
      ;
      if (v instanceof Cons) {
        return new Cons(v.value0, append$prime3(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Actus.Model.StateTransition (line 140, column 1 - line 140, column 48): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var _STF_TD_ALL = function(dictRing) {
    var zero3 = zero(dictRing.Semiring0());
    return function(v) {
      return function(t) {
        return set2(statusDate2)(t)(set2(nominalInterest2)(zero3)(set2(accruedFees2)(zero3)(set2(accruedInterest2)(zero3)(set2(notionalPrincipal2)(zero3)(v)))));
      };
    };
  };
  var _STF_RR_ANN = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var sub7 = sub(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var annuity2 = annuity(Semiring0)(dictEuclideanRing);
    var thisOr01 = thisOr0(Ring0);
    var div16 = div(dictEuclideanRing);
    var sign4 = sign3(Ring0);
    return function(dictActusOps) {
      var _min2 = _min(dictActusOps);
      var _max2 = _max(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                return function(v5) {
                  if (v3.dayCountConvention instanceof Just && (v3.lifeFloor instanceof Just && (v3.lifeCap instanceof Just && (v3.periodCap instanceof Just && (v3.periodFloor instanceof Just && (v3.rateMultiplier instanceof Just && v3.rateSpread instanceof Just)))))) {
                    var timeFromLatestToNextFeePayment = yearFraction2(v3.dayCountConvention.value0)(v1.value0.latestFeePayment)(v1.value0.nextFeePayment)(v3.maturityDate);
                    var timeFromLatestFeePayment = yearFraction2(v3.dayCountConvention.value0)(v1.value0.latestFeePayment)(v5)(v3.maturityDate);
                    var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(viewOn(v4)(statusDate1))(v5)(v3.maturityDate);
                    var ti = zipWith2(function(tn) {
                      return function(tm) {
                        return yearFraction2(v3.dayCountConvention.value0)(tn)(tm)(v3.maturityDate);
                      };
                    })(v.value0.laterPrincipalRedemptionDates)(fromMaybe(Nil.value)(tail2(v.value0.laterPrincipalRedemptionDates)));
                    var ipnr$prime = function() {
                      var delta_r = _min2(_max2(sub7(add6(mul6(v2.value0.o_rf_RRMO)(v3.rateMultiplier.value0))(v3.rateSpread.value0))(viewOn(v4)(nominalInterest1)))(v3.periodFloor.value0))(v3.periodCap.value0);
                      return _min2(_max2(add6(viewOn(v4)(nominalInterest1))(delta_r))(v3.lifeFloor.value0))(v3.lifeCap.value0);
                    }();
                    var prnxt$prime = annuity2(ipnr$prime)(ti);
                    var ipac$prime = add6(viewOn(v4)(accruedInterest1))(mul6(mul6(timeFromLastEvent)(viewOn(v4)(nominalInterest1)))(viewOn(v4)(interestCalculationBase2)));
                    var feac$prime = function() {
                      var feeAccrued$prime = function(v6) {
                        if (v6.feeBasis instanceof Just && v6.feeBasis.value0 instanceof FEB_N) {
                          return add6(viewOn(v4)(accruedFees1))(mul6(mul6(timeFromLastEvent)(viewOn(v4)(notionalPrincipal1)))(thisOr01(v3.feeRate)));
                        }
                        ;
                        return mul6(mul6(div16(timeFromLatestFeePayment)(timeFromLatestToNextFeePayment))(sign4(v3.contractRole)))(thisOr01(v3.feeRate));
                      };
                      return feeAccrued$prime(v3);
                    }();
                    return set2(statusDate2)(v5)(set2(nextPrincipalRedemptionPayment2)(prnxt$prime)(set2(nominalInterest2)(ipnr$prime)(set2(accruedFees2)(feac$prime)(set2(accruedInterest2)(ipac$prime)(v4)))));
                  }
                  ;
                  return v4;
                };
              };
            };
          };
        };
      };
    };
  };
  var _STF_RRF_ANN = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var annuity2 = annuity(Semiring0)(dictEuclideanRing);
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var thisOr01 = thisOr0(Ring0);
    var div16 = div(dictEuclideanRing);
    var sign4 = sign3(Ring0);
    return function(v) {
      return function(v1) {
        return function(v2) {
          return function(v3) {
            return function(v4) {
              return function(v5) {
                if (v3.dayCountConvention instanceof Just && v3.nextResetRate instanceof Just) {
                  var timeFromLatestToNextFeePayment = yearFraction2(v3.dayCountConvention.value0)(v1.value0.latestFeePayment)(v1.value0.nextFeePayment)(v3.maturityDate);
                  var timeFromLatestFeePayment = yearFraction2(v3.dayCountConvention.value0)(v1.value0.latestFeePayment)(v5)(v3.maturityDate);
                  var timeFromLastEvent = yearFraction2(v3.dayCountConvention.value0)(viewOn(v4)(statusDate1))(v5)(v3.maturityDate);
                  var ti = zipWith2(function(tn) {
                    return function(tm) {
                      return yearFraction2(v3.dayCountConvention.value0)(tn)(tm)(v3.maturityDate);
                    };
                  })(v.value0.laterPrincipalRedemptionDates)(fromMaybe(Nil.value)(tail2(v.value0.laterPrincipalRedemptionDates)));
                  var prnxt$prime = annuity2(v3.nextResetRate.value0)(ti);
                  var ipac$prime = add6(viewOn(v4)(accruedInterest1))(mul6(mul6(timeFromLastEvent)(viewOn(v4)(nominalInterest1)))(viewOn(v4)(interestCalculationBase2)));
                  var feac$prime = function() {
                    var feeAccrued$prime = function(v6) {
                      if (v6.feeBasis instanceof Just && v6.feeBasis.value0 instanceof FEB_N) {
                        return add6(viewOn(v4)(accruedFees1))(mul6(mul6(timeFromLastEvent)(viewOn(v4)(notionalPrincipal1)))(thisOr01(v3.feeRate)));
                      }
                      ;
                      return mul6(mul6(div16(timeFromLatestFeePayment)(timeFromLatestToNextFeePayment))(sign4(v3.contractRole)))(thisOr01(v3.feeRate));
                    };
                    return feeAccrued$prime(v3);
                  }();
                  return set2(statusDate2)(v5)(set2(nextPrincipalRedemptionPayment2)(prnxt$prime)(set2(nominalInterest2)(v3.nextResetRate.value0)(set2(accruedFees2)(feac$prime)(set2(accruedInterest2)(ipac$prime)(v4)))));
                }
                ;
                return v4;
              };
            };
          };
        };
      };
    };
  };
  var _STF_PY_PAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var addOver2 = addOver(Semiring0);
    var mul6 = mul(Semiring0);
    var zero3 = zero(Semiring0);
    var div16 = div(dictEuclideanRing);
    var sign4 = sign3(Ring0);
    return function(dictActusOps) {
      var _max2 = _max(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              if (v1.dayCountConvention instanceof Just && (v1.notionalPrincipal instanceof Just && (v1.feeBasis instanceof Just && (v1.feeBasis.value0 instanceof FEB_N && v1.feeRate instanceof Just)))) {
                var timeFromLastEvent = yearFraction2(v1.dayCountConvention.value0)(viewOn(v2)(statusDate1))(v3)(v1.maturityDate);
                return set2(statusDate2)(v3)(addOver2(accruedFees2)(mul6(mul6(timeFromLastEvent)(v1.feeRate.value0))(v1.notionalPrincipal.value0))(addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v2)(nominalInterest1)))(viewOn(v2)(notionalPrincipal1)))(v2)));
              }
              ;
              if (v1.dayCountConvention instanceof Just && v1.feeRate instanceof Just) {
                var timeFromLatestToNextFeePayment = yearFraction2(v1.dayCountConvention.value0)(v.value0.latestFeePayment)(v.value0.nextFeePayment)(v1.maturityDate);
                var timeFromLatestFeePayment = yearFraction2(v1.dayCountConvention.value0)(v.value0.latestFeePayment)(v3)(v1.maturityDate);
                var timeFromLastEvent = yearFraction2(v1.dayCountConvention.value0)(viewOn(v2)(statusDate1))(v3)(v1.maturityDate);
                return set2(statusDate2)(v3)(set2(accruedFees2)(mul6(mul6(_max2(zero3)(div16(timeFromLatestFeePayment)(timeFromLatestToNextFeePayment)))(sign4(v1.contractRole)))(v1.feeRate.value0))(addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v2)(nominalInterest1)))(viewOn(v2)(notionalPrincipal1)))(v2)));
              }
              ;
              return v2;
            };
          };
        };
      };
    };
  };
  var _STF_RRF_PAM = function(dictEuclideanRing) {
    var _STF_PY_PAM1 = _STF_PY_PAM(dictEuclideanRing);
    var thisOr01 = thisOr0(dictEuclideanRing.CommutativeRing0().Ring0());
    return function(dictActusOps) {
      var _STF_PY_PAM2 = _STF_PY_PAM1(dictActusOps);
      return function(fs) {
        return function(v) {
          return function(v1) {
            return function(s2) {
              return function(t) {
                var v2 = _STF_PY_PAM2(fs)(v1)(s2)(t);
                return set2(nominalInterest2)(thisOr01(v1.nextResetRate))(v2);
              };
            };
          };
        };
      };
    };
  };
  var _STF_RR_PAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var sub7 = sub(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var _STF_PY_PAM1 = _STF_PY_PAM(dictEuclideanRing);
    var zero3 = zero(Semiring0);
    var div16 = div(dictEuclideanRing);
    var sign4 = sign3(Ring0);
    return function(dictActusOps) {
      var _min2 = _min(dictActusOps);
      var _max2 = _max(dictActusOps);
      var _STF_PY_PAM2 = _STF_PY_PAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                if (v2.feeBasis instanceof Just && (v2.feeBasis.value0 instanceof FEB_N && (v2.feeRate instanceof Just && (v2.lifeFloor instanceof Just && (v2.lifeCap instanceof Just && (v2.periodCap instanceof Just && (v2.periodFloor instanceof Just && (v2.rateMultiplier instanceof Just && (v2.rateSpread instanceof Just && v2.dayCountConvention instanceof Just))))))))) {
                  var timeFromLastEvent = yearFraction2(v2.dayCountConvention.value0)(viewOn(v3)(statusDate1))(v4)(v2.maturityDate);
                  var delta_r = _min2(_max2(sub7(add6(mul6(v1.value0.o_rf_RRMO)(v2.rateMultiplier.value0))(v2.rateSpread.value0))(viewOn(v3)(nominalInterest1)))(v2.periodFloor.value0))(v2.periodCap.value0);
                  var ipnr$prime = _min2(_max2(add6(viewOn(v3)(nominalInterest1))(delta_r))(v2.lifeFloor.value0))(v2.lifeCap.value0);
                  var v5 = _STF_PY_PAM2(v)(v2)(v3)(v4);
                  return set2(statusDate2)(v4)(set2(nominalInterest2)(ipnr$prime)(set2(accruedFees2)(add6(viewOn(v3)(accruedFees1))(mul6(mul6(timeFromLastEvent)(v2.feeRate.value0))(viewOn(v3)(notionalPrincipal1))))(set2(accruedInterest2)(add6(viewOn(v3)(accruedInterest1))(mul6(mul6(timeFromLastEvent)(viewOn(v3)(nominalInterest1)))(viewOn(v3)(notionalPrincipal1))))(v5))));
                }
                ;
                if (v2.feeRate instanceof Just && (v2.lifeFloor instanceof Just && (v2.lifeCap instanceof Just && (v2.periodCap instanceof Just && (v2.periodFloor instanceof Just && (v2.rateMultiplier instanceof Just && (v2.rateSpread instanceof Just && v2.dayCountConvention instanceof Just))))))) {
                  var timeFromLatestToNextFeePayment = yearFraction2(v2.dayCountConvention.value0)(v.value0.latestFeePayment)(v.value0.nextFeePayment)(v2.maturityDate);
                  var timeFromLatestFeePayment = yearFraction2(v2.dayCountConvention.value0)(v.value0.latestFeePayment)(v4)(v2.maturityDate);
                  var timeFromLastEvent = yearFraction2(v2.dayCountConvention.value0)(viewOn(v3)(statusDate1))(v4)(v2.maturityDate);
                  var delta_r = _min2(_max2(sub7(add6(mul6(v1.value0.o_rf_RRMO)(v2.rateMultiplier.value0))(v2.rateSpread.value0))(viewOn(v3)(nominalInterest1)))(v2.periodFloor.value0))(v2.periodCap.value0);
                  var ipnr$prime = _min2(_max2(add6(viewOn(v3)(nominalInterest1))(delta_r))(v2.lifeFloor.value0))(v2.lifeCap.value0);
                  var v5 = _STF_PY_PAM2(v)(v2)(v3)(v4);
                  return set2(statusDate2)(v4)(set2(nominalInterest2)(ipnr$prime)(set2(accruedFees2)(function() {
                    var $561 = eq21(v.value0.latestFeePayment)(v.value0.nextFeePayment);
                    if ($561) {
                      return zero3;
                    }
                    ;
                    return mul6(mul6(div16(timeFromLatestFeePayment)(timeFromLatestToNextFeePayment))(sign4(v2.contractRole)))(v2.feeRate.value0);
                  }())(set2(accruedInterest2)(add6(viewOn(v3)(accruedInterest1))(mul6(mul6(timeFromLastEvent)(viewOn(v3)(nominalInterest1)))(viewOn(v3)(notionalPrincipal1))))(v5))));
                }
                ;
                return v3;
              };
            };
          };
        };
      };
    };
  };
  var _STF_SC_PAM = function(dictEuclideanRing) {
    var div16 = div(dictEuclideanRing);
    var sub7 = sub(dictEuclideanRing.CommutativeRing0().Ring0());
    var _STF_PY_PAM1 = _STF_PY_PAM(dictEuclideanRing);
    return function(dictActusOps) {
      var _STF_PY_PAM2 = _STF_PY_PAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                if (v2.scalingEffect instanceof Just && v2.scalingIndexAtStatusDate instanceof Just) {
                  var nsc$prime = function() {
                    if (v2.scalingEffect.value0 instanceof SE_OOM) {
                      return viewOn(v3)(notionalScalingMultiplier2);
                    }
                    ;
                    if (v2.scalingEffect.value0 instanceof SE_IOO) {
                      return viewOn(v3)(notionalScalingMultiplier2);
                    }
                    ;
                    return div16(sub7(v1.value0.o_rf_SCMO)(v2.scalingIndexAtStatusDate.value0))(v2.scalingIndexAtStatusDate.value0);
                  }();
                  var isc$prime = function() {
                    if (v2.scalingEffect.value0 instanceof SE_ONO) {
                      return viewOn(v3)(interestScalingMultiplier2);
                    }
                    ;
                    if (v2.scalingEffect.value0 instanceof SE_OOM) {
                      return viewOn(v3)(interestScalingMultiplier2);
                    }
                    ;
                    if (v2.scalingEffect.value0 instanceof SE_ONM) {
                      return viewOn(v3)(interestScalingMultiplier2);
                    }
                    ;
                    return div16(sub7(v1.value0.o_rf_SCMO)(v2.scalingIndexAtStatusDate.value0))(v2.scalingIndexAtStatusDate.value0);
                  }();
                  var v5 = _STF_PY_PAM2(v)(v2)(v3)(v4);
                  return set2(interestScalingMultiplier1)(isc$prime)(set2(notionalScalingMultiplier1)(nsc$prime)(v5));
                }
                ;
                return v3;
              };
            };
          };
        };
      };
    };
  };
  var _STF_PY_LAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var div16 = div(dictEuclideanRing);
    var sign4 = sign3(Ring0);
    var addOver2 = addOver(Semiring0);
    var zero3 = zero(Semiring0);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              if (v1.feeRate instanceof Just && v1.dayCountConvention instanceof Just) {
                var timeFromLastEvent = yearFraction2(v1.dayCountConvention.value0)(viewOn(v2)(statusDate1))(v3)(v1.maturityDate);
                var feac$prime = function() {
                  var feeAccrued$prime = function(v4) {
                    if (v4.feeBasis instanceof Just && v4.feeBasis.value0 instanceof FEB_N) {
                      return add6(viewOn(v2)(accruedFees1))(mul6(mul6(timeFromLastEvent)(viewOn(v2)(notionalPrincipal1)))(v1.feeRate.value0));
                    }
                    ;
                    var timeFromLatestToNextFeePayment = yearFraction2(v1.dayCountConvention.value0)(v.value0.latestFeePayment)(v.value0.nextFeePayment)(v1.maturityDate);
                    var timeFromLatestFeePayment = yearFraction2(v1.dayCountConvention.value0)(v.value0.latestFeePayment)(v3)(v1.maturityDate);
                    return mul6(mul6(div16(timeFromLatestFeePayment)(timeFromLatestToNextFeePayment))(sign4(v1.contractRole)))(v1.feeRate.value0);
                  };
                  return feeAccrued$prime(v1);
                }();
                return set2(statusDate2)(v3)(set2(accruedFees2)(feac$prime)(addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v2)(nominalInterest1)))(viewOn(v2)(interestCalculationBase2)))(v2)));
              }
              ;
              if (v1.dayCountConvention instanceof Just) {
                var timeFromLastEvent = yearFraction2(v1.dayCountConvention.value0)(viewOn(v2)(statusDate1))(v3)(v1.maturityDate);
                var feac$prime = function() {
                  var feeAccrued$prime = function(v4) {
                    if (v4.feeBasis instanceof Just && v4.feeBasis.value0 instanceof FEB_N) {
                      return viewOn(v2)(accruedFees1);
                    }
                    ;
                    return zero3;
                  };
                  return feeAccrued$prime(v1);
                }();
                return set2(statusDate2)(v3)(set2(accruedFees2)(feac$prime)(addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v2)(nominalInterest1)))(viewOn(v2)(interestCalculationBase2)))(v2)));
              }
              ;
              return v2;
            };
          };
        };
      };
    };
  };
  var _STF_RRF_LAM = function(dictEuclideanRing) {
    var _STF_PY_LAM1 = _STF_PY_LAM(dictEuclideanRing);
    var thisOr01 = thisOr0(dictEuclideanRing.CommutativeRing0().Ring0());
    return function(dictActusOps) {
      var _STF_PY_LAM2 = _STF_PY_LAM1(dictActusOps);
      return function(fs) {
        return function(v) {
          return function(v1) {
            return function(s2) {
              return function(t) {
                var v2 = _STF_PY_LAM2(fs)(v1)(s2)(t);
                return set2(nominalInterest2)(thisOr01(v1.nextResetRate))(v2);
              };
            };
          };
        };
      };
    };
  };
  var _STF_RR_LAM = function(dictEuclideanRing) {
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var sub7 = sub(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var _STF_PY_LAM1 = _STF_PY_LAM(dictEuclideanRing);
    return function(dictActusOps) {
      var _min2 = _min(dictActusOps);
      var _max2 = _max(dictActusOps);
      var _STF_PY_LAM2 = _STF_PY_LAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                if (v2.lifeFloor instanceof Just && (v2.lifeCap instanceof Just && (v2.periodCap instanceof Just && (v2.periodFloor instanceof Just && (v2.rateMultiplier instanceof Just && v2.rateSpread instanceof Just))))) {
                  var delta_r = _min2(_max2(sub7(add6(mul6(v1.value0.o_rf_RRMO)(v2.rateMultiplier.value0))(v2.rateSpread.value0))(viewOn(v3)(nominalInterest1)))(v2.periodFloor.value0))(v2.periodCap.value0);
                  var ipnr$prime = _min2(_max2(add6(viewOn(v3)(nominalInterest1))(delta_r))(v2.lifeFloor.value0))(v2.lifeCap.value0);
                  var v5 = _STF_PY_LAM2(v)(v2)(v3)(v4);
                  return set2(statusDate2)(v4)(set2(nominalInterest2)(ipnr$prime)(v5));
                }
                ;
                return v3;
              };
            };
          };
        };
      };
    };
  };
  var _STF_SC_LAM = function(dictEuclideanRing) {
    var _STF_PY_LAM1 = _STF_PY_LAM(dictEuclideanRing);
    var div16 = div(dictEuclideanRing);
    return function(dictActusOps) {
      var _STF_PY_LAM2 = _STF_PY_LAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                if (v2.scalingIndexAtContractDealDate instanceof Just && v2.scalingEffect instanceof Just) {
                  var v5 = _STF_PY_LAM2(v)(v2)(v3)(v4);
                  return set2(interestScalingMultiplier1)(function() {
                    var $650 = contains("I")(show19(v2.scalingEffect.value0));
                    if ($650) {
                      return div16(v1.value0.o_rf_SCMO)(v2.scalingIndexAtContractDealDate.value0);
                    }
                    ;
                    return viewOn(v3)(interestScalingMultiplier2);
                  }())(set2(notionalScalingMultiplier1)(function() {
                    var $651 = contains("N")(show19(v2.scalingEffect.value0));
                    if ($651) {
                      return div16(v1.value0.o_rf_SCMO)(v2.scalingIndexAtContractDealDate.value0);
                    }
                    ;
                    return viewOn(v3)(notionalScalingMultiplier2);
                  }())(v5));
                }
                ;
                return v3;
              };
            };
          };
        };
      };
    };
  };
  var _STF_PR_NAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var sub7 = sub(Ring0);
    var sign4 = sign3(Ring0);
    var zero3 = zero(Semiring0);
    var addOver2 = addOver(Semiring0);
    var thisOr01 = thisOr0(Ring0);
    return function(dictActusOps) {
      var _max2 = _max(dictActusOps);
      var _abs2 = _abs(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              var ipac$prime = add6(viewOn(v1)(accruedInterest1))(mul6(mul6(viewOn(v1)(nominalInterest1))(viewOn(v1)(interestCalculationBase2)))(timeFromLastEvent));
              var nt$prime = function() {
                var ra = sub7(viewOn(v1)(nextPrincipalRedemptionPayment1))(mul6(sign4(v.contractRole))(ipac$prime));
                var r = sub7(ra)(_max2(zero3)(sub7(ra)(_abs2(viewOn(v1)(notionalPrincipal1)))));
                return sub7(viewOn(v1)(notionalPrincipal1))(mul6(sign4(v.contractRole))(r));
              }();
              var ipcb$prime = function() {
                var interestCalculationBase$prime = function(v3) {
                  if (v3.interestCalculationBase instanceof Just && v3.interestCalculationBase.value0 instanceof IPCB_NT) {
                    return nt$prime;
                  }
                  ;
                  return viewOn(v1)(interestCalculationBase2);
                };
                return interestCalculationBase$prime(v);
              }();
              return set2(statusDate2)(v2)(set2(accruedInterest2)(ipac$prime)(set2(interestCalculationBase1)(ipcb$prime)(addOver2(accruedFees2)(mul6(mul6(timeFromLastEvent)(viewOn(v1)(notionalPrincipal1)))(thisOr01(v.feeRate)))(set2(notionalPrincipal2)(nt$prime)(v1)))));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_PR_LAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var sub7 = sub(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var mul6 = mul(Semiring0);
    var sign4 = sign3(Ring0);
    var zero3 = zero(Semiring0);
    var addOver2 = addOver(Semiring0);
    var thisOr01 = thisOr0(Ring0);
    return function(dictActusOps) {
      var _max2 = _max(dictActusOps);
      var _abs2 = _abs(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              var nt$prime = sub7(viewOn(v1)(notionalPrincipal1))(mul6(sign4(v.contractRole))(sub7(viewOn(v1)(nextPrincipalRedemptionPayment1))(mul6(sign4(v.contractRole))(_max2(zero3)(sub7(_abs2(viewOn(v1)(nextPrincipalRedemptionPayment1)))(_abs2(viewOn(v1)(notionalPrincipal1))))))));
              var ipcb$prime = function() {
                var interestCalculationBase$prime = function(v3) {
                  if (v3.interestCalculationBase instanceof Just && v3.interestCalculationBase.value0 instanceof IPCB_NTL) {
                    return viewOn(v1)(interestCalculationBase2);
                  }
                  ;
                  return nt$prime;
                };
                return interestCalculationBase$prime(v);
              }();
              return set2(statusDate2)(v2)(addOver2(accruedInterest2)(mul6(mul6(viewOn(v1)(nominalInterest1))(viewOn(v1)(interestCalculationBase2)))(timeFromLastEvent))(set2(interestCalculationBase1)(ipcb$prime)(addOver2(accruedFees2)(mul6(mul6(timeFromLastEvent)(viewOn(v1)(notionalPrincipal1)))(thisOr01(v.feeRate)))(set2(notionalPrincipal2)(nt$prime)(v1)))));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_PRF_ANN = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var annuity2 = annuity(Semiring0)(dictEuclideanRing);
    var sign4 = sign3(Ring0);
    var thisOr01 = thisOr0(Ring0);
    var div16 = div(dictEuclideanRing);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                if (v2.dayCountConvention instanceof Just) {
                  var timeToNextPrincipalRedemption = yearFraction2(v2.dayCountConvention.value0)(v4)(v.value0.nextPrincipalRedemption)(v2.maturityDate);
                  var timeFromLatestToNextFeePayment = yearFraction2(v2.dayCountConvention.value0)(v1.value0.latestFeePayment)(v1.value0.nextFeePayment)(v2.maturityDate);
                  var timeFromLatestFeePayment = yearFraction2(v2.dayCountConvention.value0)(v1.value0.latestFeePayment)(v4)(v2.maturityDate);
                  var timeFromLastEvent = yearFraction2(v2.dayCountConvention.value0)(viewOn(v3)(statusDate1))(v4)(v2.maturityDate);
                  var ti = zipWith2(function(tn) {
                    return function(tm) {
                      return yearFraction2(v2.dayCountConvention.value0)(tn)(tm)(v2.maturityDate);
                    };
                  })(v.value0.laterPrincipalRedemptionDates)(fromMaybe(Nil.value)(tail2(v.value0.laterPrincipalRedemptionDates)));
                  var ipac$prime = add6(viewOn(v3)(accruedInterest1))(mul6(mul6(timeFromLastEvent)(viewOn(v3)(nominalInterest1)))(viewOn(v3)(interestCalculationBase2)));
                  var prnxt$prime = function() {
                    var scale = add6(add6(viewOn(v3)(notionalPrincipal1))(ipac$prime))(mul6(mul6(timeToNextPrincipalRedemption)(viewOn(v3)(nominalInterest1)))(viewOn(v3)(notionalPrincipal1)));
                    var frac = annuity2(viewOn(v3)(nominalInterest1))(ti);
                    return mul6(mul6(sign4(v2.contractRole))(frac))(scale);
                  }();
                  var feac$prime = function() {
                    var feeAccrued$prime = function(v5) {
                      if (v5.feeBasis instanceof Just && v5.feeBasis.value0 instanceof FEB_N) {
                        return add6(viewOn(v3)(accruedFees1))(mul6(mul6(timeFromLastEvent)(viewOn(v3)(notionalPrincipal1)))(thisOr01(v2.feeRate)));
                      }
                      ;
                      return mul6(mul6(div16(timeFromLatestFeePayment)(timeFromLatestToNextFeePayment))(sign4(v2.contractRole)))(thisOr01(v2.feeRate));
                    };
                    return feeAccrued$prime(v2);
                  }();
                  return set2(statusDate2)(v4)(set2(nextPrincipalRedemptionPayment2)(prnxt$prime)(set2(accruedFees2)(feac$prime)(set2(accruedInterest2)(ipac$prime)(v3))));
                }
                ;
                return v3;
              };
            };
          };
        };
      };
    };
  };
  var _STF_PP_PAM = function(dictEuclideanRing) {
    var _STF_PY_PAM1 = _STF_PY_PAM(dictEuclideanRing);
    var subOver2 = subOver(dictEuclideanRing.CommutativeRing0().Ring0());
    return function(dictActusOps) {
      var _STF_PY_PAM2 = _STF_PY_PAM1(dictActusOps);
      return function(fs) {
        return function(v) {
          return function(ct) {
            return function(s2) {
              return function(t) {
                var v1 = _STF_PY_PAM2(fs)(ct)(s2)(t);
                return subOver2(notionalPrincipal2)(v.value0.pp_payoff)(v1);
              };
            };
          };
        };
      };
    };
  };
  var _STF_PP_LAM = function(dictEuclideanRing) {
    var _STF_PY_PAM1 = _STF_PY_PAM(dictEuclideanRing);
    var sub7 = sub(dictEuclideanRing.CommutativeRing0().Ring0());
    return function(dictActusOps) {
      var _STF_PY_PAM2 = _STF_PY_PAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return function(v4) {
                if (v2.interestCalculationBase instanceof Just && v2.interestCalculationBase.value0 instanceof IPCB_NT) {
                  var v5 = _STF_PY_PAM2(v)(v2)(v3)(v4);
                  return set2(interestCalculationBase1)(viewOn(v3)(notionalPrincipal1))(set2(notionalPrincipal2)(sub7(viewOn(v3)(notionalPrincipal1))(v1.value0.pp_payoff))(v5));
                }
                ;
                var v5 = _STF_PY_PAM2(v)(v2)(v3)(v4);
                return set2(interestCalculationBase1)(viewOn(v3)(interestCalculationBase2))(set2(notionalPrincipal2)(sub7(viewOn(v3)(notionalPrincipal1))(v1.value0.pp_payoff))(v5));
              };
            };
          };
        };
      };
    };
  };
  var _STF_MD_ALL = function(dictRing) {
    var zero3 = zero(dictRing.Semiring0());
    return function(v) {
      return function(v1) {
        return function(t) {
          return set2(statusDate2)(t)(set2(accruedFees2)(zero3)(set2(accruedInterest2)(zero3)(set2(notionalPrincipal2)(zero3)(v1))));
        };
      };
    };
  };
  var _STF_IP_PAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var mul6 = mul(Semiring0);
    var thisOr01 = thisOr0(Ring0);
    var zero3 = zero(Semiring0);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              return set2(statusDate2)(v2)(set2(accruedFees2)(mul6(mul6(timeFromLastEvent)(viewOn(v1)(notionalPrincipal1)))(thisOr01(v.feeRate)))(set2(accruedInterest2)(zero3)(v1)));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_IPCI_PAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var _STF_IP_PAM1 = _STF_IP_PAM(dictEuclideanRing);
    var Semiring0 = dictEuclideanRing.CommutativeRing0().Ring0().Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    return function(dictActusOps) {
      var _STF_IP_PAM2 = _STF_IP_PAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              var v3 = _STF_IP_PAM2(v)(v1)(v2);
              return set2(notionalPrincipal2)(add6(add6(viewOn(v1)(notionalPrincipal1))(viewOn(v1)(accruedInterest1)))(mul6(mul6(timeFromLastEvent)(viewOn(v1)(nominalInterest1)))(viewOn(v1)(notionalPrincipal1))))(v3);
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_IPCI_LAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Semiring0 = dictEuclideanRing.CommutativeRing0().Ring0().Semiring0();
    var add6 = add(Semiring0);
    var mul6 = mul(Semiring0);
    var _STF_IP_PAM1 = _STF_IP_PAM(dictEuclideanRing);
    return function(dictActusOps) {
      var _STF_IP_PAM2 = _STF_IP_PAM1(dictActusOps);
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              var nt$prime = add6(add6(viewOn(v1)(notionalPrincipal1))(viewOn(v1)(accruedInterest1)))(mul6(mul6(timeFromLastEvent)(viewOn(v1)(nominalInterest1)))(viewOn(v1)(interestCalculationBase2)));
              var ipcb$prime = function() {
                var interestCalculationBase22 = function(v32) {
                  if (v32.interestCalculationBase instanceof Just && v32.interestCalculationBase.value0 instanceof IPCB_NT) {
                    return nt$prime;
                  }
                  ;
                  return viewOn(v1)(interestCalculationBase2);
                };
                return interestCalculationBase22(v);
              }();
              var v3 = _STF_IP_PAM2(v)(v1)(v2);
              return set2(interestCalculationBase1)(ipcb$prime)(set2(notionalPrincipal2)(nt$prime)(v3));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_IPCB_LAM = function(dictEuclideanRing) {
    var _STF_PY_LAM1 = _STF_PY_LAM(dictEuclideanRing);
    return function(dictActusOps) {
      var _STF_PY_LAM2 = _STF_PY_LAM1(dictActusOps);
      return function(fs) {
        return function(ct) {
          return function(v) {
            return function(t) {
              var v1 = _STF_PY_LAM2(fs)(ct)(v)(t);
              return set2(interestCalculationBase1)(viewOn(v)(notionalPrincipal1))(v1);
            };
          };
        };
      };
    };
  };
  var _STF_IED_PAM = function(dictEuclideanRing) {
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var thisOr01 = thisOr0(Ring0);
    var Semiring0 = Ring0.Semiring0();
    var mul6 = mul(Semiring0);
    var sign4 = sign3(Ring0);
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var zero3 = zero(Semiring0);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.notionalPrincipal instanceof Just && v.accruedInterest instanceof Just) {
              return set2(statusDate2)(v2)(set2(accruedInterest2)(v.accruedInterest.value0)(set2(nominalInterest2)(thisOr01(v.nominalInterestRate))(set2(notionalPrincipal2)(mul6(sign4(v.contractRole))(v.notionalPrincipal.value0))(v1))));
            }
            ;
            if (v.nominalInterestRate instanceof Just && (v.notionalPrincipal instanceof Just && (v.cycleAnchorDateOfInterestPayment instanceof Just && v.dayCountConvention instanceof Just))) {
              var timeFromInterestPaymentAnchorToNow$prime = yearFraction2(v.dayCountConvention.value0)(v.cycleAnchorDateOfInterestPayment.value0)(v2)(Nothing.value);
              var timeFromInterestPaymentAnchorToNow = yearFraction2(v.dayCountConvention.value0)(v.cycleAnchorDateOfInterestPayment.value0)(v2)(v.maturityDate);
              var nt$prime = mul6(sign4(v.contractRole))(v.notionalPrincipal.value0);
              return set2(statusDate2)(v2)(set2(accruedInterest2)(mul6(mul6(mul6(timeFromInterestPaymentAnchorToNow$prime)(timeFromInterestPaymentAnchorToNow))(nt$prime))(v.nominalInterestRate.value0))(set2(nominalInterest2)(v.nominalInterestRate.value0)(set2(notionalPrincipal2)(nt$prime)(v1))));
            }
            ;
            if (v.nominalInterestRate instanceof Nothing && v.notionalPrincipal instanceof Just) {
              return set2(statusDate2)(v2)(set2(accruedInterest2)(zero3)(set2(notionalPrincipal2)(mul6(sign4(v.contractRole))(v.notionalPrincipal.value0))(v1)));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_IED_LAM = function(dictEuclideanRing) {
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var Semiring0 = Ring0.Semiring0();
    var mul6 = mul(Semiring0);
    var sign4 = sign3(Ring0);
    var zero3 = zero(Semiring0);
    var yearFraction2 = yearFraction(dictEuclideanRing);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.notionalPrincipal instanceof Just && (v.nominalInterestRate instanceof Just && v.dayCountConvention instanceof Just)) {
              var nt$prime = mul6(sign4(v.contractRole))(v.notionalPrincipal.value0);
              var ipcb$prime = function() {
                var interestCalculationBase$prime = function(v3) {
                  if (v3.interestCalculationBase instanceof Just && v3.interestCalculationBase.value0 instanceof IPCB_NT) {
                    return nt$prime;
                  }
                  ;
                  if (v3.interestCalculationBaseAmount instanceof Just) {
                    return mul6(sign4(v.contractRole))(v3.interestCalculationBaseAmount.value0);
                  }
                  ;
                  return zero3;
                };
                return interestCalculationBase$prime(v);
              }();
              var ipac$prime = function() {
                var interestAccrued$prime = function(v3) {
                  if (v3.accruedInterest instanceof Just) {
                    return mul6(sign4(v.contractRole))(v3.accruedInterest.value0);
                  }
                  ;
                  if (v3.cycleAnchorDateOfInterestPayment instanceof Just && lessThan6(v3.cycleAnchorDateOfInterestPayment.value0)(v2)) {
                    var timeFromInterestPaymentAnchorToNow = yearFraction2(v.dayCountConvention.value0)(v3.cycleAnchorDateOfInterestPayment.value0)(v2)(v.maturityDate);
                    return mul6(mul6(timeFromInterestPaymentAnchorToNow)(nt$prime))(ipcb$prime);
                  }
                  ;
                  return zero3;
                };
                return interestAccrued$prime(v);
              }();
              return set2(statusDate2)(v2)(set2(interestCalculationBase1)(ipcb$prime)(set2(accruedInterest2)(ipac$prime)(set2(nominalInterest2)(v.nominalInterestRate.value0)(set2(notionalPrincipal2)(nt$prime)(v1)))));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_FP_PAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Semiring0 = dictEuclideanRing.CommutativeRing0().Ring0().Semiring0();
    var zero3 = zero(Semiring0);
    var addOver2 = addOver(Semiring0);
    var mul6 = mul(Semiring0);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              return set2(statusDate2)(v2)(set2(accruedFees2)(zero3)(addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v1)(nominalInterest1)))(viewOn(v1)(notionalPrincipal1)))(v1)));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_FP_LAM = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Semiring0 = dictEuclideanRing.CommutativeRing0().Ring0().Semiring0();
    var zero3 = zero(Semiring0);
    var addOver2 = addOver(Semiring0);
    var mul6 = mul(Semiring0);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              return set2(statusDate2)(v2)(set2(accruedFees2)(zero3)(addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v1)(nominalInterest1)))(viewOn(v1)(interestCalculationBase2)))(v1)));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var _STF_AD_ALL = function(dictEuclideanRing) {
    var yearFraction2 = yearFraction(dictEuclideanRing);
    var Semiring0 = dictEuclideanRing.CommutativeRing0().Ring0().Semiring0();
    var addOver2 = addOver(Semiring0);
    var mul6 = mul(Semiring0);
    return function(dictActusOps) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v.dayCountConvention instanceof Just) {
              var timeFromLastEvent = yearFraction2(v.dayCountConvention.value0)(viewOn(v1)(statusDate1))(v2)(v.maturityDate);
              return addOver2(accruedInterest2)(mul6(mul6(timeFromLastEvent)(viewOn(v1)(nominalInterest1)))(viewOn(v1)(notionalPrincipal1)))(set2(statusDate2)(v2)(v1));
            }
            ;
            return v1;
          };
        };
      };
    };
  };
  var stateTransition = function(dictEuclideanRing) {
    var _STF_AD_ALL1 = _STF_AD_ALL(dictEuclideanRing);
    var _STF_IED_PAM1 = _STF_IED_PAM(dictEuclideanRing);
    var _STF_IED_LAM1 = _STF_IED_LAM(dictEuclideanRing);
    var _STF_PR_LAM1 = _STF_PR_LAM(dictEuclideanRing);
    var _STF_PR_NAM1 = _STF_PR_NAM(dictEuclideanRing);
    var Ring0 = dictEuclideanRing.CommutativeRing0().Ring0();
    var _STF_MD_ALL1 = _STF_MD_ALL(Ring0);
    var _STF_PP_PAM1 = _STF_PP_PAM(dictEuclideanRing);
    var _STF_PP_LAM1 = _STF_PP_LAM(dictEuclideanRing);
    var _STF_PY_PAM1 = _STF_PY_PAM(dictEuclideanRing);
    var _STF_PY_LAM1 = _STF_PY_LAM(dictEuclideanRing);
    var _STF_FP_PAM1 = _STF_FP_PAM(dictEuclideanRing);
    var _STF_FP_LAM1 = _STF_FP_LAM(dictEuclideanRing);
    var _STF_TD_ALL1 = _STF_TD_ALL(Ring0);
    var _STF_IP_PAM1 = _STF_IP_PAM(dictEuclideanRing);
    var _STF_IPCI_PAM1 = _STF_IPCI_PAM(dictEuclideanRing);
    var _STF_IPCI_LAM1 = _STF_IPCI_LAM(dictEuclideanRing);
    var _STF_IPCB_LAM1 = _STF_IPCB_LAM(dictEuclideanRing);
    var _STF_RR_PAM1 = _STF_RR_PAM(dictEuclideanRing);
    var _STF_RR_LAM1 = _STF_RR_LAM(dictEuclideanRing);
    var _STF_RR_ANN1 = _STF_RR_ANN(dictEuclideanRing);
    var _STF_RRF_PAM1 = _STF_RRF_PAM(dictEuclideanRing);
    var _STF_RRF_LAM1 = _STF_RRF_LAM(dictEuclideanRing);
    var _STF_RRF_ANN1 = _STF_RRF_ANN(dictEuclideanRing);
    var _STF_PRF_ANN1 = _STF_PRF_ANN(dictEuclideanRing);
    var _STF_SC_PAM1 = _STF_SC_PAM(dictEuclideanRing);
    var _STF_SC_LAM1 = _STF_SC_LAM(dictEuclideanRing);
    return function(dictActusOps) {
      var _STF_AD_ALL2 = _STF_AD_ALL1(dictActusOps);
      var _STF_IED_PAM2 = _STF_IED_PAM1(dictActusOps);
      var _STF_IED_LAM2 = _STF_IED_LAM1(dictActusOps);
      var _STF_PR_LAM2 = _STF_PR_LAM1(dictActusOps);
      var _STF_PR_NAM2 = _STF_PR_NAM1(dictActusOps);
      var _STF_PP_PAM2 = _STF_PP_PAM1(dictActusOps);
      var _STF_PP_LAM2 = _STF_PP_LAM1(dictActusOps);
      var _STF_PY_PAM2 = _STF_PY_PAM1(dictActusOps);
      var _STF_PY_LAM2 = _STF_PY_LAM1(dictActusOps);
      var _STF_FP_PAM2 = _STF_FP_PAM1(dictActusOps);
      var _STF_FP_LAM2 = _STF_FP_LAM1(dictActusOps);
      var _STF_IP_PAM2 = _STF_IP_PAM1(dictActusOps);
      var _STF_IPCI_PAM2 = _STF_IPCI_PAM1(dictActusOps);
      var _STF_IPCI_LAM2 = _STF_IPCI_LAM1(dictActusOps);
      var _STF_IPCB_LAM2 = _STF_IPCB_LAM1(dictActusOps);
      var _STF_RR_PAM2 = _STF_RR_PAM1(dictActusOps);
      var _STF_RR_LAM2 = _STF_RR_LAM1(dictActusOps);
      var _STF_RR_ANN2 = _STF_RR_ANN1(dictActusOps);
      var _STF_RRF_PAM2 = _STF_RRF_PAM1(dictActusOps);
      var _STF_RRF_LAM2 = _STF_RRF_LAM1(dictActusOps);
      var _STF_PRF_ANN2 = _STF_PRF_ANN1(dictActusOps);
      var _STF_SC_PAM2 = _STF_SC_PAM1(dictActusOps);
      var _STF_SC_LAM2 = _STF_SC_LAM1(dictActusOps);
      return function(ev) {
        return function(t) {
          return function(sn) {
            var stateTransition$prime = function(ctx) {
              var ps = new PrincipalRedemptionSchedule({
                laterPrincipalRedemptionDates: function() {
                  var principalRedemptionDates = append$prime3(ctx.prSchedule)(maybeToList3(ctx.maturity));
                  return filter2(function(v) {
                    return greaterThan6(v)(sn.sd);
                  })(principalRedemptionDates);
                }(),
                nextPrincipalRedemption: fromMaybe(t)(inf4(ctx.prSchedule)(t))
              });
              var fs = new FeeSchedule({
                latestFeePayment: fromMaybe(t)(sup4(ctx.fpSchedule)(t)),
                nextFeePayment: fromMaybe(t)(inf4(ctx.fpSchedule)(t))
              });
              var stf = function($copy_v) {
                return function($copy_v1) {
                  return function($copy_v2) {
                    return function($copy_v3) {
                      var $tco_var_v = $copy_v;
                      var $tco_var_v1 = $copy_v1;
                      var $tco_var_v2 = $copy_v2;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1, v2, v3) {
                        if (v instanceof AD) {
                          $tco_done = true;
                          return _STF_AD_ALL2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IED && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_IED_PAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IED && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_IED_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IED && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_IED_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IED && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_IED_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PR && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_PR_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PR && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_PR_NAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PR && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_PR_NAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof MD) {
                          $tco_done = true;
                          return _STF_MD_ALL1(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PP && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_PP_PAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PP && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_PP_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PP && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_PP_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PP && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_PP_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PY && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_PY_PAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PY && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_PY_LAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PY && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_PY_LAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PY && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_PY_LAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof FP && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_FP_PAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof FP && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_FP_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof FP && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_FP_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof FP && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_FP_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PRD && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_PY_PAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PRD && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_PY_PAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PRD && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_PY_PAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PRD && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_PY_PAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof TD) {
                          $tco_done = true;
                          return _STF_TD_ALL1(v3)(t);
                        }
                        ;
                        if (v instanceof IP) {
                          $tco_done = true;
                          return _STF_IP_PAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCI && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_IPCI_PAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCI && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_IPCI_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCI && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_IPCI_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCI && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_IPCI_LAM2(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCB && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_IPCB_LAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCB && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_IPCB_LAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof IPCB && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_IPCB_LAM2(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RR && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_RR_PAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RR && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_RR_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RR && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_RR_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RR && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_RR_ANN2(ps)(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RRF && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_RRF_PAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RRF && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_RRF_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RRF && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_RRF_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof RRF && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_RRF_ANN1(ps)(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof PRF && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_PRF_ANN2(ps)(fs)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof SC && v2.contractType instanceof PAM) {
                          $tco_done = true;
                          return _STF_SC_PAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof SC && v2.contractType instanceof LAM) {
                          $tco_done = true;
                          return _STF_SC_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof SC && v2.contractType instanceof NAM) {
                          $tco_done = true;
                          return _STF_SC_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof SC && v2.contractType instanceof ANN) {
                          $tco_done = true;
                          return _STF_SC_LAM2(fs)(v1)(v2)(v3)(t);
                        }
                        ;
                        if (v instanceof CE) {
                          $tco_var_v = AD.value;
                          $tco_var_v1 = v1;
                          $tco_var_v2 = v2;
                          $copy_v3 = v3;
                          return;
                        }
                        ;
                        $tco_done = true;
                        return sn;
                      }
                      ;
                      while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $tco_var_v2, $copy_v3);
                      }
                      ;
                      return $tco_result;
                    };
                  };
                };
              };
              return stf(ev)(ctx.riskFactors(ev)(t))(ctx.contractTerms)(sn);
            };
            return asks5(stateTransition$prime);
          };
        };
      };
    };
  };

  // output/Control.Monad.Reader/index.js
  var unwrap6 = /* @__PURE__ */ unwrap();
  var withReader = withReaderT;
  var runReader = function(v) {
    return function($4) {
      return unwrap6(v($4));
    };
  };

  // output/Actus.Core/index.js
  var bind16 = /* @__PURE__ */ bind(/* @__PURE__ */ bindReaderT(bindIdentity));
  var applicativeReaderT3 = /* @__PURE__ */ applicativeReaderT(applicativeIdentity);
  var pure11 = /* @__PURE__ */ pure(applicativeReaderT3);
  var traverse4 = /* @__PURE__ */ traverse(traversableList)(applicativeReaderT3);
  var map28 = /* @__PURE__ */ map(functorList);
  var lessThan7 = /* @__PURE__ */ lessThan(ordDateTime);
  var eq26 = /* @__PURE__ */ eq(eqDateTime);
  var comparing3 = /* @__PURE__ */ comparing(ordInt);
  var fromEnum10 = /* @__PURE__ */ fromEnum(boundedEnumEventType);
  var ordMaybe3 = /* @__PURE__ */ ordMaybe(ordDateTime);
  var lessThanOrEq5 = /* @__PURE__ */ lessThanOrEq(ordMaybe3);
  var comparing1 = /* @__PURE__ */ comparing(/* @__PURE__ */ ordTuple(ordDateTime)(ordEventType));
  var genericBoundedEnumConstructor4 = /* @__PURE__ */ genericBoundedEnumConstructor(genericBoundedEnumNoArguments);
  var genericBoundedEnumSum9 = /* @__PURE__ */ genericBoundedEnumSum(genericBoundedEnumConstructor4);
  var genericBoundedEnumSum13 = /* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(/* @__PURE__ */ genericBoundedEnumSum9(genericBoundedEnumConstructor4))))))))))))))))))))))));
  var genericTopSum6 = /* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopConstructor(genericTopNoArguments)))))))))))))))))))))))));
  var genericBottomSum4 = /* @__PURE__ */ genericBottomSum(/* @__PURE__ */ genericBottomConstructor(genericBottomNoArguments));
  var map113 = /* @__PURE__ */ map(/* @__PURE__ */ functorReaderT(functorIdentity));
  var ask3 = /* @__PURE__ */ ask(/* @__PURE__ */ monadAskReaderT(monadIdentity));
  var greaterThanOrEq5 = /* @__PURE__ */ greaterThanOrEq(ordMaybe3);
  var eq110 = /* @__PURE__ */ eq(eqEventType);
  var greaterThan7 = /* @__PURE__ */ greaterThan(ordMaybe3);
  var alt8 = /* @__PURE__ */ alt(altMaybe);
  var filterM2 = /* @__PURE__ */ filterM(/* @__PURE__ */ monadReaderT(monadIdentity));
  var foldl12 = /* @__PURE__ */ foldl1(foldable1NonEmptyList);
  var genStates = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var stateTransition2 = stateTransition(dictEuclideanRing);
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        var stateTransition1 = stateTransition2(ActusOps0);
        return function(v) {
          return function(v1) {
            if (v instanceof Cons) {
              return bind16(stateTransition1(v.value0.value0)(v.value0.value1.calculationDay)(v1))(function(nextState) {
                return bind16(genStates(ActusOps0)(dictEuclideanRing)(dictActusFrac)(v.value1)(nextState))(function(nextStates) {
                  return pure11(new Cons(nextState, nextStates));
                });
              });
            }
            ;
            if (v instanceof Nil) {
              return pure11(Nil.value);
            }
            ;
            throw new Error("Failed pattern match at Actus.Core (line 231, column 1 - line 244, column 45): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      };
    };
  };
  var genPayoffs = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var payoff2 = payoff(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(dictEuclideanRing);
      return function(dictActusFrac) {
        var payoff1 = payoff2(dictActusFrac.ActusOps0());
        return function(events) {
          return function(states) {
            var calculatePayoff = function(v) {
              return payoff1(new Tuple(v.value0.value0, v.value0.value1.calculationDay))(v.value1);
            };
            return traverse4(calculatePayoff)(zip2(events)(states));
          };
        };
      };
    };
  };
  var genFixedSchedule = function(dictActusOps) {
    return function(dictEuclideanRing) {
      return function(dictActusFrac) {
        var schedule2 = schedule(dictActusFrac.ActusOps0())(dictEuclideanRing)(dictActusFrac);
        return function(v) {
          var scheduleEvent = function(ev) {
            return map28(function(v1) {
              return new Tuple(ev, v1);
            })(schedule2(ev)(v));
          };
          var postProcessSchedules = function() {
            var trim2 = dropWhile2(function(v1) {
              return lessThan7(v1.value1.calculationDay)(v.statusDate);
            });
            var regroup = groupBy2(function(v1) {
              return function(v2) {
                return eq26(v1.value1.calculationDay)(v2.value1.calculationDay);
              };
            });
            var overwrite = map28(sortBy3(comparing3(function(v1) {
              return fromEnum10(v1.value0);
            })));
            var $313 = map28(toList2);
            return function($314) {
              return concat2($313(overwrite(regroup(trim2($314)))));
            };
          }();
          var filtersSchedules = function(v1) {
            return isNothing(v.terminationDate) || lessThanOrEq5(new Just(v1.value1.calculationDay))(v.terminationDate);
          };
          var event = new Tuple(AD.value, {
            calculationDay: v.statusDate,
            paymentDay: v.statusDate
          });
          var allElements = function(dictGeneric) {
            var genericFromEnum2 = genericFromEnum(dictGeneric);
            var genericTop2 = genericTop(dictGeneric);
            var genericBottom2 = genericBottom(dictGeneric);
            var genericToEnum2 = genericToEnum(dictGeneric);
            return function(dictGenericBoundedEnum) {
              var genericFromEnum1 = genericFromEnum2(dictGenericBoundedEnum);
              var genericToEnum1 = genericToEnum2(dictGenericBoundedEnum);
              return function(dictGenericTop) {
                var genericTop1 = genericTop2(dictGenericTop);
                return function(dictGenericBottom) {
                  var idxTo = genericFromEnum1(genericTop1);
                  var idxFrom = genericFromEnum1(genericBottom2(dictGenericBottom));
                  return mapMaybe2(genericToEnum1)(range3(idxFrom)(idxTo));
                };
              };
            };
          };
          return filter2(filtersSchedules)(postProcessSchedules(sortBy2(comparing1(function(v1) {
            return new Tuple(v1.value1.paymentDay, v1.value0);
          }))(new Cons(event, concatMap2(scheduleEvent)(allElements(genericEventType_)(genericBoundedEnumSum13)(genericTopSum6)(genericBottomSum4))))));
        };
      };
    };
  };
  var genSchedule = function(dictActusOps) {
    return function(dictEuclideanRing) {
      return function(dictActusFrac) {
        var genFixedSchedule1 = genFixedSchedule(dictActusFrac.ActusOps0())(dictEuclideanRing)(dictActusFrac);
        return function(contractTerms) {
          return sortBy2(comparing1(function(v) {
            return new Tuple(v.value1.paymentDay, v.value0);
          }))(genFixedSchedule1(contractTerms));
        };
      };
    };
  };
  var genCashflow = function(dictActusOps) {
    return function(dictEuclideanRing) {
      return function(dictActusFrac) {
        return function(dictShow) {
          return function(v) {
            return function(v1) {
              return function(v2) {
                return new CashFlow({
                  party: v.value0,
                  counterparty: v.value1,
                  paymentDay: v2.value0.value1.paymentDay,
                  calculationDay: v2.value0.value1.calculationDay,
                  event: v2.value0.value0,
                  amount: v2.value1.value1,
                  notional: v2.value1.value0.nt,
                  currency: fromMaybe("unknown")(v1.currency)
                });
              };
            };
          };
        };
      };
    };
  };
  var filtersStates = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity2 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var maturity1 = maturity2(dictActusFrac.ActusOps0())(dictActusFrac);
        return function(v) {
          return bind16(map113(function(v1) {
            return v1.contractTerms;
          })(ask3))(function(v1) {
            return pure11(function() {
              if (v1.contractType instanceof PAM) {
                return isNothing(v1.purchaseDate) || greaterThanOrEq5(new Just(v.value0.value1.calculationDay))(v1.purchaseDate);
              }
              ;
              if (v1.contractType instanceof LAM) {
                return isNothing(v1.purchaseDate) || (eq110(v.value0.value0)(PRD.value) || greaterThan7(new Just(v.value0.value1.calculationDay))(v1.purchaseDate));
              }
              ;
              if (v1.contractType instanceof NAM) {
                return isNothing(v1.purchaseDate) || (eq110(v.value0.value0)(PRD.value) || greaterThan7(new Just(v.value0.value1.calculationDay))(v1.purchaseDate));
              }
              ;
              if (v1.contractType instanceof ANN) {
                var b2 = function() {
                  var m = alt8(v1.maturityDate)(alt8(v1.amortizationDate)(maturity1(v1)));
                  return isNothing(m) || lessThanOrEq5(new Just(v.value0.value1.calculationDay))(m);
                }();
                var b1 = isNothing(v1.purchaseDate) || (eq110(v.value0.value0)(PRD.value) || greaterThan7(new Just(v.value0.value1.calculationDay))(v1.purchaseDate));
                return b1 && b2;
              }
              ;
              throw new Error("Failed pattern match at Actus.Core (line 262, column 12 - line 271, column 19): " + [v1.contractType.constructor.name]);
            }());
          });
        };
      };
    };
  };
  var genProjectedPayoffs$prime = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var initializeState2 = initializeState(dictEuclideanRing);
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        var genStates1 = genStates(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var filtersStates1 = filtersStates(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var genPayoffs1 = genPayoffs(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        return function(events) {
          var trans = withReader(function(v) {
            return {
              contractTerms: v.contractTerms,
              riskFactors: v.riskFactors
            };
          });
          return bind16(bind16(initializeState2)(genStates1(events)))(function(states) {
            return bind16(map113(unzip2)(filterM2(filtersStates1)(zip2(fromMaybe(Nil.value)(tail2(events)))(states))))(function(v) {
              return bind16(trans(genPayoffs1(v.value0)(v.value1)))(function(payoffs) {
                return pure11(zip2(v.value0)(zip2(v.value1)(payoffs)));
              });
            });
          });
        };
      };
    };
  };
  var genProjectedPayoffs = function(dictActusOps) {
    return function(dictEuclideanRing) {
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        return bind16(map113(function() {
          var $315 = genSchedule(ActusOps0)(dictEuclideanRing)(dictActusFrac);
          return function($316) {
            return $315(function(v) {
              return v.contractTerms;
            }($316));
          };
        }())(ask3))(genProjectedPayoffs$prime(ActusOps0)(dictEuclideanRing)(dictActusFrac));
      };
    };
  };
  var buildCtx = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var maturity2 = maturity(dictEuclideanRing);
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        var schedule2 = schedule(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var maturity1 = maturity2(ActusOps0)(dictActusFrac);
        return function(riskFactors) {
          return function(contractTerms) {
            return {
              contractTerms,
              fpSchedule: map28(function(v) {
                return v.calculationDay;
              })(schedule2(FP.value)(contractTerms)),
              prSchedule: map28(function(v) {
                return v.calculationDay;
              })(schedule2(PR.value)(contractTerms)),
              ipSchedule: map28(function(v) {
                return v.calculationDay;
              })(schedule2(IP.value)(contractTerms)),
              maturity: maturity1(contractTerms),
              riskFactors
            };
          };
        };
      };
    };
  };
  var genProjectedCashflows = function(dictActusOps) {
    return function(dictEuclideanRing) {
      var add6 = add(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
      return function(dictActusFrac) {
        var ActusOps0 = dictActusFrac.ActusOps0();
        var buildCtx1 = buildCtx(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var genProjectedPayoffs1 = genProjectedPayoffs(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        var genCashflow1 = genCashflow(ActusOps0)(dictEuclideanRing)(dictActusFrac);
        return function(dictShow) {
          var genCashflow2 = genCashflow1(dictShow);
          return function(dictEq) {
            var eq35 = eq(dictEq);
            return function(parties) {
              return function(riskFactors) {
                return function(contractTerms) {
                  var groupCashflows = function(cf) {
                    var f = function(v) {
                      return function(v1) {
                        return eq110(v.value0.event)(v1.value0.event) && (eq26(v.value0.paymentDay)(v1.value0.paymentDay) && (eq35(v.value0.party)(v1.value0.party) && (eq35(v.value0.counterparty)(v1.value0.counterparty) && v.value0.currency === v1.value0.currency)));
                      };
                    };
                    return groupBy2(f)(cf);
                  };
                  var netCashflows = function(cf) {
                    var plus = function(v) {
                      return function(v1) {
                        return new CashFlow({
                          party: v.value0.party,
                          counterparty: v.value0.counterparty,
                          paymentDay: v.value0.paymentDay,
                          calculationDay: v.value0.calculationDay,
                          event: v.value0.event,
                          amount: add6(v.value0.amount)(v1.value0.amount),
                          notional: add6(v.value0.notional)(v1.value0.notional),
                          currency: v.value0.currency
                        });
                      };
                    };
                    return map28(foldl12(plus))(groupCashflows(cf));
                  };
                  var netting = function(v) {
                    if (v.deliverySettlement instanceof Just && v.deliverySettlement.value0 instanceof DS_S) {
                      return netCashflows;
                    }
                    ;
                    return function(x) {
                      return x;
                    };
                  };
                  var context = buildCtx1(riskFactors)(contractTerms);
                  var cashFlows = runReader(genProjectedPayoffs1)(context);
                  return netting(contractTerms)(map28(genCashflow2(parties)(contractTerms))(cashFlows));
                };
              };
            };
          };
        };
      };
    };
  };

  // output/Data.Argonaut.Parser/foreign.js
  function _jsonParser(fail2, succ4, s2) {
    try {
      return succ4(JSON.parse(s2));
    } catch (e2) {
      return fail2(e2.message);
    }
  }

  // output/Data.Argonaut.Parser/index.js
  var jsonParser = function(j) {
    return _jsonParser(Left.create, Right.create, j);
  };

  // output/Data.Argonaut.Decode.Parser/index.js
  var parseJson = /* @__PURE__ */ function() {
    var $3 = lmap(bifunctorEither)(function(v) {
      return new TypeMismatch2("JSON");
    });
    return function($4) {
      return $3(jsonParser($4));
    };
  }();

  // output/Data.Map/index.js
  var keys3 = /* @__PURE__ */ function() {
    var $38 = $$void(functorMap);
    return function($39) {
      return fromMap($38($39));
    };
  }();

  // output/Marlowe.Time/index.js
  var fromJust8 = /* @__PURE__ */ fromJust();
  var unsafeInstantFromInt = function(ms) {
    return fromJust8(instant(toNumber(ms)));
  };
  var unixEpoch = /* @__PURE__ */ unsafeInstantFromInt(0);

  // output/Language.Marlowe.Core.V1.Semantics.Types/index.js
  var show20 = /* @__PURE__ */ show(showString);
  var genericShowArgsArgument2 = /* @__PURE__ */ genericShowArgsArgument(showString);
  var genericShowConstructor4 = /* @__PURE__ */ genericShowConstructor(genericShowArgsArgument2);
  var genericShowArgsArgument1 = /* @__PURE__ */ genericShowArgsArgument(showBigInt2);
  var genericShowConstructor1 = /* @__PURE__ */ genericShowConstructor(genericShowArgsNoArguments);
  var genericShowSum2 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor(genericShowArgsArgument1)({
    reflectSymbol: function() {
      return "Constant";
    }
  }));
  var NegValueIsSymbol = {
    reflectSymbol: function() {
      return "NegValue";
    }
  };
  var AddValueIsSymbol = {
    reflectSymbol: function() {
      return "AddValue";
    }
  };
  var SubValueIsSymbol = {
    reflectSymbol: function() {
      return "SubValue";
    }
  };
  var MulValueIsSymbol = {
    reflectSymbol: function() {
      return "MulValue";
    }
  };
  var DivValueIsSymbol = {
    reflectSymbol: function() {
      return "DivValue";
    }
  };
  var genericShowSum1 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor1({
    reflectSymbol: function() {
      return "TimeIntervalStart";
    }
  }));
  var genericShowSum22 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor1({
    reflectSymbol: function() {
      return "TimeIntervalEnd";
    }
  }));
  var CondIsSymbol = {
    reflectSymbol: function() {
      return "Cond";
    }
  };
  var AndObsIsSymbol = {
    reflectSymbol: function() {
      return "AndObs";
    }
  };
  var OrObsIsSymbol = {
    reflectSymbol: function() {
      return "OrObs";
    }
  };
  var NotObsIsSymbol = {
    reflectSymbol: function() {
      return "NotObs";
    }
  };
  var ValueGEIsSymbol = {
    reflectSymbol: function() {
      return "ValueGE";
    }
  };
  var ValueGTIsSymbol = {
    reflectSymbol: function() {
      return "ValueGT";
    }
  };
  var ValueLTIsSymbol = {
    reflectSymbol: function() {
      return "ValueLT";
    }
  };
  var ValueLEIsSymbol = {
    reflectSymbol: function() {
      return "ValueLE";
    }
  };
  var ValueEQIsSymbol = {
    reflectSymbol: function() {
      return "ValueEQ";
    }
  };
  var genericShowSum3 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor1({
    reflectSymbol: function() {
      return "TrueObs";
    }
  }))(/* @__PURE__ */ genericShowConstructor1({
    reflectSymbol: function() {
      return "FalseObs";
    }
  }));
  var genericShowSum4 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor1({
    reflectSymbol: function() {
      return "Close";
    }
  }));
  var PayIsSymbol = {
    reflectSymbol: function() {
      return "Pay";
    }
  };
  var IfIsSymbol = {
    reflectSymbol: function() {
      return "If";
    }
  };
  var genericShowArgsProduct1 = /* @__PURE__ */ genericShowArgsProduct(/* @__PURE__ */ genericShowArgsArgument(showInstant));
  var WhenIsSymbol = {
    reflectSymbol: function() {
      return "When";
    }
  };
  var LetIsSymbol = {
    reflectSymbol: function() {
      return "Let";
    }
  };
  var AssertIsSymbol = {
    reflectSymbol: function() {
      return "Assert";
    }
  };
  var compare6 = /* @__PURE__ */ compare(ordString);
  var TimeInterval = /* @__PURE__ */ function() {
    function TimeInterval2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TimeInterval2.create = function(value0) {
      return function(value1) {
        return new TimeInterval2(value0, value1);
      };
    };
    return TimeInterval2;
  }();
  var Token = /* @__PURE__ */ function() {
    function Token2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Token2.create = function(value0) {
      return function(value1) {
        return new Token2(value0, value1);
      };
    };
    return Token2;
  }();
  var Bound = /* @__PURE__ */ function() {
    function Bound2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bound2.create = function(value0) {
      return function(value1) {
        return new Bound2(value0, value1);
      };
    };
    return Bound2;
  }();
  var Address = /* @__PURE__ */ function() {
    function Address2(value0) {
      this.value0 = value0;
    }
    ;
    Address2.create = function(value0) {
      return new Address2(value0);
    };
    return Address2;
  }();
  var Role = /* @__PURE__ */ function() {
    function Role2(value0) {
      this.value0 = value0;
    }
    ;
    Role2.create = function(value0) {
      return new Role2(value0);
    };
    return Role2;
  }();
  var ChoiceId = /* @__PURE__ */ function() {
    function ChoiceId2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ChoiceId2.create = function(value0) {
      return function(value1) {
        return new ChoiceId2(value0, value1);
      };
    };
    return ChoiceId2;
  }();
  var Account = /* @__PURE__ */ function() {
    function Account2(value0) {
      this.value0 = value0;
    }
    ;
    Account2.create = function(value0) {
      return new Account2(value0);
    };
    return Account2;
  }();
  var Party = /* @__PURE__ */ function() {
    function Party2(value0) {
      this.value0 = value0;
    }
    ;
    Party2.create = function(value0) {
      return new Party2(value0);
    };
    return Party2;
  }();
  var AvailableMoney = /* @__PURE__ */ function() {
    function AvailableMoney2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AvailableMoney2.create = function(value0) {
      return function(value1) {
        return new AvailableMoney2(value0, value1);
      };
    };
    return AvailableMoney2;
  }();
  var Constant = /* @__PURE__ */ function() {
    function Constant2(value0) {
      this.value0 = value0;
    }
    ;
    Constant2.create = function(value0) {
      return new Constant2(value0);
    };
    return Constant2;
  }();
  var NegValue = /* @__PURE__ */ function() {
    function NegValue2(value0) {
      this.value0 = value0;
    }
    ;
    NegValue2.create = function(value0) {
      return new NegValue2(value0);
    };
    return NegValue2;
  }();
  var AddValue = /* @__PURE__ */ function() {
    function AddValue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AddValue2.create = function(value0) {
      return function(value1) {
        return new AddValue2(value0, value1);
      };
    };
    return AddValue2;
  }();
  var SubValue = /* @__PURE__ */ function() {
    function SubValue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    SubValue2.create = function(value0) {
      return function(value1) {
        return new SubValue2(value0, value1);
      };
    };
    return SubValue2;
  }();
  var MulValue = /* @__PURE__ */ function() {
    function MulValue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    MulValue2.create = function(value0) {
      return function(value1) {
        return new MulValue2(value0, value1);
      };
    };
    return MulValue2;
  }();
  var DivValue = /* @__PURE__ */ function() {
    function DivValue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    DivValue2.create = function(value0) {
      return function(value1) {
        return new DivValue2(value0, value1);
      };
    };
    return DivValue2;
  }();
  var ChoiceValue = /* @__PURE__ */ function() {
    function ChoiceValue2(value0) {
      this.value0 = value0;
    }
    ;
    ChoiceValue2.create = function(value0) {
      return new ChoiceValue2(value0);
    };
    return ChoiceValue2;
  }();
  var TimeIntervalStart = /* @__PURE__ */ function() {
    function TimeIntervalStart2() {
    }
    ;
    TimeIntervalStart2.value = new TimeIntervalStart2();
    return TimeIntervalStart2;
  }();
  var TimeIntervalEnd = /* @__PURE__ */ function() {
    function TimeIntervalEnd2() {
    }
    ;
    TimeIntervalEnd2.value = new TimeIntervalEnd2();
    return TimeIntervalEnd2;
  }();
  var UseValue = /* @__PURE__ */ function() {
    function UseValue2(value0) {
      this.value0 = value0;
    }
    ;
    UseValue2.create = function(value0) {
      return new UseValue2(value0);
    };
    return UseValue2;
  }();
  var Cond = /* @__PURE__ */ function() {
    function Cond2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Cond2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Cond2(value0, value1, value22);
        };
      };
    };
    return Cond2;
  }();
  var AndObs = /* @__PURE__ */ function() {
    function AndObs2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AndObs2.create = function(value0) {
      return function(value1) {
        return new AndObs2(value0, value1);
      };
    };
    return AndObs2;
  }();
  var OrObs = /* @__PURE__ */ function() {
    function OrObs2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    OrObs2.create = function(value0) {
      return function(value1) {
        return new OrObs2(value0, value1);
      };
    };
    return OrObs2;
  }();
  var NotObs = /* @__PURE__ */ function() {
    function NotObs2(value0) {
      this.value0 = value0;
    }
    ;
    NotObs2.create = function(value0) {
      return new NotObs2(value0);
    };
    return NotObs2;
  }();
  var ChoseSomething = /* @__PURE__ */ function() {
    function ChoseSomething2(value0) {
      this.value0 = value0;
    }
    ;
    ChoseSomething2.create = function(value0) {
      return new ChoseSomething2(value0);
    };
    return ChoseSomething2;
  }();
  var ValueGE = /* @__PURE__ */ function() {
    function ValueGE2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueGE2.create = function(value0) {
      return function(value1) {
        return new ValueGE2(value0, value1);
      };
    };
    return ValueGE2;
  }();
  var ValueGT = /* @__PURE__ */ function() {
    function ValueGT2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueGT2.create = function(value0) {
      return function(value1) {
        return new ValueGT2(value0, value1);
      };
    };
    return ValueGT2;
  }();
  var ValueLT = /* @__PURE__ */ function() {
    function ValueLT2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueLT2.create = function(value0) {
      return function(value1) {
        return new ValueLT2(value0, value1);
      };
    };
    return ValueLT2;
  }();
  var ValueLE = /* @__PURE__ */ function() {
    function ValueLE2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueLE2.create = function(value0) {
      return function(value1) {
        return new ValueLE2(value0, value1);
      };
    };
    return ValueLE2;
  }();
  var ValueEQ = /* @__PURE__ */ function() {
    function ValueEQ2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ValueEQ2.create = function(value0) {
      return function(value1) {
        return new ValueEQ2(value0, value1);
      };
    };
    return ValueEQ2;
  }();
  var TrueObs = /* @__PURE__ */ function() {
    function TrueObs2() {
    }
    ;
    TrueObs2.value = new TrueObs2();
    return TrueObs2;
  }();
  var FalseObs = /* @__PURE__ */ function() {
    function FalseObs2() {
    }
    ;
    FalseObs2.value = new FalseObs2();
    return FalseObs2;
  }();
  var Deposit = /* @__PURE__ */ function() {
    function Deposit2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Deposit2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Deposit2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Deposit2;
  }();
  var Choice = /* @__PURE__ */ function() {
    function Choice2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Choice2.create = function(value0) {
      return function(value1) {
        return new Choice2(value0, value1);
      };
    };
    return Choice2;
  }();
  var Notify = /* @__PURE__ */ function() {
    function Notify2(value0) {
      this.value0 = value0;
    }
    ;
    Notify2.create = function(value0) {
      return new Notify2(value0);
    };
    return Notify2;
  }();
  var Close = /* @__PURE__ */ function() {
    function Close2() {
    }
    ;
    Close2.value = new Close2();
    return Close2;
  }();
  var Pay = /* @__PURE__ */ function() {
    function Pay2(value0, value1, value22, value32, value42) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
    }
    ;
    Pay2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return new Pay2(value0, value1, value22, value32, value42);
            };
          };
        };
      };
    };
    return Pay2;
  }();
  var If = /* @__PURE__ */ function() {
    function If2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    If2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new If2(value0, value1, value22);
        };
      };
    };
    return If2;
  }();
  var When = /* @__PURE__ */ function() {
    function When2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    When2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new When2(value0, value1, value22);
        };
      };
    };
    return When2;
  }();
  var Let = /* @__PURE__ */ function() {
    function Let2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Let2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Let2(value0, value1, value22);
        };
      };
    };
    return Let2;
  }();
  var Assert = /* @__PURE__ */ function() {
    function Assert2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Assert2.create = function(value0) {
      return function(value1) {
        return new Assert2(value0, value1);
      };
    };
    return Assert2;
  }();
  var Case = /* @__PURE__ */ function() {
    function Case2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Case2.create = function(value0) {
      return function(value1) {
        return new Case2(value0, value1);
      };
    };
    return Case2;
  }();
  var showValueId = {
    show: function(v) {
      return show20(v);
    }
  };
  var genericShowArgsArgument22 = /* @__PURE__ */ genericShowArgsArgument(showValueId);
  var genericShowArgsProduct3 = /* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument22);
  var genericShowSum5 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor(genericShowArgsArgument22)({
    reflectSymbol: function() {
      return "UseValue";
    }
  }));
  var showBound = {
    show: function(v) {
      return "(Bound " + (toString4(v.value0) + (" " + (toString4(v.value1) + ")")));
    }
  };
  var showArray2 = /* @__PURE__ */ showArray(showBound);
  var show42 = /* @__PURE__ */ show(showArray2);
  var ivTo = function(v) {
    return v.value1;
  };
  var ivFrom = function(v) {
    return v.value0;
  };
  var genericValue = {
    to: function(x) {
      if (x instanceof Inl) {
        return new AvailableMoney(x.value0.value0, x.value0.value1);
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return new Constant(x.value0.value0);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return new NegValue(x.value0.value0.value0);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return new AddValue(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return new SubValue(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return new MulValue(x.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return new DivValue(x.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return new ChoiceValue(x.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))) {
        return TimeIntervalStart.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))) {
        return TimeIntervalEnd.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))))) {
        return new UseValue(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr)))))))))) {
        return new Cond(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 286, column 1 - line 286, column 48): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof AvailableMoney) {
        return new Inl(new Product(x.value0, x.value1));
      }
      ;
      if (x instanceof Constant) {
        return new Inr(new Inl(x.value0));
      }
      ;
      if (x instanceof NegValue) {
        return new Inr(new Inr(new Inl(x.value0)));
      }
      ;
      if (x instanceof AddValue) {
        return new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1)))));
      }
      ;
      if (x instanceof SubValue) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1))))));
      }
      ;
      if (x instanceof MulValue) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1)))))));
      }
      ;
      if (x instanceof DivValue) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1))))))));
      }
      ;
      if (x instanceof ChoiceValue) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x.value0))))))));
      }
      ;
      if (x instanceof TimeIntervalStart) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))))));
      }
      ;
      if (x instanceof TimeIntervalEnd) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))));
      }
      ;
      if (x instanceof UseValue) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x.value0)))))))))));
      }
      ;
      if (x instanceof Cond) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Product(x.value0, new Product(x.value1, x.value2)))))))))))));
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 286, column 1 - line 286, column 48): " + [x.constructor.name]);
    }
  };
  var genericShow3 = /* @__PURE__ */ genericShow(genericValue);
  var genericToken = {
    to: function(x) {
      return new Token(x.value0, x.value1);
    },
    from: function(x) {
      return new Product(x.value0, x.value1);
    }
  };
  var genericShow1 = /* @__PURE__ */ genericShow(genericToken)(/* @__PURE__ */ genericShowConstructor(/* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument2)(genericShowArgsArgument2))({
    reflectSymbol: function() {
      return "Token";
    }
  }));
  var showToken = {
    show: function(v) {
      return genericShow1(new Token(toLower(v.value0), v.value1));
    }
  };
  var genericShowArgsArgument3 = /* @__PURE__ */ genericShowArgsArgument(showToken);
  var genericShowArgsProduct4 = /* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument3);
  var genericPayee = {
    to: function(x) {
      if (x instanceof Inl) {
        return new Account(x.value0);
      }
      ;
      if (x instanceof Inr) {
        return new Party(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 602, column 1 - line 602, column 48): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof Account) {
        return new Inl(x.value0);
      }
      ;
      if (x instanceof Party) {
        return new Inr(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 602, column 1 - line 602, column 48): " + [x.constructor.name]);
    }
  };
  var genericParty = {
    to: function(x) {
      if (x instanceof Inl) {
        return new Address(x.value0);
      }
      ;
      if (x instanceof Inr) {
        return new Role(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 56, column 1 - line 56, column 48): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof Address) {
        return new Inl(x.value0);
      }
      ;
      if (x instanceof Role) {
        return new Inr(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 56, column 1 - line 56, column 48): " + [x.constructor.name]);
    }
  };
  var showParty = {
    show: /* @__PURE__ */ genericShow(genericParty)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor4({
      reflectSymbol: function() {
        return "Address";
      }
    }))(/* @__PURE__ */ genericShowConstructor4({
      reflectSymbol: function() {
        return "Role";
      }
    })))
  };
  var show52 = /* @__PURE__ */ show(showParty);
  var genericShowArgsArgument4 = /* @__PURE__ */ genericShowArgsArgument(showParty);
  var genericShowConstructor32 = /* @__PURE__ */ genericShowConstructor(genericShowArgsArgument4);
  var genericShow22 = /* @__PURE__ */ genericShow(genericPayee)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor32({
    reflectSymbol: function() {
      return "Account";
    }
  }))(/* @__PURE__ */ genericShowConstructor32({
    reflectSymbol: function() {
      return "Party";
    }
  })));
  var genericShowArgsProduct6 = /* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument4);
  var genericShowSum6 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor(/* @__PURE__ */ genericShowArgsProduct6(genericShowArgsArgument3))({
    reflectSymbol: function() {
      return "AvailableMoney";
    }
  }));
  var showChoiceId = {
    show: function(v) {
      return "(ChoiceId " + (show20(v.value0) + (" " + (show52(v.value1) + ")")));
    }
  };
  var genericShowArgsArgument5 = /* @__PURE__ */ genericShowArgsArgument(showChoiceId);
  var genericShowConstructor5 = /* @__PURE__ */ genericShowConstructor(genericShowArgsArgument5);
  var genericShowSum7 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor5({
    reflectSymbol: function() {
      return "ChoiceValue";
    }
  }));
  var genericShowSum8 = /* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor5({
    reflectSymbol: function() {
      return "ChoseSomething";
    }
  }));
  var genericShowArgsProduct7 = /* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument5);
  var show62 = /* @__PURE__ */ show(showChoiceId);
  var showPayee = {
    show: function(v) {
      return genericShow22(v);
    }
  };
  var genericShowArgsProduct8 = /* @__PURE__ */ genericShowArgsProduct(/* @__PURE__ */ genericShowArgsArgument(showPayee));
  var genericObservation = {
    to: function(x) {
      if (x instanceof Inl) {
        return new AndObs(x.value0.value0, x.value0.value1);
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return new OrObs(x.value0.value0.value0, x.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return new NotObs(x.value0.value0.value0);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return new ChoseSomething(x.value0.value0.value0.value0);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return new ValueGE(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return new ValueGT(x.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return new ValueLT(x.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return new ValueLE(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))) {
        return new ValueEQ(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))) {
        return TrueObs.value;
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr))))))))) {
        return FalseObs.value;
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 399, column 1 - line 399, column 60): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof AndObs) {
        return new Inl(new Product(x.value0, x.value1));
      }
      ;
      if (x instanceof OrObs) {
        return new Inr(new Inl(new Product(x.value0, x.value1)));
      }
      ;
      if (x instanceof NotObs) {
        return new Inr(new Inr(new Inl(x.value0)));
      }
      ;
      if (x instanceof ChoseSomething) {
        return new Inr(new Inr(new Inr(new Inl(x.value0))));
      }
      ;
      if (x instanceof ValueGE) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1))))));
      }
      ;
      if (x instanceof ValueGT) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1)))))));
      }
      ;
      if (x instanceof ValueLT) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1))))))));
      }
      ;
      if (x instanceof ValueLE) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1)))))))));
      }
      ;
      if (x instanceof ValueEQ) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1))))))))));
      }
      ;
      if (x instanceof TrueObs) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))));
      }
      ;
      if (x instanceof FalseObs) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value))))))))));
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 399, column 1 - line 399, column 60): " + [x.constructor.name]);
    }
  };
  var genericShow4 = /* @__PURE__ */ genericShow(genericObservation);
  var showValue = {
    show: function(v) {
      return genericShow3(genericShowSum6(genericShowSum2(genericShowSum(genericShowConstructor(genericShowArgsArgument(showValue))(NegValueIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(AddValueIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(SubValueIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(MulValueIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(DivValueIsSymbol))(genericShowSum7(genericShowSum1(genericShowSum22(genericShowSum5(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showObservation))(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue))))(CondIsSymbol)))))))))))))(v);
    }
  };
  var showObservation = {
    show: function(o) {
      return genericShow4(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showObservation))(genericShowArgsArgument(showObservation)))(AndObsIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showObservation))(genericShowArgsArgument(showObservation)))(OrObsIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsArgument(showObservation))(NotObsIsSymbol))(genericShowSum8(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(ValueGEIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(ValueGTIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(ValueLTIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(ValueLEIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showValue))(genericShowArgsArgument(showValue)))(ValueEQIsSymbol))(genericShowSum3))))))))))(o);
    }
  };
  var genericShowArgsArgument7 = /* @__PURE__ */ genericShowArgsArgument(showValue);
  var genericShowArgsArgument8 = /* @__PURE__ */ genericShowArgsArgument(showObservation);
  var genericShowArgsProduct9 = /* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument7);
  var genericShowArgsProduct10 = /* @__PURE__ */ genericShowArgsProduct(genericShowArgsArgument8);
  var genericContract = {
    to: function(x) {
      if (x instanceof Inl) {
        return Close.value;
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return new Pay(x.value0.value0.value0, x.value0.value0.value1.value0, x.value0.value0.value1.value1.value0, x.value0.value0.value1.value1.value1.value0, x.value0.value0.value1.value1.value1.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
        return new If(x.value0.value0.value0.value0, x.value0.value0.value0.value1.value0, x.value0.value0.value0.value1.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
        return new When(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value1.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
        return new Let(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value1.value1);
      }
      ;
      if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inr)))) {
        return new Assert(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 654, column 1 - line 654, column 54): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof Close) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof Pay) {
        return new Inr(new Inl(new Product(x.value0, new Product(x.value1, new Product(x.value2, new Product(x.value3, x.value4))))));
      }
      ;
      if (x instanceof If) {
        return new Inr(new Inr(new Inl(new Product(x.value0, new Product(x.value1, x.value2)))));
      }
      ;
      if (x instanceof When) {
        return new Inr(new Inr(new Inr(new Inl(new Product(x.value0, new Product(x.value1, x.value2))))));
      }
      ;
      if (x instanceof Let) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(new Product(x.value0, new Product(x.value1, x.value2)))))));
      }
      ;
      if (x instanceof Assert) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Product(x.value0, x.value1))))));
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 654, column 1 - line 654, column 54): " + [x.constructor.name]);
    }
  };
  var genericShow8 = /* @__PURE__ */ genericShow(genericContract);
  var genericAction = {
    to: function(x) {
      if (x instanceof Inl) {
        return new Deposit(x.value0.value0, x.value0.value1.value0, x.value0.value1.value1.value0, x.value0.value1.value1.value1);
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inl) {
        return new Choice(x.value0.value0.value0, x.value0.value0.value1);
      }
      ;
      if (x instanceof Inr && x.value0 instanceof Inr) {
        return new Notify(x.value0.value0);
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 555, column 1 - line 555, column 50): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof Deposit) {
        return new Inl(new Product(x.value0, new Product(x.value1, new Product(x.value2, x.value3))));
      }
      ;
      if (x instanceof Choice) {
        return new Inr(new Inl(new Product(x.value0, x.value1)));
      }
      ;
      if (x instanceof Notify) {
        return new Inr(new Inr(x.value0));
      }
      ;
      throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 555, column 1 - line 555, column 50): " + [x.constructor.name]);
    }
  };
  var genericShow9 = /* @__PURE__ */ genericShow(genericAction)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor(/* @__PURE__ */ genericShowArgsProduct6(/* @__PURE__ */ genericShowArgsProduct6(/* @__PURE__ */ genericShowArgsProduct4(genericShowArgsArgument7))))({
    reflectSymbol: function() {
      return "Deposit";
    }
  }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor(/* @__PURE__ */ genericShowArgsProduct7(/* @__PURE__ */ genericShowArgsArgument(showArray2)))({
    reflectSymbol: function() {
      return "Choice";
    }
  }))(/* @__PURE__ */ genericShowConstructor(genericShowArgsArgument8)({
    reflectSymbol: function() {
      return "Notify";
    }
  }))));
  var showAction = {
    show: function(v) {
      if (v instanceof Choice) {
        return "(Choice " + (show62(v.value0) + (" " + (show42(v.value1) + ")")));
      }
      ;
      return genericShow9(v);
    }
  };
  var show72 = /* @__PURE__ */ show(showAction);
  var showContract = {
    show: function(v) {
      return genericShow8(genericShowSum4(genericShowSum(genericShowConstructor(genericShowArgsProduct6(genericShowArgsProduct8(genericShowArgsProduct4(genericShowArgsProduct9(genericShowArgsArgument(showContract))))))(PayIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct10(genericShowArgsProduct(genericShowArgsArgument(showContract))(genericShowArgsArgument(showContract))))(IfIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct(genericShowArgsArgument(showArray(showCase)))(genericShowArgsProduct1(genericShowArgsArgument(showContract))))(WhenIsSymbol))(genericShowSum(genericShowConstructor(genericShowArgsProduct3(genericShowArgsProduct9(genericShowArgsArgument(showContract))))(LetIsSymbol))(genericShowConstructor(genericShowArgsProduct10(genericShowArgsArgument(showContract)))(AssertIsSymbol)))))))(v);
    }
  };
  var showCase = {
    show: function(v) {
      return "Case " + (show72(v.value0) + (" " + show(showContract)(v.value1)));
    }
  };
  var eqValueId = {
    eq: function(x) {
      return function(y) {
        return x === y;
      };
    }
  };
  var ordValueId = {
    compare: function(x) {
      return function(y) {
        return compare6(x)(y);
      };
    },
    Eq0: function() {
      return eqValueId;
    }
  };
  var eqToken = {
    eq: function(v) {
      return function(v1) {
        return toLower(v.value0) === toLower(v1.value0) && v.value1 === v1.value1;
      };
    }
  };
  var ordToken = {
    compare: function(v) {
      return function(v1) {
        var v2 = compare6(toLower(v.value0))(toLower(v1.value0));
        if (v2 instanceof EQ) {
          return compare6(v.value1)(v1.value1);
        }
        ;
        return v2;
      };
    },
    Eq0: function() {
      return eqToken;
    }
  };
  var eqParty = {
    eq: function(x) {
      return function(y) {
        if (x instanceof Address && y instanceof Address) {
          return x.value0 === y.value0;
        }
        ;
        if (x instanceof Role && y instanceof Role) {
          return x.value0 === y.value0;
        }
        ;
        return false;
      };
    }
  };
  var eq92 = /* @__PURE__ */ eq(eqParty);
  var ordParty = {
    compare: function(x) {
      return function(y) {
        if (x instanceof Address && y instanceof Address) {
          return compare6(x.value0)(y.value0);
        }
        ;
        if (x instanceof Address) {
          return LT.value;
        }
        ;
        if (y instanceof Address) {
          return GT.value;
        }
        ;
        if (x instanceof Role && y instanceof Role) {
          return compare6(x.value0)(y.value0);
        }
        ;
        throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics.Types (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqParty;
    }
  };
  var compare7 = /* @__PURE__ */ compare(ordParty);
  var eqChoiceId = {
    eq: function(x) {
      return function(y) {
        return x.value0 === y.value0 && eq92(x.value1)(y.value1);
      };
    }
  };
  var ordChoiceId = {
    compare: function(x) {
      return function(y) {
        var v = compare6(x.value0)(y.value0);
        if (v instanceof LT) {
          return LT.value;
        }
        ;
        if (v instanceof GT) {
          return GT.value;
        }
        ;
        return compare7(x.value1)(y.value1);
      };
    },
    Eq0: function() {
      return eqChoiceId;
    }
  };

  // output/Language.Marlowe.Core.V1.Semantics/index.js
  var lessThanOrEq1 = /* @__PURE__ */ lessThanOrEq(ordBigInt2);
  var zero2 = /* @__PURE__ */ zero(semiringBigInt2);
  var ordTuple2 = /* @__PURE__ */ ordTuple(ordParty)(ordToken);
  var greaterThan8 = /* @__PURE__ */ greaterThan(ordBigInt2);
  var unwrap7 = /* @__PURE__ */ unwrap();
  var lookup5 = /* @__PURE__ */ lookup2(ordTuple2);
  var greaterThanOrEq6 = /* @__PURE__ */ greaterThanOrEq(ordBigInt2);
  var negate2 = /* @__PURE__ */ negate(ringBigInt2);
  var add5 = /* @__PURE__ */ add(semiringBigInt2);
  var sub6 = /* @__PURE__ */ sub(ringBigInt2);
  var mul4 = /* @__PURE__ */ mul(semiringBigInt2);
  var eq27 = /* @__PURE__ */ eq(eqBigInt2);
  var div9 = /* @__PURE__ */ div(euclideanRingBigInt2);
  var lookup1 = /* @__PURE__ */ lookup2(ordChoiceId);
  var lookup22 = /* @__PURE__ */ lookup2(ordValueId);
  var member2 = /* @__PURE__ */ member(ordChoiceId);
  var lessThan8 = /* @__PURE__ */ lessThan(ordBigInt2);
  var moneyInAccount = function(accId) {
    return function(token) {
      return function(accounts) {
        return fromMaybe(zero2)(lookup5(new Tuple(accId, token))(accounts));
      };
    };
  };
  var evalValue = function(env) {
    return function(state3) {
      return function(value14) {
        var $$eval = evalValue(env)(state3);
        if (value14 instanceof AvailableMoney) {
          return moneyInAccount(value14.value0)(value14.value1)(unwrap7(state3).accounts);
        }
        ;
        if (value14 instanceof Constant) {
          return value14.value0;
        }
        ;
        if (value14 instanceof NegValue) {
          return negate2($$eval(value14.value0));
        }
        ;
        if (value14 instanceof AddValue) {
          return add5($$eval(value14.value0))($$eval(value14.value1));
        }
        ;
        if (value14 instanceof SubValue) {
          return sub6($$eval(value14.value0))($$eval(value14.value1));
        }
        ;
        if (value14 instanceof MulValue) {
          return mul4($$eval(value14.value0))($$eval(value14.value1));
        }
        ;
        if (value14 instanceof DivValue) {
          var n = $$eval(value14.value0);
          var d = $$eval(value14.value1);
          var $131 = eq27(d)(fromInt2(0));
          if ($131) {
            return fromInt2(0);
          }
          ;
          return div9(n)(d);
        }
        ;
        if (value14 instanceof ChoiceValue) {
          return fromMaybe(zero2)(lookup1(value14.value0)(unwrap7(state3).choices));
        }
        ;
        if (value14 instanceof TimeIntervalStart) {
          return fromInt2(round2(unwrap7(unInstant(ivFrom(unwrap7(env).timeInterval)))));
        }
        ;
        if (value14 instanceof TimeIntervalEnd) {
          return fromInt2(round2(unwrap7(unInstant(ivTo(unwrap7(env).timeInterval)))));
        }
        ;
        if (value14 instanceof UseValue) {
          return fromMaybe(zero2)(lookup22(value14.value0)(unwrap7(state3).boundValues));
        }
        ;
        if (value14 instanceof Cond) {
          var $136 = evalObservation(env)(state3)(value14.value0);
          if ($136) {
            return $$eval(value14.value1);
          }
          ;
          return $$eval(value14.value2);
        }
        ;
        throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics (line 135, column 5 - line 163, column 70): " + [value14.constructor.name]);
      };
    };
  };
  var evalObservation = function(env) {
    return function(state3) {
      return function(obs) {
        var evalVal3 = evalValue(env)(state3);
        var evalObs3 = evalObservation(env)(state3);
        if (obs instanceof AndObs) {
          return evalObs3(obs.value0) && evalObs3(obs.value1);
        }
        ;
        if (obs instanceof OrObs) {
          return evalObs3(obs.value0) || evalObs3(obs.value1);
        }
        ;
        if (obs instanceof NotObs) {
          return !evalObs3(obs.value0);
        }
        ;
        if (obs instanceof ChoseSomething) {
          return member2(obs.value0)(unwrap7(state3).choices);
        }
        ;
        if (obs instanceof ValueGE) {
          return greaterThanOrEq6(evalVal3(obs.value0))(evalVal3(obs.value1));
        }
        ;
        if (obs instanceof ValueGT) {
          return greaterThan8(evalVal3(obs.value0))(evalVal3(obs.value1));
        }
        ;
        if (obs instanceof ValueLT) {
          return lessThan8(evalVal3(obs.value0))(evalVal3(obs.value1));
        }
        ;
        if (obs instanceof ValueLE) {
          return lessThanOrEq1(evalVal3(obs.value0))(evalVal3(obs.value1));
        }
        ;
        if (obs instanceof ValueEQ) {
          return eq27(evalVal3(obs.value0))(evalVal3(obs.value1));
        }
        ;
        if (obs instanceof TrueObs) {
          return true;
        }
        ;
        if (obs instanceof FalseObs) {
          return false;
        }
        ;
        throw new Error("Failed pattern match at Language.Marlowe.Core.V1.Semantics (line 173, column 5 - line 184, column 24): " + [obs.constructor.name]);
      };
    };
  };
  var emptyState = {
    accounts: empty3,
    choices: empty3,
    boundValues: empty3,
    minTime: unixEpoch
  };

  // output/Marlowe.Actus/index.js
  var mul5 = /* @__PURE__ */ mul(semiringDecimal);
  var map29 = /* @__PURE__ */ map(functorMaybe);
  var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindMaybe);
  var map114 = /* @__PURE__ */ map(functorArray);
  var show21 = /* @__PURE__ */ show(showEventType);
  var show110 = /* @__PURE__ */ show(showDateTime);
  var eq28 = /* @__PURE__ */ eq(eqChoiceId);
  var foldl5 = /* @__PURE__ */ foldl(foldableList);
  var map210 = /* @__PURE__ */ map(functorList);
  var toMarloweValue = function(v) {
    if (v instanceof Constant$prime) {
      return new Constant(v.value0);
    }
    ;
    if (v instanceof NegValue$prime) {
      return new NegValue(toMarloweValue(v.value0));
    }
    ;
    if (v instanceof AddValue$prime) {
      return new AddValue(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof SubValue$prime) {
      return new SubValue(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof MulValue$prime) {
      return new MulValue(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof Cond$prime) {
      return new Cond(toMarloweObservation(v.value0), toMarloweValue(v.value1), toMarloweValue(v.value2));
    }
    ;
    throw new Error("Failed pattern match at Marlowe.Actus (line 80, column 1 - line 80, column 34): " + [v.constructor.name]);
  };
  var toMarloweObservation = function(v) {
    if (v instanceof AndObs$prime) {
      return new AndObs(toMarloweObservation(v.value0), toMarloweObservation(v.value1));
    }
    ;
    if (v instanceof OrObs$prime) {
      return new OrObs(toMarloweObservation(v.value0), toMarloweObservation(v.value1));
    }
    ;
    if (v instanceof NotObs$prime) {
      return new NotObs(toMarloweObservation(v.value0));
    }
    ;
    if (v instanceof ValueGE$prime) {
      return new ValueGE(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof ValueGT$prime) {
      return new ValueGT(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof ValueLT$prime) {
      return new ValueLT(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof ValueLE$prime) {
      return new ValueLE(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof ValueEQ$prime) {
      return new ValueEQ(toMarloweValue(v.value0), toMarloweValue(v.value1));
    }
    ;
    if (v instanceof TrueObs$prime) {
      return TrueObs.value;
    }
    ;
    if (v instanceof FalseObs$prime) {
      return FalseObs.value;
    }
    ;
    throw new Error("Failed pattern match at Marlowe.Actus (line 88, column 1 - line 88, column 52): " + [v.constructor.name]);
  };
  var toMarloweCashflow = function(v) {
    return new CashFlow({
      party: v.value0.party,
      counterparty: v.value0.counterparty,
      paymentDay: v.value0.paymentDay,
      calculationDay: v.value0.calculationDay,
      event: v.value0.event,
      amount: toMarloweValue(v.value0.amount),
      notional: toMarloweValue(v.value0.notional),
      currency: v.value0.currency
    });
  };
  var toMarlowe = function(v) {
    var toMarloweFixedPoint = function($140) {
      return fromString5(toString2(floor4(function(v1) {
        return mul5(fromNumber2(marloweFixedPoint))(v1);
      }($140))));
    };
    var constant = function(n) {
      return map29(Constant$prime.create)(toMarloweFixedPoint(n));
    };
    return {
      contractId: v.contractId,
      contractType: v.contractType,
      contractRole: v.contractRole,
      settlementCurrency: v.settlementCurrency,
      initialExchangeDate: v.initialExchangeDate,
      dayCountConvention: v.dayCountConvention,
      scheduleConfig: v.scheduleConfig,
      statusDate: v.statusDate,
      marketObjectCode: Nothing.value,
      contractPerformance: v.contractPerformance,
      creditEventTypeCovered: v.creditEventTypeCovered,
      coverageOfCreditEnhancement: bindFlipped3(constant)(v.coverageOfCreditEnhancement),
      guaranteedExposure: v.guaranteedExposure,
      cycleOfFee: v.cycleOfFee,
      cycleAnchorDateOfFee: v.cycleAnchorDateOfFee,
      feeAccrued: bindFlipped3(constant)(v.feeAccrued),
      feeBasis: v.feeBasis,
      feeRate: bindFlipped3(constant)(v.feeRate),
      cycleAnchorDateOfInterestPayment: v.cycleAnchorDateOfInterestPayment,
      cycleOfInterestPayment: v.cycleOfInterestPayment,
      accruedInterest: bindFlipped3(constant)(v.accruedInterest),
      capitalizationEndDate: v.capitalizationEndDate,
      cycleAnchorDateOfInterestCalculationBase: v.cycleAnchorDateOfInterestCalculationBase,
      cycleOfInterestCalculationBase: v.cycleOfInterestCalculationBase,
      interestCalculationBase: v.interestCalculationBase,
      interestCalculationBaseAmount: bindFlipped3(constant)(v.interestCalculationBaseAmount),
      nominalInterestRate: bindFlipped3(constant)(v.nominalInterestRate),
      nominalInterestRate2: bindFlipped3(constant)(v.nominalInterestRate2),
      interestScalingMultiplier: bindFlipped3(constant)(v.interestScalingMultiplier),
      notionalPrincipal: bindFlipped3(constant)(v.notionalPrincipal),
      premiumDiscountAtIED: bindFlipped3(constant)(v.premiumDiscountAtIED),
      maturityDate: v.maturityDate,
      amortizationDate: v.amortizationDate,
      exerciseDate: v.exerciseDate,
      cycleAnchorDateOfPrincipalRedemption: v.cycleAnchorDateOfPrincipalRedemption,
      cycleOfPrincipalRedemption: v.cycleOfPrincipalRedemption,
      nextPrincipalRedemptionPayment: bindFlipped3(constant)(v.nextPrincipalRedemptionPayment),
      purchaseDate: v.purchaseDate,
      priceAtPurchaseDate: bindFlipped3(constant)(v.priceAtPurchaseDate),
      terminationDate: v.terminationDate,
      priceAtTerminationDate: bindFlipped3(constant)(v.priceAtTerminationDate),
      quantity: bindFlipped3(constant)(v.quantity),
      currency: v.currency,
      currency2: v.currency2,
      scalingIndexAtStatusDate: bindFlipped3(constant)(v.scalingIndexAtStatusDate),
      cycleAnchorDateOfScalingIndex: v.cycleAnchorDateOfScalingIndex,
      cycleOfScalingIndex: v.cycleOfScalingIndex,
      scalingEffect: v.scalingEffect,
      scalingIndexAtContractDealDate: bindFlipped3(constant)(v.scalingIndexAtContractDealDate),
      marketObjectCodeOfScalingIndex: v.marketObjectCodeOfScalingIndex,
      notionalScalingMultiplier: bindFlipped3(constant)(v.notionalScalingMultiplier),
      cycleOfOptionality: v.cycleOfOptionality,
      cycleAnchorDateOfOptionality: v.cycleAnchorDateOfOptionality,
      optionType: v.optionType,
      optionStrike1: bindFlipped3(constant)(v.optionStrike1),
      optionExerciseType: v.optionExerciseType,
      settlementPeriod: v.settlementPeriod,
      deliverySettlement: v.deliverySettlement,
      exerciseAmount: bindFlipped3(constant)(v.exerciseAmount),
      futuresPrice: bindFlipped3(constant)(v.futuresPrice),
      penaltyRate: bindFlipped3(constant)(v.penaltyRate),
      penaltyType: v.penaltyType,
      prepaymentEffect: v.prepaymentEffect,
      cycleOfRateReset: v.cycleOfRateReset,
      cycleAnchorDateOfRateReset: v.cycleAnchorDateOfRateReset,
      nextResetRate: bindFlipped3(constant)(v.nextResetRate),
      rateSpread: bindFlipped3(constant)(v.rateSpread),
      rateMultiplier: bindFlipped3(constant)(v.rateMultiplier),
      periodFloor: bindFlipped3(constant)(v.periodFloor),
      periodCap: bindFlipped3(constant)(v.periodCap),
      lifeCap: bindFlipped3(constant)(v.lifeCap),
      lifeFloor: bindFlipped3(constant)(v.lifeFloor),
      marketObjectCodeOfRateReset: v.marketObjectCodeOfRateReset,
      cycleOfDividendPayment: v.cycleOfDividendPayment,
      cycleAnchorDateOfDividendPayment: v.cycleAnchorDateOfDividendPayment,
      nextDividendPaymentAmount: bindFlipped3(constant)(v.nextDividendPaymentAmount)
    };
  };
  var evalVal2 = function(d) {
    var env = {
      timeInterval: new TimeInterval(unixEpoch, unixEpoch)
    };
    return evalValue(env)(emptyState)(d);
  };
  var reduceValue = function(v) {
    return new Constant(evalVal2(v));
  };
  var reduceObs = function(v) {
    if (v instanceof AndObs) {
      return new AndObs(reduceObs(v.value0), reduceObs(v.value1));
    }
    ;
    if (v instanceof OrObs) {
      return new OrObs(reduceObs(v.value0), reduceObs(v.value1));
    }
    ;
    if (v instanceof NotObs) {
      return new NotObs(reduceObs(v.value0));
    }
    ;
    if (v instanceof ValueGE) {
      return new ValueGE(reduceValue(v.value0), reduceValue(v.value1));
    }
    ;
    if (v instanceof ValueGT) {
      return new ValueGT(reduceValue(v.value0), reduceValue(v.value1));
    }
    ;
    if (v instanceof ValueLE) {
      return new ValueLE(reduceValue(v.value0), reduceValue(v.value1));
    }
    ;
    if (v instanceof ValueLT) {
      return new ValueLT(reduceValue(v.value0), reduceValue(v.value1));
    }
    ;
    if (v instanceof ValueEQ) {
      return new ValueEQ(reduceValue(v.value0), reduceValue(v.value1));
    }
    ;
    return v;
  };
  var evalObs2 = function(d) {
    var env = {
      timeInterval: new TimeInterval(unixEpoch, unixEpoch)
    };
    return evalObservation(env)(emptyState)(d);
  };
  var reduceContract = function(v) {
    if (v instanceof Close) {
      return Close.value;
    }
    ;
    if (v instanceof Pay) {
      return new Pay(v.value0, v.value1, v.value2, reduceValue(v.value3), reduceContract(v.value4));
    }
    ;
    if (v instanceof When) {
      var f = function(v1) {
        return new Case(v1.value0, reduceContract(v1.value1));
      };
      return new When(map114(f)(v.value0), v.value1, reduceContract(v.value2));
    }
    ;
    if (v instanceof If) {
      var c = evalObs2(v.value0);
      return reduceContract(function() {
        if (c) {
          return v.value1;
        }
        ;
        return v.value2;
      }());
    }
    ;
    if (v instanceof Let) {
      return new Let(v.value0, reduceValue(v.value1), reduceContract(v.value2));
    }
    ;
    if (v instanceof Assert) {
      return new Assert(reduceObs(v.value0), reduceContract(v.value1));
    }
    ;
    throw new Error("Failed pattern match at Marlowe.Actus (line 52, column 1 - line 52, column 39): " + [v.constructor.name]);
  };
  var cashFlowToChoiceId = function(v) {
    var l = show21(v.value0.event) + show110(v.value0.paymentDay);
    return new ChoiceId(l, new Role("RiskFactor"));
  };
  var hasRiskFactor = function(v) {
    var hasRiskFactor$prime = function(v1) {
      if (v1 instanceof ChoiceValue && eq28(cashFlowToChoiceId(v))(v1.value0)) {
        return true;
      }
      ;
      if (v1 instanceof ChoiceValue) {
        return false;
      }
      ;
      if (v1 instanceof Constant) {
        return false;
      }
      ;
      if (v1 instanceof AvailableMoney) {
        return false;
      }
      ;
      if (v1 instanceof UseValue) {
        return false;
      }
      ;
      if (v1 instanceof AddValue) {
        return hasRiskFactor$prime(v1.value0) || hasRiskFactor$prime(v1.value1);
      }
      ;
      if (v1 instanceof SubValue) {
        return hasRiskFactor$prime(v1.value0) || hasRiskFactor$prime(v1.value1);
      }
      ;
      if (v1 instanceof MulValue) {
        return hasRiskFactor$prime(v1.value0) || hasRiskFactor$prime(v1.value1);
      }
      ;
      if (v1 instanceof DivValue) {
        return hasRiskFactor$prime(v1.value0) || hasRiskFactor$prime(v1.value1);
      }
      ;
      if (v1 instanceof NegValue) {
        return hasRiskFactor$prime(v1.value0);
      }
      ;
      if (v1 instanceof TimeIntervalStart) {
        return false;
      }
      ;
      if (v1 instanceof TimeIntervalEnd) {
        return false;
      }
      ;
      if (v1 instanceof Cond) {
        return hasRiskFactor$prime(v1.value1) || hasRiskFactor$prime(v1.value2);
      }
      ;
      throw new Error("Failed pattern match at Marlowe.Actus (line 196, column 3 - line 196, column 37): " + [v1.constructor.name]);
    };
    return hasRiskFactor$prime(v.value0.amount);
  };
  var genContract = function(cashFlows) {
    var invoice = function(a2) {
      return function(b2) {
        return function(token) {
          return function(amount) {
            return function(timeout) {
              return function($$continue) {
                return new When([new Case(new Deposit(a2, a2, token, amount), new Pay(a2, new Party(b2), token, amount, $$continue))], timeout, Close.value);
              };
            };
          };
        };
      };
    };
    var stub = function(continuation) {
      return function(v) {
        return reduceContract(new If(new ValueLT(new Constant(fromInt2(0)), v.value0.amount), invoice(v.value0.counterparty)(v.value0.party)(new Token("", v.value0.currency))(v.value0.amount)(fromDateTime(v.value0.paymentDay))(continuation), new If(new ValueLT(v.value0.amount, new Constant(fromInt2(0))), invoice(v.value0.party)(v.value0.counterparty)(new Token("", v.value0.currency))(new NegValue(v.value0.amount))(fromDateTime(v.value0.paymentDay))(continuation), continuation)));
      };
    };
    var generator = function(v) {
      return function(v1) {
        if (hasRiskFactor(v1)) {
          return new When([new Case(new Choice(cashFlowToChoiceId(v1), [new Bound(fromInt2(0), fromInt2(1e9))]), stub(v)(v1))], fromDateTime(v1.value0.paymentDay), Close.value);
        }
        ;
        return stub(v)(v1);
      };
    };
    return foldl5(generator)(Close.value)(reverse2(map210(toMarloweCashflow)(cashFlows)));
  };

  // output/Component.ContractForm/index.js
  var bind17 = /* @__PURE__ */ bind3(ixBindRender);
  var pure14 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var bind18 = /* @__PURE__ */ bind(bindEither);
  var decodeJson18 = /* @__PURE__ */ decodeJson(decodeJsonContractTermsDe);
  var genProjectedCashflows2 = /* @__PURE__ */ genProjectedCashflows(actusOpsValue$prime)(euclideanRingValue$prime)(actusFracValue$prime)(showParty)(eqParty);
  var div10 = /* @__PURE__ */ div3();
  var show24 = /* @__PURE__ */ show(showJsonDecodeError);
  var textarea2 = /* @__PURE__ */ textarea();
  var pure15 = /* @__PURE__ */ pure(applicativeEffect);
  var useInput = function(initialValue) {
    return bind17(useState(initialValue))(function(v) {
      var onChange = handler(targetValue)(function() {
        var $43 = fromMaybe("");
        return function($44) {
          return v.value1($$const($43($44)));
        };
      }());
      return pure14(new Tuple(v.value0, onChange));
    });
  };
  var mkContractForm = function __do3() {
    var booleanField = mkBooleanField();
    return component("Form")(function(onNewContract) {
      return bind17(useInput(joinWith("\n")(["{", '  "contractType": "LAM",', '  "contractID": "lam01",', '  "contractRole": "RPA",', '  "contractDealDate": "2012-12-28T00:00:00",', '  "initialExchangeDate": "2013-01-01T00:00:00",', '  "statusDate": "2012-12-30T00:00:00",', '  "notionalPrincipal": " 5000",', '  "cycleAnchorDateOfPrincipalRedemption": "2013-02-01T00:00:00",', '  "nextPrincipalRedemptionPayment": " 500",', '  "dayCountConvention": "A365",', '  "nominalInterestRate": "0.08",', '  "currency": "USD",', '  "cycleOfPrincipalRedemption": "P1ML0",', '  "cycleAnchorDateOfRateReset": "2013-04-01T00:00:00",', '  "cycleOfRateReset": "P3ML1",', '  "rateMultiplier": "1",', '  "rateSpread": "0.1",', '  "fixingDays": "P0D",', '  "cycleAnchorDateOfInterestPayment": "2013-02-01T00:00:00",', '  "cycleOfInterestPayment": "P1ML0",', '  "endOfMonthConvention": "SD",', '  "interestCalculationBase": "NT",', '  "marketObjectCodeOfRateReset": "USD.SWP" ', "}"])))(function(v) {
        return bind17(useState(Nothing.value))(function(v1) {
          var validateForm = function() {
            var v2 = bind18(parseJson(v.value0))(decodeJson18);
            if (v2 instanceof Right) {
              var termsMarlowe = toMarlowe(v2.value0);
              var role2 = new Role("R2");
              var role1 = new Role("R1");
              var riskFactors = function(v3) {
                return function(v4) {
                  var fromInt4 = function($45) {
                    return Constant$prime.create(fromInt2(function(v5) {
                      return marloweFixedPoint * v5 | 0;
                    }($45)));
                  };
                  return new RiskFactors({
                    o_rf_CURS: fromInt4(1),
                    o_rf_RRMO: fromInt4(1),
                    o_rf_SCMO: fromInt4(1),
                    pp_payoff: fromInt4(0)
                  });
                };
              };
              var cashflowsMarlowe = genProjectedCashflows2(new Tuple(role1, role2))(riskFactors)(termsMarlowe);
              var contract = genContract(cashflowsMarlowe);
              return function __do6() {
                v1.value1($$const(new Just(new Right(contract))))();
                return onNewContract(new Tuple(v2.value0, contract))();
              };
            }
            ;
            if (v2 instanceof Left) {
              return v1.value1($$const(new Just(new Left(v2.value0))));
            }
            ;
            throw new Error("Failed pattern match at Component.ContractForm (line 74, column 22 - line 108, column 64): " + [v2.constructor.name]);
          }();
          var renderJsonValidation = function() {
            if (v1.value0 instanceof Nothing) {
              return div10({
                style: css({
                  color: "black"
                }),
                children: [text("Enter some JSON")]
              });
            }
            ;
            if (v1.value0 instanceof Just && v1.value0.value0 instanceof Left) {
              return div10({
                style: css({
                  color: "red"
                }),
                children: [text(show24(v1.value0.value0.value0))]
              });
            }
            ;
            if (v1.value0 instanceof Just && v1.value0.value0 instanceof Right) {
              return div10({
                style: css({
                  color: "green"
                }),
                children: [text("Valid JSON")]
              });
            }
            ;
            throw new Error("Failed pattern match at Component.ContractForm (line 65, column 9 - line 71, column 87): " + [v1.value0.constructor.name]);
          }();
          return pure14(div10({
            className: "form-group",
            children: [textarea2({
              className: "form-control",
              placeholder: "Enter some JSON",
              value: v.value0,
              onChange: v.value1,
              rows: 15
            }), renderJsonValidation, booleanField({
              initialValue: false,
              onToggle: $$const(pure15(unit)),
              disabled: false,
              label: text("Pick unused address")
            })]
          }));
        });
      });
    })();
  };

  // output/Effect.Console/foreign.js
  var log3 = function(s2) {
    return function() {
      console.log(s2);
    };
  };

  // output/Web.DOM.Document/foreign.js
  var getEffProp = function(name16) {
    return function(doc) {
      return function() {
        return doc[name16];
      };
    };
  };
  var url = getEffProp("URL");
  var documentURI = getEffProp("documentURI");
  var origin2 = getEffProp("origin");
  var compatMode = getEffProp("compatMode");
  var characterSet = getEffProp("characterSet");
  var contentType = getEffProp("contentType");
  var _documentElement2 = getEffProp("documentElement");
  function getElementsByTagName(localName2) {
    return function(doc) {
      return function() {
        return doc.getElementsByTagName(localName2);
      };
    };
  }
  function createElement2(localName2) {
    return function(doc) {
      return function() {
        return doc.createElement(localName2);
      };
    };
  }

  // output/Web.DOM.Element/foreign.js
  var getProp2 = function(name16) {
    return function(doctype) {
      return doctype[name16];
    };
  };
  var _namespaceURI = getProp2("namespaceURI");
  var _prefix = getProp2("prefix");
  var localName = getProp2("localName");
  var tagName = getProp2("tagName");
  function setAttribute(name16) {
    return function(value14) {
      return function(element2) {
        return function() {
          element2.setAttribute(name16, value14);
        };
      };
    };
  }
  function removeAttribute(name16) {
    return function(element2) {
      return function() {
        element2.removeAttribute(name16);
      };
    };
  }

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp2 = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var children = getEffProp2("children");
  var _firstElementChild = getEffProp2("firstElementChild");
  var _lastElementChild = getEffProp2("lastElementChild");
  var childElementCount = getEffProp2("childElementCount");

  // output/Web.DOM.Element/index.js
  var toNode = unsafeCoerce2;

  // output/Web.DOM.HTMLCollection/foreign.js
  function toArray4(list) {
    return function() {
      return [].slice.call(list);
    };
  }

  // output/Web.DOM.Node/foreign.js
  var getEffProp3 = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var baseURI = getEffProp3("baseURI");
  var _ownerDocument = getEffProp3("ownerDocument");
  var _parentNode = getEffProp3("parentNode");
  var _parentElement = getEffProp3("parentElement");
  var childNodes = getEffProp3("childNodes");
  var _firstChild = getEffProp3("firstChild");
  var _lastChild = getEffProp3("lastChild");
  var _previousSibling = getEffProp3("previousSibling");
  var _nextSibling = getEffProp3("nextSibling");
  var _nodeValue = getEffProp3("nodeValue");
  var textContent = getEffProp3("textContent");
  function appendChild(node) {
    return function(parent2) {
      return function() {
        parent2.appendChild(node);
      };
    };
  }
  function removeChild(node) {
    return function(parent2) {
      return function() {
        parent2.removeChild(node);
      };
    };
  }

  // output/Component.Modal/index.js
  var discard6 = /* @__PURE__ */ discard2(ixBindRender);
  var bind19 = /* @__PURE__ */ bind(bindEffect);
  var mapFlipped6 = /* @__PURE__ */ mapFlipped(functorEffect);
  var pure16 = /* @__PURE__ */ pure(applicativeEffect);
  var pure17 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var div11 = /* @__PURE__ */ div4()(toJSXArrayJSX)()();
  var fromHomogeneous2 = /* @__PURE__ */ fromHomogeneous();
  var h53 = /* @__PURE__ */ h52()(toJSXArrayJSX)()();
  var button4 = /* @__PURE__ */ button2()(toJSXArrayJSX)()();
  var mkModal = /* @__PURE__ */ component("Modal")(function(v) {
    return discard6(useEffectOnce(function __do6() {
      var doc = mapFlipped6(bind19(windowImpl)(document2))(toDocument)();
      var v1 = bind19(getElementsByTagName("body")(doc))(toArray4)();
      if (v1.length === 1) {
        setAttribute("style")("overflow: hidden; padding-right: 15px")(v1[0])();
        setAttribute("class")("modal-open")(v1[0])();
        var backdrop = createElement2("div")(doc)();
        setAttribute("class")("modal-backdrop fade show")(backdrop)();
        var close2 = function __do7() {
          log3("Close Click")();
          removeAttribute("style")(v1[0])();
          removeAttribute("class")(v1[0])();
          return removeChild(toNode(backdrop))(toNode(v1[0]))();
        };
        appendChild(toNode(backdrop))(toNode(v1[0]))();
        return close2;
      }
      ;
      return pure16(unit);
    }))(function() {
      var onModalDialogClicked = handler(stopPropagation)($$const(pure16(unit)));
      var onModalClicked = handler_(v.onDismiss);
      return pure17(div11({
        className: "modal fade show",
        onClick: onModalClicked,
        style: css({
          display: "block"
        }),
        "_aria": fromHomogeneous2({
          modal: "true"
        }),
        role: "dialog"
      })([div11({
        className: "modal-dialog",
        onClick: onModalDialogClicked
      })([div11({
        className: "modal-content"
      })([div11({
        className: "modal-header"
      })([h53({
        className: "modal-title"
      })([v.title]), button4({
        className: "btn-close",
        "_data": fromHomogeneous2({
          "bs-dismiss": "modal"
        }),
        onClick: handler_(v.onDismiss),
        type: "button",
        "_aria": fromHomogeneous2({
          label: "Close"
        })
      })([])]), div11({
        className: "modal-body"
      })([v.body])])])]));
    });
  });

  // output/Contrib.Data.Argonaut.Generic.Record/index.js
  var bind20 = /* @__PURE__ */ bind(bindEither);
  var lmap6 = /* @__PURE__ */ lmap(bifunctorEither);
  var decodeJson19 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeForeignObject2(decodeJsonJson));
  var map30 = /* @__PURE__ */ map(functorFn);
  var map115 = /* @__PURE__ */ map(functorEither);
  var wrap3 = /* @__PURE__ */ wrap();
  var foldingWithIndexDecodeSte = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var get3 = get(dictIsSymbol)();
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function() {
          return {
            foldingWithIndex: function(v) {
              return function(l) {
                return function(acc) {
                  return function(v1) {
                    return function(obj) {
                      return bind20(acc(obj))(function(r) {
                        var key = reflectSymbol2(l);
                        var decodeJsonFieldFn = get3(l)(v);
                        var v2 = decodeJsonFieldFn(lookup4(key)(obj));
                        if (v2 instanceof Just) {
                          return bind20(lmap6(AtKey.create(key))(v2.value0))(function(val$prime) {
                            return new Right(insert6(l)(val$prime)(r));
                          });
                        }
                        ;
                        if (v2 instanceof Nothing) {
                          return new Left(new AtKey(key, MissingValue.value));
                        }
                        ;
                        throw new Error("Failed pattern match at Contrib.Data.Argonaut.Generic.Record (line 62, column 5 - line 67, column 38): " + [v2.constructor.name]);
                      });
                    };
                  };
                };
              };
            }
          };
        };
      };
    };
  };
  var foldingWithIndexDecodeSte2 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var insert6 = insert(dictIsSymbol)()();
    return function() {
      return function() {
        return function(dictDecodeJsonField) {
          var decodeJsonField2 = decodeJsonField(dictDecodeJsonField);
          return {
            foldingWithIndex: function(v) {
              return function(l) {
                return function(acc) {
                  return function(v1) {
                    return function(obj) {
                      return bind20(acc(obj))(function(r) {
                        var key = reflectSymbol2(l);
                        var v2 = decodeJsonField2(lookup4(key)(obj));
                        if (v2 instanceof Just) {
                          return bind20(lmap6(AtKey.create(key))(v2.value0))(function(val$prime) {
                            return new Right(insert6(l)(val$prime)(r));
                          });
                        }
                        ;
                        if (v2 instanceof Nothing) {
                          return new Left(new AtKey(key, MissingValue.value));
                        }
                        ;
                        throw new Error("Failed pattern match at Contrib.Data.Argonaut.Generic.Record (line 41, column 5 - line 46, column 38): " + [v2.constructor.name]);
                      });
                    };
                  };
                };
              };
            }
          };
        };
      };
    };
  };
  var decodeRecord1 = function() {
    return function() {
      return function(dictHFoldlWithIndex) {
        var hfoldlWithIndex2 = hfoldlWithIndex(dictHFoldlWithIndex);
        return {
          decodeRecord: function(decoders) {
            var empty6 = function(v) {
              return new Right({});
            };
            var decodeObject = hfoldlWithIndex2(decoders)(empty6)($$Proxy.value);
            return function(json3) {
              return bind20(decodeJson19(json3))(function(obj) {
                return decodeObject(obj);
              });
            };
          }
        };
      };
    };
  };
  var decodeRecord2 = /* @__PURE__ */ decodeRecord1()();
  var decodeRecord3 = function(dict) {
    return dict.decodeRecord;
  };
  var decodeNewtypedRecord1 = function() {
    return function() {
      return function() {
        return function(dictHFoldlWithIndex) {
          var decodeRecord32 = decodeRecord3(decodeRecord2(dictHFoldlWithIndex));
          return {
            decodeNewtypedRecord: function(decoders) {
              return map30(map115(wrap3))(decodeRecord32(decoders));
            }
          };
        };
      };
    };
  };
  var decodeNewtypedRecord = function(dict) {
    return dict.decodeNewtypedRecord;
  };

  // output/Marlowe.Runtime.Web.Types/index.js
  var identity18 = /* @__PURE__ */ identity(categoryFn);
  var show25 = /* @__PURE__ */ show(showInt);
  var versionIsSymbol = {
    reflectSymbol: function() {
      return "version";
    }
  };
  var metadataIsSymbol = {
    reflectSymbol: function() {
      return "metadata";
    }
  };
  var bind21 = /* @__PURE__ */ bind(bindMaybe);
  var pure18 = /* @__PURE__ */ pure(applicativeMaybe);
  var map116 = /* @__PURE__ */ map(functorFn);
  var map211 = /* @__PURE__ */ map(functorEither);
  var decodeJson20 = /* @__PURE__ */ decodeJson(decodeJsonString);
  var bind110 = /* @__PURE__ */ bind(bindEither);
  var decodeForeignObject3 = /* @__PURE__ */ decodeForeignObject2(decodeJsonJson);
  var decodeJson110 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeForeignObject2(decodeForeignObject3));
  var $$for3 = /* @__PURE__ */ $$for(applicativeEither)(traversableArray);
  var toUnfoldable6 = /* @__PURE__ */ toUnfoldable3(unfoldableArray);
  var show111 = /* @__PURE__ */ show(showString);
  var pure19 = /* @__PURE__ */ pure(applicativeEither);
  var fromFoldable7 = /* @__PURE__ */ fromFoldable3(ordInt)(foldableArray);
  var gDecodeJsonCons2 = /* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ decodeFieldId(decodeJsonInt));
  var decodeJson23 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeRecord(/* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ decodeFieldId(decodeJsonString))(/* @__PURE__ */ gDecodeJsonCons2(/* @__PURE__ */ gDecodeJsonCons2(gDecodeJsonNil)({
    reflectSymbol: function() {
      return "slotNo";
    }
  })()())({
    reflectSymbol: function() {
      return "blockNo";
    }
  })()())({
    reflectSymbol: function() {
      return "blockHeaderHash";
    }
  })()())());
  var statusIsSymbol = {
    reflectSymbol: function() {
      return "status";
    }
  };
  var contractIdIsSymbol2 = {
    reflectSymbol: function() {
      return "contractId";
    }
  };
  var blockIsSymbol = {
    reflectSymbol: function() {
      return "block";
    }
  };
  var unwrap8 = /* @__PURE__ */ unwrap();
  var map32 = /* @__PURE__ */ map(functorMaybe);
  var decodeNewtypedRecord12 = /* @__PURE__ */ decodeNewtypedRecord1()()();
  var hfoldlWithIndexRowListCons2 = /* @__PURE__ */ hfoldlWithIndexRowListCons(/* @__PURE__ */ foldingWithIndexDecodeSte(metadataIsSymbol)()()());
  var Unsigned = /* @__PURE__ */ function() {
    function Unsigned2() {
    }
    ;
    Unsigned2.value = new Unsigned2();
    return Unsigned2;
  }();
  var Submitted = /* @__PURE__ */ function() {
    function Submitted2() {
    }
    ;
    Submitted2.value = new Submitted2();
    return Submitted2;
  }();
  var Confirmed = /* @__PURE__ */ function() {
    function Confirmed2() {
    }
    ;
    Confirmed2.value = new Confirmed2();
    return Confirmed2;
  }();
  var ResourceLink = function(x) {
    return x;
  };
  var PolicyId = function(x) {
    return x;
  };
  var Metadata = function(x) {
    return x;
  };
  var V1 = /* @__PURE__ */ function() {
    function V12() {
    }
    ;
    V12.value = new V12();
    return V12;
  }();
  var BlockHeader = function(x) {
    return x;
  };
  var toResourceLinkResourceLin = {
    toResourceLink: identity18
  };
  var showTxStatus = {
    show: function(v) {
      if (v instanceof Unsigned) {
        return "Unsigned";
      }
      ;
      if (v instanceof Submitted) {
        return "Submitted";
      }
      ;
      if (v instanceof Confirmed) {
        return "Confirmed";
      }
      ;
      throw new Error("Failed pattern match at Marlowe.Runtime.Web.Types (line 103, column 1 - line 106, column 31): " + [v.constructor.name]);
    }
  };
  var decodeJsonTxStatus = {
    decodeJson: /* @__PURE__ */ decodeFromString(function(v) {
      if (v === "unsigned") {
        return new Just(Unsigned.value);
      }
      ;
      if (v === "submitted") {
        return new Just(Submitted.value);
      }
      ;
      if (v === "confirmed") {
        return new Just(Confirmed.value);
      }
      ;
      return Nothing.value;
    })
  };
  var decodeFieldId1 = /* @__PURE__ */ decodeFieldId(decodeJsonTxStatus);
  var hfoldlWithIndexRowListCons3 = /* @__PURE__ */ hfoldlWithIndexRowListCons(/* @__PURE__ */ foldingWithIndexDecodeSte2(statusIsSymbol)()()(decodeFieldId1));
  var decodeJsonTxOutRef = {
    decodeJson: /* @__PURE__ */ decodeFromString(/* @__PURE__ */ function() {
      var $735 = split("#");
      return function($736) {
        return function(v) {
          if (v.length === 2) {
            return bind21(fromString(v[1]))(function(txIx) {
              return pure18({
                txId: v[0],
                txIx
              });
            });
          }
          ;
          return Nothing.value;
        }($735($736));
      };
    }())
  };
  var decodeFieldId2 = /* @__PURE__ */ decodeFieldId(decodeJsonTxOutRef);
  var hfoldlWithIndexRowListCons4 = /* @__PURE__ */ hfoldlWithIndexRowListCons(/* @__PURE__ */ foldingWithIndexDecodeSte2(contractIdIsSymbol2)()()(decodeFieldId2));
  var decodeJsonResourceLink = {
    decodeJson: function(json3) {
      return map211(ResourceLink)(decodeJson20(json3));
    }
  };
  var decodeJsonResourceEndpoin = decodeJsonResourceLink;
  var decodeJsonPolicyId = {
    decodeJson: /* @__PURE__ */ map116(/* @__PURE__ */ map211(PolicyId))(decodeJson20)
  };
  var hfoldlWithIndexRowListCons5 = /* @__PURE__ */ hfoldlWithIndexRowListCons(/* @__PURE__ */ foldingWithIndexDecodeSte2({
    reflectSymbol: function() {
      return "roleTokenMintingPolicyId";
    }
  })()()(/* @__PURE__ */ decodeFieldId(decodeJsonPolicyId)));
  var decodeJsonMetadata = {
    decodeJson: function(json3) {
      return bind110(decodeJson110(json3))(function(v) {
        return bind110($$for3(toUnfoldable6(v))(function(v1) {
          return bind110(function() {
            var err = new TypeMismatch2("Expecting an integer metadata label but got: " + show111(v1.value0));
            return note(err)(fromString(v1.value0));
          }())(function(idx$prime) {
            return pure19(new Tuple(idx$prime, v1.value1));
          });
        }))(function(v1) {
          return pure19(Metadata(fromFoldable7(v1)));
        });
      });
    }
  };
  var decodeJsonMarloweVersion = {
    decodeJson: /* @__PURE__ */ decodeFromString(function(v) {
      if (v === "v1") {
        return new Just(V1.value);
      }
      ;
      return Nothing.value;
    })
  };
  var hfoldlWithIndexRowListCons6 = /* @__PURE__ */ hfoldlWithIndexRowListCons(/* @__PURE__ */ foldingWithIndexDecodeSte2(versionIsSymbol)()()(/* @__PURE__ */ decodeFieldId(decodeJsonMarloweVersion)))(hfoldlWithIndexRowListNil);
  var decodeJsonContractEndpoin = decodeJsonResourceEndpoin;
  var decodeJsonBlockHeader = {
    decodeJson: function(json3) {
      return map211(BlockHeader)(decodeJson23(json3));
    }
  };
  var decodeFieldMaybe3 = /* @__PURE__ */ decodeFieldMaybe(decodeJsonBlockHeader);
  var hfoldlWithIndexRowListCons7 = /* @__PURE__ */ hfoldlWithIndexRowListCons(/* @__PURE__ */ foldingWithIndexDecodeSte2(blockIsSymbol)()()(decodeFieldMaybe3));
  var txOutRefToString = function(v) {
    return v.txId + ("#" + show25(v.txIx));
  };
  var toResourceLink = function(dict) {
    return dict.toResourceLink;
  };
  var toResourceLink1 = /* @__PURE__ */ toResourceLink(toResourceLinkResourceLin);
  var toResourceLink2 = function() {
    return function(dictToResourceLink) {
      return {
        toResourceLink: function() {
          var $739 = toResourceLink(dictToResourceLink);
          return function($740) {
            return $739(unwrap8($740));
          };
        }()
      };
    };
  };
  var toResourceLinkIndexEndpoi = {
    toResourceLink: function(v) {
      return toResourceLink1(v);
    }
  };
  var metadataFieldDecoder = {
    metadata: /* @__PURE__ */ map32(/* @__PURE__ */ decodeJson(decodeJsonMetadata))
  };
  var decodeJsonContractHeader = {
    decodeJson: /* @__PURE__ */ decodeNewtypedRecord(/* @__PURE__ */ decodeNewtypedRecord12(/* @__PURE__ */ hfoldlWithIndexRowListCons7(/* @__PURE__ */ hfoldlWithIndexRowListCons4(/* @__PURE__ */ hfoldlWithIndexRowListCons2(/* @__PURE__ */ hfoldlWithIndexRowListCons5(/* @__PURE__ */ hfoldlWithIndexRowListCons3(hfoldlWithIndexRowListCons6)))))))(metadataFieldDecoder)
  };
  var api = "contracts";

  // output/Component.ContractList/index.js
  var bind23 = /* @__PURE__ */ bind3(ixBindRender);
  var pure20 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var append3 = /* @__PURE__ */ append(semigroupJSX);
  var div12 = /* @__PURE__ */ div4()(toJSXArrayJSX)()();
  var show26 = /* @__PURE__ */ show(/* @__PURE__ */ showTuple(/* @__PURE__ */ showContractTerms(showDecimal))(showContract));
  var mempty8 = /* @__PURE__ */ mempty(monoidJSX);
  var button5 = /* @__PURE__ */ button2()(toJSXString)()();
  var show112 = /* @__PURE__ */ show(/* @__PURE__ */ showSet(showInt));
  var table3 = /* @__PURE__ */ table2()(toJSXArrayJSX)()();
  var thead3 = /* @__PURE__ */ thead2()(toJSXArrayJSX)()();
  var tr3 = /* @__PURE__ */ tr2()(toJSXArrayJSX)()();
  var th3 = /* @__PURE__ */ th2()(toJSXArrayJSX)()();
  var tbody3 = /* @__PURE__ */ tbody2()(toJSXArrayJSX)()();
  var map31 = /* @__PURE__ */ map(functorArray);
  var td3 = /* @__PURE__ */ td2()(toJSXArrayJSX)()();
  var show27 = /* @__PURE__ */ show(showTxStatus);
  var Creating = /* @__PURE__ */ function() {
    function Creating3() {
    }
    ;
    Creating3.value = new Creating3();
    return Creating3;
  }();
  var Submitting = /* @__PURE__ */ function() {
    function Submitting2(value0) {
      this.value0 = value0;
    }
    ;
    Submitting2.create = function(value0) {
      return new Submitting2(value0);
    };
    return Submitting2;
  }();
  var mkContractList = function __do4() {
    var contractForm = mkContractForm();
    var modal = mkModal();
    return component("ContractList")(function(contractList) {
      return bind23(useState({
        newContract: Nothing.value,
        metadata: Nothing.value
      }))(function(v) {
        var onView = function(metadata) {
          return handler_(v.value1(function(v1) {
            return {
              newContract: v1.newContract,
              metadata: new Just(metadata)
            };
          }));
        };
        var onNewContract = function(contractTerms) {
          return v.value1(function(v1) {
            return {
              newContract: new Just(new Submitting(contractTerms)),
              metadata: v1.metadata
            };
          });
        };
        var onAddContractClick = handler_(v.value1(function(v1) {
          return {
            newContract: new Just(Creating.value),
            metadata: v1.metadata
          };
        }));
        return pure20(append3(div12({})([function() {
          if (v.value0.newContract instanceof Just && v.value0.newContract.value0 instanceof Creating) {
            return modal({
              title: text("Add contract"),
              onDismiss: v.value1(function(v1) {
                return {
                  newContract: Nothing.value,
                  metadata: v1.metadata
                };
              }),
              body: contractForm(onNewContract)
            });
          }
          ;
          if (v.value0.newContract instanceof Just && v.value0.newContract.value0 instanceof Submitting) {
            return modal({
              title: text("Submitting"),
              onDismiss: v.value1(function(v1) {
                return {
                  newContract: Nothing.value,
                  metadata: v1.metadata
                };
              }),
              body: text("Submitting" + show26(v.value0.newContract.value0.value0))
            });
          }
          ;
          if (v.value0.newContract instanceof Just) {
            return modal({
              title: text("Success or failure"),
              onDismiss: v.value1(function(v1) {
                return {
                  newContract: Nothing.value,
                  metadata: v1.metadata
                };
              }),
              body: text("Success or failure...")
            });
          }
          ;
          if (v.value0.newContract instanceof Nothing) {
            return mempty8;
          }
          ;
          throw new Error("Failed pattern match at Component.ContractList (line 75, column 11 - line 102, column 30): " + [v.value0.newContract.constructor.name]);
        }(), button5({
          onClick: onAddContractClick,
          className: "btn btn-primary"
        })("Add Contract"), function() {
          if (v.value0.metadata instanceof Just) {
            return modal({
              body: text(show112(keys3(v.value0.metadata.value0))),
              onDismiss: v.value1(function(v1) {
                return {
                  newContract: v1.newContract,
                  metadata: Nothing.value
                };
              }),
              title: text("ACTUS Contract Terms")
            });
          }
          ;
          if (v.value0.metadata instanceof Nothing) {
            return mempty8;
          }
          ;
          throw new Error("Failed pattern match at Component.ContractList (line 106, column 11 - line 112, column 30): " + [v.value0.metadata.constructor.name]);
        }()]))(table3({
          className: "table table-striped"
        })([thead3({})([tr3({})([th3({})([text("Status")]), th3({})([text("Contract ID")]), th3({})([text("View")])])]), tbody3({})(map31(function(v1) {
          return tr3({})([td3({})([text(show27(v1.resource.status))]), td3({})([text(txOutRefToString(v1.resource.contractId))]), td3({})([button5({
            onClick: onView(v1.resource.metadata),
            className: "btn btn-secondary btn-sm"
          })("View")])]);
        })(contractList))])));
      });
    })();
  };

  // output/Component.EventList/index.js
  var bind24 = /* @__PURE__ */ bind3(ixBindRender);
  var pure21 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var div13 = /* @__PURE__ */ div4()(toJSXArrayJSX)()();
  var mempty9 = /* @__PURE__ */ mempty(monoidJSX);
  var table4 = /* @__PURE__ */ table2()(toJSXArrayJSX)()();
  var thead4 = /* @__PURE__ */ thead2()(toJSXArrayJSX)()();
  var tr4 = /* @__PURE__ */ tr2()(toJSXArrayJSX)()();
  var th4 = /* @__PURE__ */ th2()(toJSXArrayJSX)()();
  var Creating2 = /* @__PURE__ */ function() {
    function Creating3() {
    }
    ;
    Creating3.value = new Creating3();
    return Creating3;
  }();
  var mkEventList = function __do5() {
    var modal = mkModal();
    return component("EventList")(function(eventList) {
      return bind24(useState({
        newInput: Nothing.value
      }))(function(v) {
        var onEdit = handler_(v.value1(function(v1) {
          return {
            newInput: new Just(Creating2.value)
          };
        }));
        return pure21(div13({})([function() {
          if (v.value0.newInput instanceof Just) {
            return modal({
              body: text("body"),
              onDismiss: v.value1(function(v1) {
                return {
                  newInput: Nothing.value
                };
              }),
              title: text("title")
            });
          }
          ;
          if (v.value0.newInput instanceof Nothing) {
            return mempty9;
          }
          ;
          throw new Error("Failed pattern match at Component.EventList (line 39, column 11 - line 45, column 30): " + [v.value0.newInput.constructor.name]);
        }(), table4({
          className: "table table-striped"
        })([thead4({})([tr4({})([th4({})([text("Contract")]), th4({})([text("Type")]), th4({})([text("Date")]), th4({})([text("Amount")]), th4({})([text("Currency")]), th4({})([text("Contract ID")])])])])]));
      });
    })();
  };

  // node_modules/react-icons/lib/esm/iconBase.js
  var import_react5 = __toESM(require_react());

  // node_modules/react-icons/lib/esm/iconContext.js
  var import_react4 = __toESM(require_react());
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = import_react4.default.createContext && import_react4.default.createContext(DefaultContext);

  // node_modules/react-icons/lib/esm/iconBase.js
  var __assign = function() {
    __assign = Object.assign || function(t) {
      for (var s2, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t[p2] = s2[p2];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var __rest = function(s2, e2) {
    var t = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
        t[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t[p2[i2]] = s2[p2[i2]];
      }
    return t;
  };
  function Tree2Element(tree) {
    return tree && tree.map(function(node, i2) {
      return import_react5.default.createElement(node.tag, __assign({
        key: i2
      }, node.attr), Tree2Element(node.child));
    });
  }
  function GenIcon(data) {
    return function(props) {
      return import_react5.default.createElement(IconBase, __assign({
        attr: __assign({}, data.attr)
      }, props), Tree2Element(data.child));
    };
  }
  function IconBase(props) {
    var elem5 = function(conf) {
      var attr = props.attr, size5 = props.size, title3 = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
      var computedSize = size5 || conf.size || "1em";
      var className2;
      if (conf.className)
        className2 = conf.className;
      if (props.className)
        className2 = (className2 ? className2 + " " : "") + props.className;
      return import_react5.default.createElement("svg", __assign({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className: className2,
        style: __assign(__assign({
          color: props.color || conf.color
        }, conf.style), props.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title3 && import_react5.default.createElement("title", null, title3), props.children);
    };
    return IconContext !== void 0 ? import_react5.default.createElement(IconContext.Consumer, null, function(conf) {
      return elem5(conf);
    }) : elem5(DefaultContext);
  }

  // node_modules/react-icons/bs/index.esm.js
  function BsWallet2(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M12.136.326A1.5 1.5 0 0 1 14 1.78V3h.5A1.5 1.5 0 0 1 16 4.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 13.5v-9a1.5 1.5 0 0 1 1.432-1.499L12.136.326zM5.562 3H13V1.78a.5.5 0 0 0-.621-.484L5.562 3zM1.5 4a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-13z" } }] })(props);
  }

  // output/Component.App/index.js
  var bind25 = /* @__PURE__ */ bind(/* @__PURE__ */ bindReaderT(bindEffect));
  var liftEffect4 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReader(monadEffectEffect));
  var asks6 = /* @__PURE__ */ asks(/* @__PURE__ */ monadAskReaderT(monadEffect));
  var bind111 = /* @__PURE__ */ bind3(ixBindRender);
  var pure23 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var div14 = /* @__PURE__ */ div4();
  var div15 = /* @__PURE__ */ div14(toJSXArrayJSX)()();
  var div22 = /* @__PURE__ */ div14(toJSXString)()();
  var append4 = /* @__PURE__ */ append(semigroupArray);
  var guard3 = /* @__PURE__ */ guard(monoidArray);
  var pure110 = /* @__PURE__ */ pure(applicativeEffect);
  var div32 = /* @__PURE__ */ div14(toJSXJSX)()();
  var mkApp = /* @__PURE__ */ bind25(/* @__PURE__ */ liftEffect4(mkContractList))(function(contractListComponent) {
    return bind25(liftEffect4(mkEventList))(function(eventListComponent) {
      return bind25(mkConnectWallet)(function(walletComponent) {
        return bind25(asks6(function(v) {
          return v.walletInfoCtx;
        }))(function(walletInfoCtx) {
          return bind25(liftEffect4(mkModal))(function(modal) {
            return bind25(asks6(function(v) {
              return v.contracts;
            }))(function(v) {
              return liftEffect4(component("App")(function(v1) {
                return bind111(useState$prime(Nothing.value))(function(v2) {
                  return bind111(useState$prime(false))(function(v3) {
                    return pure23(provider(walletInfoCtx)(v2.value0)(singleton2(div15({
                      className: "container"
                    })([div15({
                      className: "row"
                    })([div22({
                      className: "col"
                    })("ACTUS 1"), div22({
                      className: "col"
                    })("ACTUS 2"), div15({
                      className: "col"
                    })(append4([linkWithIcon(BsWallet2)(text("Connect Wallet"))(v3.value1(true))])(guard3(v3.value0)([modal({
                      onDismiss: v3.value1(false),
                      body: walletComponent({
                        currentlyConnected: Nothing.value,
                        onWalletConnected: function(v4) {
                          return pure110(unit);
                        }
                      }),
                      title: text("Configuring wallet")
                    })])))]), div15({
                      className: "row"
                    })([div32({
                      className: "col"
                    })(contractListComponent(v)), div32({
                      className: "col"
                    })(eventListComponent(v))])]))));
                  });
                });
              }));
            });
          });
        });
      });
    });
  });

  // output/Effect.Class.Console/index.js
  var log4 = function(dictMonadEffect) {
    var $51 = liftEffect(dictMonadEffect);
    return function($52) {
      return $51(log3($52));
    };
  };

  // output/Control.Promise/foreign.js
  function thenImpl(promise2) {
    return function(errCB) {
      return function(succCB) {
        console.log("effect of thenImpl");
        return function() {
          console.log("running thenImpl");
          console.log(promise2);
          promise2.then(
            function(success) {
              console.log("PROMISE THEN SUCCESS");
              console.log("thenImpl success");
              succCB(success);
            },
            function(err) {
              console.log("PROMISE THEN ERROR");
              console.log(err);
              errCB(err);
            }
          ).catch(function(err) {
            console.log("PROMISE CATCH");
            console.log(err);
          });
          console.log("thenImpl done");
        };
      };
    };
  }

  // output/Control.Promise/index.js
  var voidRight3 = /* @__PURE__ */ voidRight(functorEffect);
  var mempty10 = /* @__PURE__ */ mempty(monoidCanceler);
  var identity19 = /* @__PURE__ */ identity(categoryFn);
  var alt9 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
  var unsafeReadTagged2 = /* @__PURE__ */ unsafeReadTagged(monadIdentity);
  var map33 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
  var readString3 = /* @__PURE__ */ readString(monadIdentity);
  var bind26 = /* @__PURE__ */ bind(bindAff);
  var liftEffect5 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var toAff$prime2 = function(customCoerce) {
    return function(p2) {
      return makeAff(function(cb) {
        return voidRight3(mempty10)(thenImpl(p2)(function($14) {
          return cb(Left.create(customCoerce($14)))();
        })(function($15) {
          return cb(Right.create($15))();
        }));
      });
    };
  };
  var coerce4 = function(fn) {
    return either(function(v) {
      return error("Promise failed, couldn't extract JS Error or String");
    })(identity19)(runExcept(alt9(unsafeReadTagged2("Error")(fn))(map33(error)(readString3(fn)))));
  };
  var toAff2 = /* @__PURE__ */ toAff$prime2(coerce4);
  var toAffE2 = function(f) {
    return bind26(liftEffect5(f))(toAff2);
  };

  // output/Fetch.Core/foreign.js
  function _fetch(a2, b2) {
    console.log("FETCH JS");
    console.log(a2);
    console.log(b2);
    console.log(fetch);
    return fetch(a2, b2).then(function(response, rejected) {
      console.log("JS RESPONDED");
      if (rejected) {
        console.log("JS REJECTED");
        console.log(rejected);
        throw rejected;
      }
      return response;
    }).catch(function(error4) {
      console.log("JS ERROR");
      console.log(error4);
      throw error4;
    });
  }

  // output/Fetch.Core/index.js
  var fetch2 = function(req) {
    return function() {
      return _fetch(req, {});
    };
  };

  // output/Fetch.Core.Headers/foreign.js
  function unsafeFromRecord(r) {
    return new Headers(r);
  }
  function _toArray(tuple, headers2) {
    console.log("HEADERS TO ARRAY");
    console.log(Array.from(headers2.entries(), function(pair) {
      return pair;
    }));
    return Array.from(headers2.entries(), function(pair) {
      return tuple(pair[0])(pair[1]);
    });
  }

  // output/Fetch.Core.Headers/index.js
  var toArray5 = /* @__PURE__ */ function() {
    return runFn2(_toArray)(Tuple.create);
  }();
  var fromRecord = function() {
    return unsafeFromRecord;
  };

  // output/Fetch.Core.Request/foreign.js
  function _unsafeNew(url3, options2) {
    try {
      return new Request(url3, options2);
    } catch (e2) {
      console.error(e2);
      throw e2;
    }
  }

  // output/Fetch.Core.RequestMode/index.js
  var Cors = /* @__PURE__ */ function() {
    function Cors2() {
    }
    ;
    Cors2.value = new Cors2();
    return Cors2;
  }();
  var NoCors = /* @__PURE__ */ function() {
    function NoCors2() {
    }
    ;
    NoCors2.value = new NoCors2();
    return NoCors2;
  }();
  var SameOrigin = /* @__PURE__ */ function() {
    function SameOrigin2() {
    }
    ;
    SameOrigin2.value = new SameOrigin2();
    return SameOrigin2;
  }();
  var Navigate = /* @__PURE__ */ function() {
    function Navigate2() {
    }
    ;
    Navigate2.value = new Navigate2();
    return Navigate2;
  }();
  var toString6 = function(v) {
    if (v instanceof Cors) {
      return "cors";
    }
    ;
    if (v instanceof NoCors) {
      return "no-cors";
    }
    ;
    if (v instanceof SameOrigin) {
      return "same-origin";
    }
    ;
    if (v instanceof Navigate) {
      return "navigate";
    }
    ;
    throw new Error("Failed pattern match at Fetch.Core.RequestMode (line 12, column 12 - line 16, column 25): " + [v.constructor.name]);
  };

  // output/Fetch.Internal.Request/index.js
  var fromRecord2 = /* @__PURE__ */ fromRecord();
  var toCoreRequestOptionsHelpe = {
    convertHelper: function(v) {
      return function(v1) {
        return {};
      };
    }
  };
  var toCoreRequestOptionsConve3 = {
    convertImpl: function(v) {
      return toString6;
    }
  };
  var toCoreRequestOptionsConve7 = function() {
    return {
      convertImpl: function(v) {
        return fromRecord2;
      }
    };
  };
  var $$new3 = function() {
    return function(url3) {
      return function(options2) {
        return function() {
          return _unsafeNew(url3, options2);
        };
      };
    };
  };
  var convertImpl = function(dict) {
    return dict.convertImpl;
  };
  var convertHelper = function(dict) {
    return dict.convertHelper;
  };
  var toCoreRequestOptionsHelpe1 = function(dictToCoreRequestOptionsConverter) {
    var convertImpl1 = convertImpl(dictToCoreRequestOptionsConverter);
    return function() {
      return function() {
        return function() {
          return function(dictIsSymbol) {
            var $$delete7 = $$delete(dictIsSymbol)()();
            var get3 = get(dictIsSymbol)();
            var insert6 = insert(dictIsSymbol)()();
            return function(dictToCoreRequestOptionsHelper) {
              var convertHelper1 = convertHelper(dictToCoreRequestOptionsHelper);
              return function() {
                return function() {
                  return {
                    convertHelper: function(v) {
                      return function(r) {
                        var tail3 = convertHelper1($$Proxy.value)($$delete7($$Proxy.value)(r));
                        var head6 = convertImpl1($$Proxy.value)(get3($$Proxy.value)(r));
                        return insert6($$Proxy.value)(head6)(tail3);
                      };
                    }
                  };
                };
              };
            };
          };
        };
      };
    };
  };
  var toCoreRequestOptionsRowRo = function() {
    return function() {
      return function(dictToCoreRequestOptionsHelper) {
        return {
          convert: convertHelper(dictToCoreRequestOptionsHelper)($$Proxy.value)
        };
      };
    };
  };
  var convert = function(dict) {
    return dict.convert;
  };

  // output/Fetch.Core.Response/foreign.js
  function headers(resp) {
    return resp.headers;
  }
  function ok(resp) {
    return resp.ok;
  }
  function redirected(resp) {
    return resp.redirected;
  }
  function status(resp) {
    return resp.status;
  }
  function statusText(resp) {
    return resp.statusText;
  }
  function url2(resp) {
    return resp.url;
  }
  function body2(resp) {
    return function() {
      return resp.body;
    };
  }
  function arrayBuffer(resp) {
    return function() {
      return resp.arrayBuffer();
    };
  }
  function blob(resp) {
    return function() {
      return resp.blob();
    };
  }
  function text6(resp) {
    return function() {
      return resp.text();
    };
  }
  function json(resp) {
    return function() {
      return resp.json();
    };
  }

  // output/Fetch.Internal.Response/index.js
  var mapFlipped7 = /* @__PURE__ */ mapFlipped(functorEffect);
  var promiseToPromise = unsafeCoerce2;
  var text7 = function(response) {
    return toAffE2(mapFlipped7(text6(response))(promiseToPromise));
  };
  var json2 = function(response) {
    return toAffE2(mapFlipped7(json(response))(promiseToPromise));
  };
  var blob2 = function(response) {
    return toAffE2(mapFlipped7(blob(response))(promiseToPromise));
  };
  var arrayBuffer2 = function(response) {
    return toAffE2(mapFlipped7(arrayBuffer(response))(promiseToPromise));
  };
  var convert2 = function(response) {
    return {
      headers: headers(response),
      ok: ok(response),
      redirected: redirected(response),
      status: status(response),
      statusText: statusText(response),
      url: url2(response),
      text: text7(response),
      json: json2(response),
      body: body2(response),
      arrayBuffer: arrayBuffer2(response),
      blob: blob2(response)
    };
  };

  // output/Contrib.Fetch/index.js
  var show28 = /* @__PURE__ */ show(showError);
  var map34 = /* @__PURE__ */ map(functorAff);
  var bind27 = /* @__PURE__ */ bind(bindAff);
  var liftEffect6 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var $$new4 = /* @__PURE__ */ $$new3();
  var map117 = /* @__PURE__ */ map(functorEffect);
  var pure24 = /* @__PURE__ */ pure(applicativeAff);
  var bind112 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadAff));
  var catchError2 = /* @__PURE__ */ catchError(monadErrorAff);
  var elem4 = /* @__PURE__ */ elem2(eqInt);
  var pure111 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadAff));
  var throwError2 = /* @__PURE__ */ throwError(/* @__PURE__ */ monadThrowExceptT(monadAff));
  var InvalidStatusCode = /* @__PURE__ */ function() {
    function InvalidStatusCode2(value0) {
      this.value0 = value0;
    }
    ;
    InvalidStatusCode2.create = function(value0) {
      return new InvalidStatusCode2(value0);
    };
    return InvalidStatusCode2;
  }();
  var FetchError = /* @__PURE__ */ function() {
    function FetchError3(value0) {
      this.value0 = value0;
    }
    ;
    FetchError3.create = function(value0) {
      return new FetchError3(value0);
    };
    return FetchError3;
  }();
  var showFetchError = {
    show: function(v) {
      if (v instanceof InvalidStatusCode) {
        return "InvalidStatusCode";
      }
      ;
      if (v instanceof FetchError) {
        return "FetchError " + show28(v.value0);
      }
      ;
      throw new Error("Failed pattern match at Contrib.Fetch (line 31, column 1 - line 33, column 56): " + [v.constructor.name]);
    }
  };
  var jsonBody = function(response) {
    return map34(unsafeCoerce2)(response.json);
  };
  var fetchEither = function() {
    return function() {
      return function(dictToCoreRequestOptions) {
        var convert3 = convert(dictToCoreRequestOptions);
        return function(url3) {
          return function(r) {
            return function(allowedStatusCodes2) {
              return function(handleError) {
                return runExceptT(function() {
                  var fetch3 = bind27(liftEffect6($$new4(url3)(convert3(r))))(function(request) {
                    return bind27(toAffE2(map117(promiseToPromise)(fetch2(request))))(function(cResponse) {
                      return pure24(convert2(cResponse));
                    });
                  });
                  return bind112(catchError2(map34(Right.create)(fetch3))(function(err) {
                    return pure24(new Left(handleError(new FetchError(err))));
                  }))(function(res) {
                    var $33 = elem4(res.status)(allowedStatusCodes2);
                    if ($33) {
                      return pure111(res);
                    }
                    ;
                    return throwError2(handleError(new InvalidStatusCode(res)));
                  });
                }());
              };
            };
          };
        };
      };
    };
  };

  // output/Data.String.CaseInsensitive/index.js
  var compare8 = /* @__PURE__ */ compare(ordString);
  var CaseInsensitiveString = function(x) {
    return x;
  };
  var eqCaseInsensitiveString = {
    eq: function(v) {
      return function(v1) {
        return toLower(v) === toLower(v1);
      };
    }
  };
  var ordCaseInsensitiveString = {
    compare: function(v) {
      return function(v1) {
        return compare8(toLower(v))(toLower(v1));
      };
    },
    Eq0: function() {
      return eqCaseInsensitiveString;
    }
  };

  // output/Marlowe.Runtime.Web.Client/index.js
  var bind28 = /* @__PURE__ */ bind(bindEither);
  var decodeJson21 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeForeignObject2(decodeJsonJson));
  var getField4 = /* @__PURE__ */ getField2(decodeJsonJson);
  var insert5 = /* @__PURE__ */ insert({
    reflectSymbol: function() {
      return "Access-Control-Request-Headers";
    }
  })()();
  var insert1 = /* @__PURE__ */ insert({
    reflectSymbol: function() {
      return "Accept";
    }
  })()();
  var bind113 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadAff));
  var fetchEither2 = /* @__PURE__ */ fetchEither()();
  var toCoreRequestOptionsRowRo2 = /* @__PURE__ */ toCoreRequestOptionsRowRo()();
  var toCoreRequestOptionsHelpe12 = /* @__PURE__ */ toCoreRequestOptionsHelpe1(/* @__PURE__ */ toCoreRequestOptionsConve7())()()()({
    reflectSymbol: function() {
      return "headers";
    }
  });
  var fetchEither1 = /* @__PURE__ */ fetchEither2(/* @__PURE__ */ toCoreRequestOptionsRowRo2(/* @__PURE__ */ toCoreRequestOptionsHelpe12(/* @__PURE__ */ toCoreRequestOptionsHelpe1(toCoreRequestOptionsConve3)()()()({
    reflectSymbol: function() {
      return "mode";
    }
  })(toCoreRequestOptionsHelpe)()())()()));
  var lift6 = /* @__PURE__ */ lift(monadTransExceptT);
  var lift1 = /* @__PURE__ */ lift6(monadAff);
  var throwError3 = /* @__PURE__ */ throwError(/* @__PURE__ */ monadThrowExceptT(monadAff));
  var pure25 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadAff));
  var bind29 = /* @__PURE__ */ bind(bindAff);
  var pure112 = /* @__PURE__ */ pure(applicativeAff);
  var map35 = /* @__PURE__ */ map(functorArray);
  var lmap7 = /* @__PURE__ */ lmap(bifunctorTuple);
  var fromFoldable8 = /* @__PURE__ */ fromFoldable3(ordCaseInsensitiveString)(foldableArray);
  var lookup6 = /* @__PURE__ */ lookup2(ordCaseInsensitiveString);
  var FetchError2 = /* @__PURE__ */ function() {
    function FetchError3(value0) {
      this.value0 = value0;
    }
    ;
    FetchError3.create = function(value0) {
      return new FetchError3(value0);
    };
    return FetchError3;
  }();
  var ResponseDecodingError = /* @__PURE__ */ function() {
    function ResponseDecodingError2(value0) {
      this.value0 = value0;
    }
    ;
    ResponseDecodingError2.create = function(value0) {
      return new ResponseDecodingError2(value0);
    };
    return ResponseDecodingError2;
  }();
  var genericClientError_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return new FetchError2(x.value0);
      }
      ;
      if (x instanceof Inr) {
        return new ResponseDecodingError(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Marlowe.Runtime.Web.Client (line 44, column 1 - line 44, column 38): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof FetchError2) {
        return new Inl(x.value0);
      }
      ;
      if (x instanceof ResponseDecodingError) {
        return new Inr(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Marlowe.Runtime.Web.Client (line 44, column 1 - line 44, column 38): " + [x.constructor.name]);
    }
  };
  var showClientError = {
    show: /* @__PURE__ */ genericShow(genericClientError_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor(/* @__PURE__ */ genericShowArgsArgument(showFetchError))({
      reflectSymbol: function() {
        return "FetchError";
      }
    }))(/* @__PURE__ */ genericShowConstructor(/* @__PURE__ */ genericShowArgsArgument(showJsonDecodeError))({
      reflectSymbol: function() {
        return "ResponseDecodingError";
      }
    })))
  };
  var decodeResponse = function(dictDecodeJson) {
    var decodeJson111 = decodeJson(dictDecodeJson);
    return function(json3) {
      return bind28(decodeJson21(json3))(function(obj) {
        return bind28(getField4(obj)("results"))(function(res) {
          return decodeJson111(res);
        });
      });
    };
  };
  var allowedStatusCodes = [200, 201, 206];
  var getResource = function(dictDecodeJson) {
    var decodeResponse1 = decodeResponse(dictDecodeJson);
    return function() {
      return function() {
        return function() {
          return function(v) {
            return function(v1) {
              return function(extraHeaders) {
                var url3 = v + ("/" + v1);
                var reqHeaders = insert5($$Proxy.value)("Range, Accept")(insert1($$Proxy.value)("application/json")(extraHeaders));
                return runExceptT(bind113(fetchEither1(url3)({
                  headers: reqHeaders,
                  mode: Cors.value
                })(allowedStatusCodes)(FetchError2.create))(function(v2) {
                  return bind113(lift1(jsonBody(v2)))(function($242) {
                    return function(v3) {
                      if (v3 instanceof Left) {
                        return throwError3(new ResponseDecodingError(v3.value0));
                      }
                      ;
                      if (v3 instanceof Right) {
                        return pure25({
                          payload: v3.value0,
                          headers: v2.headers,
                          status: v2.status
                        });
                      }
                      ;
                      throw new Error("Failed pattern match at Marlowe.Runtime.Web.Client (line 83, column 48 - line 85, column 69): " + [v3.constructor.name]);
                    }(decodeResponse1($242));
                  });
                }));
              };
            };
          };
        };
      };
    };
  };
  var getPage = function(dictDecodeJson) {
    var getResource1 = getResource(dictDecodeJson)()()();
    return function(serverUrl) {
      return function(path) {
        return function(possibleRange) {
          return runExceptT(bind113(function() {
            if (possibleRange instanceof Nothing) {
              return getResource1(serverUrl)(path)({
                Range: "contractId"
              });
            }
            ;
            if (possibleRange instanceof Just) {
              return bind29(getResource1(serverUrl)(path)({
                Range: possibleRange.value0
              }))(function(res) {
                return pure112(res);
              });
            }
            ;
            throw new Error("Failed pattern match at Marlowe.Runtime.Web.Client (line 95, column 43 - line 100, column 15): " + [possibleRange.constructor.name]);
          }())(function(v) {
            var toHeaders = function() {
              var $243 = map35(lmap7(CaseInsensitiveString));
              return function($244) {
                return fromFoldable8($243(toArray5($244)));
              };
            }();
            var nextRange = function() {
              var v1 = lookup6("Next-Range")(toHeaders(v.headers));
              if (v.status === 206 && v1 instanceof Just) {
                return new Just(v1.value0);
              }
              ;
              return Nothing.value;
            }();
            return pure25({
              page: v.payload,
              nextRange
            });
          }));
        };
      };
    };
  };
  var getPage$prime = function(dictDecodeJson) {
    var getPage1 = getPage(dictDecodeJson);
    return function(dictToResourceLink) {
      var toResourceLink3 = toResourceLink(dictToResourceLink);
      return function(serverUrl) {
        return function(path) {
          return getPage1(serverUrl)(toResourceLink3(path));
        };
      };
    };
  };

  // output/React.Basic.DOM.Client/foreign.js
  var import_client = __toESM(require_client(), 1);
  var createRoot = (container) => () => import_client.default.createRoot(container);
  var renderRoot = (root) => (children2) => () => root.render(children2);

  // output/Web.DOM.NonElementParentNode/foreign.js
  function _getElementById(id3) {
    return function(node) {
      return function() {
        return node.getElementById(id3);
      };
    };
  }

  // output/Web.DOM.NonElementParentNode/index.js
  var map36 = /* @__PURE__ */ map(functorEffect);
  var getElementById = function(eid) {
    var $2 = map36(toMaybe);
    var $3 = _getElementById(eid);
    return function($4) {
      return $2($3($4));
    };
  };

  // output/Main/index.js
  var bind30 = /* @__PURE__ */ bind(bindAff);
  var liftEffect7 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindEffect);
  var pure26 = /* @__PURE__ */ pure(applicativeEffect);
  var bind114 = /* @__PURE__ */ bind(bindEither);
  var decodeJson24 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeForeignObject2(decodeJsonJson));
  var getField5 = /* @__PURE__ */ getField2(decodeJsonString);
  var getField1 = /* @__PURE__ */ getField2(decodeJsonBoolean);
  var pure113 = /* @__PURE__ */ pure(applicativeEither);
  var log1 = /* @__PURE__ */ log4(monadEffectEffect);
  var mapFlipped8 = /* @__PURE__ */ mapFlipped(functorAff);
  var getPage$prime2 = /* @__PURE__ */ getPage$prime(/* @__PURE__ */ decodeArray2(/* @__PURE__ */ decodeRecord(/* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ decodeFieldId(/* @__PURE__ */ decodeRecord(/* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ decodeFieldId(decodeJsonContractEndpoin))(gDecodeJsonNil)({
    reflectSymbol: function() {
      return "contract";
    }
  })()())()))(/* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ decodeFieldId(decodeJsonContractHeader))(gDecodeJsonNil)({
    reflectSymbol: function() {
      return "resource";
    }
  })()())({
    reflectSymbol: function() {
      return "links";
    }
  })()())()))(/* @__PURE__ */ toResourceLink2()(toResourceLinkIndexEndpoi));
  var liftEither2 = function(dictShow) {
    return either(function() {
      var $87 = show(dictShow);
      return function($88) {
        return $$throw($87($88));
      };
    }())(pure26);
  };
  var liftEither1 = /* @__PURE__ */ liftEither2(showJsonDecodeError);
  var liftEither22 = /* @__PURE__ */ liftEither2(showClientError);
  var decodeConfig = function(json3) {
    return bind114(decodeJson24(json3))(function(obj) {
      return bind114(getField5(obj)("marloweWebServerUrl"))(function(marloweWebServerUrl) {
        return bind114(getField1(obj)("develMode"))(function(develMode) {
          return pure113({
            marloweWebServerUrl,
            develMode
          });
        });
      });
    });
  };
  var main2 = function(configJson) {
    return function __do6() {
      var config2 = liftEither1(decodeConfig(configJson))();
      var logger = function() {
        if (config2.develMode) {
          return log1;
        }
        ;
        return $$const(pure26(unit));
      }();
      var v = bindFlipped4(document2)(windowImpl)();
      var v1 = getElementById("app-root")(toNonElementParentNode(v))();
      if (v1 instanceof Nothing) {
        return $$throw("Could not find element with id 'app-root'")();
      }
      ;
      if (v1 instanceof Just) {
        var reactRoot = createRoot(v1.value0)();
        return launchAff_(bind30(mapFlipped8(bind30(getPage$prime2(config2.marloweWebServerUrl)(api)(Nothing.value))(function($89) {
          return liftEffect7(liftEither22($89));
        }))(function(v2) {
          return v2.page;
        }))(function(contracts) {
          return bind30(liftEffect7(createContext(Nothing.value)))(function(walletInfoCtx) {
            var mkAppCtx = {
              walletInfoCtx,
              logger,
              contracts
            };
            return bind30(liftEffect7(runReaderT(mkApp)(mkAppCtx)))(function(app) {
              return liftEffect7(renderRoot(reactRoot)(app(unit)));
            });
          });
        }))();
      }
      ;
      throw new Error("Failed pattern match at Main (line 91, column 3 - line 108, column 53): " + [v1.constructor.name]);
    };
  };

  // <stdin>
  main2();
})();
/*!
 *  decimal.js v10.4.2
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
